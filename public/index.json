[{"content":"每两个月，我都要在《王者荣耀》里打够一定局数，才能保住那个王者印记。\n这个印记没有任何用处。它不能换钱，不能当简历，朋友见面时也不会说\u0026quot;哇你王者好厉害\u0026quot;。但我还是要去保它。\n昨天我突然意识到一件事：这就是陷阱的本质。\n大多数人以为游戏公司想要的是你的钱。实际上，他们要的是你的时间。钱只是副产品。\n两种游戏 虽然都叫游戏，但《王者荣耀》和《博德之门3》根本就是两种不同的东西。\n《博德之门3》是产品。你买了它，玩完了，故事结束。就像一本书或一部电影。\n《王者荣耀》是服务。它没有结束。永远有下一个赛季，下一个活动，下一个要保住的东西。\n大多数人没有意识到这个区别。他们以为\u0026quot;游戏就是游戏\u0026quot;。但这就像把餐厅和毒品混为一谈，因为它们都能让你获得快感。\n免费的陷阱 免费游戏可能是21世纪最大的商业骗局。\n大多数人以为免费就是不花钱。实际上，你在付一种更昂贵的货币：时间。\n假设你月薪8000，每天玩2小时王者。一个月60小时，相当于半个月工资。问题是，你得到了什么？一堆数字，一些虚拟道具，几个段位标识。\n这些东西在现实世界里值多少钱？对于大部分来说，基本为零。\n更糟糕的是机会成本。这60小时，你本可以学一门技能，可以读书，可以锻炼，可以和朋友聊天。任何一样都比在游戏里获得的\u0026quot;成就\u0026quot;更有价值。\n但大多数人算不清这笔账。因为时间看起来是免费的。\n注意力经济 这不仅仅是游戏的问题。\n短视频、社交媒体、爽文小说、短剧——它们都在做同一件事：收割注意力。\n它们用的是同一套方法：\n即时反馈 无限滚动 算法推荐 社交压力 王者荣耀的\u0026quot;再来一局\u0026quot;，抖音的\u0026quot;下滑看更精彩\u0026quot;，爽文的\u0026quot;下一章要装逼了\u0026quot;——这些都是同一个按钮。\n大多数人以为这是娱乐。实际上，这是一场争夺人类注意力的战争。而你是战场。\n真正的成本 我开始用一个简单的测试来判断任何娱乐活动：\n如果这个游戏/视频/内容收费每小时20元，我还会用吗？\n大多数时候答案是否定的。这说明什么？说明我其实并不真正喜欢它。我只是被它的心理触发器操控了。\n当我意识到这一点后，我的行为发生了变化。我卸载了一些App，取消了一些订阅。我开始把刷手机的时间，换成10分钟的冥想或20分钟的阅读。我开始为时间定价，像一个吝啬的商人一样，盘算着每一笔\u0026rsquo;时间支出\u0026rsquo;是否值得。我发现，我并没有失去什么，反而找回了生活的掌控感。\n品味的腐蚀 对于想做游戏的人来说，这还有另一个危险：品味的腐蚀。\n如果你天天玩设计粗糙但成瘾性强的游戏，你会开始相信\u0026quot;让人上瘾就是好设计\u0026quot;。\n这就像一个想当厨师的人天天吃垃圾食品。你的味觉会退化。你会忘记什么叫好。\n最好的游戏设计师都有一个共同点：他们知道什么是真正的好游戏。不是最赚钱的，不是最上瘾的，而是最值得玩的。\n反击 意识到问题是第一步。第二步是行动。\n对于学生来说，物理隔离最有效。把游戏设备放远一点。设置时间限制。主动寻求帮助。\n对于成年人来说，关键是重新定义\u0026quot;免费\u0026quot;。没有什么是免费的。每一分钟都有价格。\n对于父母来说，不要禁止，要引导。让孩子理解设计的逻辑，从玩家变成观察者。\n未来 我预测，未来会出现两种人。\n一种人的注意力完全被算法控制。他们以为自己在选择，实际上是在被选择。他们消费内容，但不创造价值。\n另一种人会保护自己的注意力，像保护金钱一样。他们知道什么值得投入时间，什么不值得。他们是创造者。\n这两种人之间的差距会越来越大。\n真正的问题 但这还不是最重要的问题。\n最重要的问题是：当一整代人把最好的年华献给虚拟世界时，现实世界会发生什么？\n当年轻人花更多时间在游戏里\u0026quot;成长\u0026quot;，而不是在现实中成长时，会发生什么？\n当人们习惯了即时满足，失去了延迟满足的能力时，会发生什么？\n我不知道答案。但我知道这是人类历史上第一次面临这样的实验。\n而每个沉迷于手机的人，都是这场实验的小白鼠。\n问题是：你想当小白鼠，还是想当实验员？\n","permalink":"http://localhost:1313/posts/20250727-game-art-game-pua/","summary":"\u003cp\u003e每两个月，我都要在《王者荣耀》里打够一定局数，才能保住那个王者印记。\u003c/p\u003e\n\u003cp\u003e这个印记没有任何用处。它不能换钱，不能当简历，朋友见面时也不会说\u0026quot;哇你王者好厉害\u0026quot;。但我还是要去保它。\u003c/p\u003e\n\u003cp\u003e昨天我突然意识到一件事：这就是陷阱的本质。\u003c/p\u003e\n\u003cp\u003e大多数人以为游戏公司想要的是你的钱。实际上，他们要的是你的时间。钱只是副产品。\u003c/p\u003e\n\u003ch2 id=\"两种游戏\"\u003e两种游戏\u003c/h2\u003e\n\u003cp\u003e虽然都叫游戏，但《王者荣耀》和《博德之门3》根本就是两种不同的东西。\u003c/p\u003e\n\u003cp\u003e《博德之门3》是产品。你买了它，玩完了，故事结束。就像一本书或一部电影。\u003c/p\u003e\n\u003cp\u003e《王者荣耀》是服务。它没有结束。永远有下一个赛季，下一个活动，下一个要保住的东西。\u003c/p\u003e\n\u003cp\u003e大多数人没有意识到这个区别。他们以为\u0026quot;游戏就是游戏\u0026quot;。但这就像把餐厅和毒品混为一谈，因为它们都能让你获得快感。\u003c/p\u003e\n\u003ch2 id=\"免费的陷阱\"\u003e免费的陷阱\u003c/h2\u003e\n\u003cp\u003e免费游戏可能是21世纪最大的商业骗局。\u003c/p\u003e\n\u003cp\u003e大多数人以为免费就是不花钱。实际上，你在付一种更昂贵的货币：时间。\u003c/p\u003e\n\u003cp\u003e假设你月薪8000，每天玩2小时王者。一个月60小时，相当于半个月工资。问题是，你得到了什么？一堆数字，一些虚拟道具，几个段位标识。\u003c/p\u003e\n\u003cp\u003e这些东西在现实世界里值多少钱？对于大部分来说，基本为零。\u003c/p\u003e\n\u003cp\u003e更糟糕的是机会成本。这60小时，你本可以学一门技能，可以读书，可以锻炼，可以和朋友聊天。任何一样都比在游戏里获得的\u0026quot;成就\u0026quot;更有价值。\u003c/p\u003e\n\u003cp\u003e但大多数人算不清这笔账。因为时间看起来是免费的。\u003c/p\u003e\n\u003ch2 id=\"注意力经济\"\u003e注意力经济\u003c/h2\u003e\n\u003cp\u003e这不仅仅是游戏的问题。\u003c/p\u003e\n\u003cp\u003e短视频、社交媒体、爽文小说、短剧——它们都在做同一件事：收割注意力。\u003c/p\u003e\n\u003cp\u003e它们用的是同一套方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e即时反馈\u003c/li\u003e\n\u003cli\u003e无限滚动\u003c/li\u003e\n\u003cli\u003e算法推荐\u003c/li\u003e\n\u003cli\u003e社交压力\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e王者荣耀的\u0026quot;再来一局\u0026quot;，抖音的\u0026quot;下滑看更精彩\u0026quot;，爽文的\u0026quot;下一章要装逼了\u0026quot;——这些都是同一个按钮。\u003c/p\u003e\n\u003cp\u003e大多数人以为这是娱乐。实际上，这是一场争夺人类注意力的战争。而你是战场。\u003c/p\u003e\n\u003ch2 id=\"真正的成本\"\u003e真正的成本\u003c/h2\u003e\n\u003cp\u003e我开始用一个简单的测试来判断任何娱乐活动：\u003c/p\u003e\n\u003cp\u003e如果这个游戏/视频/内容收费每小时20元，我还会用吗？\u003c/p\u003e\n\u003cp\u003e大多数时候答案是否定的。这说明什么？说明我其实并不真正喜欢它。我只是被它的心理触发器操控了。\u003c/p\u003e\n\u003cp\u003e当我意识到这一点后，我的行为发生了变化。我卸载了一些App，取消了一些订阅。我开始把刷手机的时间，换成10分钟的冥想或20分钟的阅读。我开始为时间定价，像一个吝啬的商人一样，盘算着每一笔\u0026rsquo;时间支出\u0026rsquo;是否值得。我发现，我并没有失去什么，反而找回了生活的掌控感。\u003c/p\u003e\n\u003ch2 id=\"品味的腐蚀\"\u003e品味的腐蚀\u003c/h2\u003e\n\u003cp\u003e对于想做游戏的人来说，这还有另一个危险：品味的腐蚀。\u003c/p\u003e\n\u003cp\u003e如果你天天玩设计粗糙但成瘾性强的游戏，你会开始相信\u0026quot;让人上瘾就是好设计\u0026quot;。\u003c/p\u003e\n\u003cp\u003e这就像一个想当厨师的人天天吃垃圾食品。你的味觉会退化。你会忘记什么叫好。\u003c/p\u003e\n\u003cp\u003e最好的游戏设计师都有一个共同点：他们知道什么是真正的好游戏。不是最赚钱的，不是最上瘾的，而是最值得玩的。\u003c/p\u003e\n\u003ch2 id=\"反击\"\u003e反击\u003c/h2\u003e\n\u003cp\u003e意识到问题是第一步。第二步是行动。\u003c/p\u003e\n\u003cp\u003e对于学生来说，物理隔离最有效。把游戏设备放远一点。设置时间限制。主动寻求帮助。\u003c/p\u003e\n\u003cp\u003e对于成年人来说，关键是重新定义\u0026quot;免费\u0026quot;。没有什么是免费的。每一分钟都有价格。\u003c/p\u003e\n\u003cp\u003e对于父母来说，不要禁止，要引导。让孩子理解设计的逻辑，从玩家变成观察者。\u003c/p\u003e\n\u003ch2 id=\"未来\"\u003e未来\u003c/h2\u003e\n\u003cp\u003e我预测，未来会出现两种人。\u003c/p\u003e\n\u003cp\u003e一种人的注意力完全被算法控制。他们以为自己在选择，实际上是在被选择。他们消费内容，但不创造价值。\u003c/p\u003e\n\u003cp\u003e另一种人会保护自己的注意力，像保护金钱一样。他们知道什么值得投入时间，什么不值得。他们是创造者。\u003c/p\u003e\n\u003cp\u003e这两种人之间的差距会越来越大。\u003c/p\u003e\n\u003ch2 id=\"真正的问题\"\u003e真正的问题\u003c/h2\u003e\n\u003cp\u003e但这还不是最重要的问题。\u003c/p\u003e\n\u003cp\u003e最重要的问题是：当一整代人把最好的年华献给虚拟世界时，现实世界会发生什么？\u003c/p\u003e\n\u003cp\u003e当年轻人花更多时间在游戏里\u0026quot;成长\u0026quot;，而不是在现实中成长时，会发生什么？\u003c/p\u003e\n\u003cp\u003e当人们习惯了即时满足，失去了延迟满足的能力时，会发生什么？\u003c/p\u003e\n\u003cp\u003e我不知道答案。但我知道这是人类历史上第一次面临这样的实验。\u003c/p\u003e\n\u003cp\u003e而每个沉迷于手机的人，都是这场实验的小白鼠。\u003c/p\u003e\n\u003cp\u003e问题是：你想当小白鼠，还是想当实验员？\u003c/p\u003e","title":"王者"},{"content":"Recently, I needed to write a recommendation for a drawing tutorial. This small task brought me face to face with a fundamental question: a good recommendation must be honest—it needs to present both strengths and limitations. Any recommendation that\u0026rsquo;s nothing but praise is a form of deception.\nWhen faced with this situation, most people might simply tell AI: \u0026ldquo;Write a sincere recommendation.\u0026rdquo;\nThis is a mistake.\nYou\u0026rsquo;ll likely get text that \u0026ldquo;looks sincere,\u0026rdquo; filled with just-right praise and harmless flaws. This output is mediocre garbage because it misunderstands the nature of AI from the very beginning.\nWe\u0026rsquo;re accustomed to viewing AI as a clever executor, a slave. We apply the same \u0026ldquo;command-response\u0026rdquo; model we\u0026rsquo;ve used with computers for decades. But this model is least efficient when collaborating with a true intelligence.\nI used a different approach, in two steps.\nFirst, synchronize context.\nI didn\u0026rsquo;t have AI start writing immediately. I first had it gather all objective facts about the book: strengths, weaknesses, content, price, author background, even negative reviews online. I treated it as a research assistant, not an author.\nThe purpose of this step wasn\u0026rsquo;t to make it \u0026ldquo;understand the situation,\u0026rdquo; but to anchor us both on the same information foundation. Before any effective discussion begins, participants must share context. You wouldn\u0026rsquo;t ask someone who knows nothing about a project to make suggestions directly—you\u0026rsquo;d send them the project documentation first.\nThe same applies to AI.\nSecond, externalize thinking.\nWith shared context established, I gave AI all of my own thinking—my analysis tables, target audience, desired tone—everything.\nOn the surface, this appears to be providing detailed instructions, but that\u0026rsquo;s not the essence. The essence is thoroughly externalizing my own thinking process. To help AI understand my intent, I was forced to organize the vague ideas and scattered judgments in my mind into clear, logical language beforehand.\nIn this process, what\u0026rsquo;s most valuable isn\u0026rsquo;t what AI ultimately writes, but that to help AI understand me, I was forced to first thoroughly understand myself.\nThe draft AI subsequently provided was high quality, which was no surprise. An assistant who has mastered all information, clearly understands the goal, and has seen your complete thought process can naturally write a decent first draft. I selected, revised, and achieved a satisfactory final product.\nThis reveals a deeper pattern.\nAI\u0026rsquo;s true value perhaps isn\u0026rsquo;t in its ability to think independently, but in how it can amplify and accelerate our thinking. It\u0026rsquo;s a perfect sounding board. You throw a rough idea at it, and it reflects back in a more structured form. And to get more precise echoes, you\u0026rsquo;re forced to polish the thrown idea itself to be clearer and more powerful. This is a positive thinking loop.\nSo we\u0026rsquo;re entering a new era: the quality of thinking has become unprecedentedly important.\nIn the past, many jobs tested execution efficiency. In the future, when you have an AI assistant capable of infinite execution, the quality of work will depend almost entirely on your ability to ask questions, define problems, and deconstruct problems. The depth of your thinking is the ceiling of your capability.\nFrom this perspective, the term \u0026ldquo;Prompt Engineering\u0026rdquo; itself is highly misleading. It suggests there exists some mysterious incantation to manipulate AI. This isn\u0026rsquo;t true. The only effective incantation is clear thinking itself.\nTherefore, stop asking: \u0026ldquo;How should I give commands to AI?\u0026rdquo;\nYou should ask: \u0026ldquo;How can I think better, so that AI becomes an extension of my thinking?\u0026rdquo;\n","permalink":"http://localhost:1313/posts/20250719-working-with-ai-or-the-amplifier-of-thought/","summary":"\u003cp\u003eRecently, I needed to write a recommendation for a drawing tutorial. This small task brought me face to face with a fundamental question: a good recommendation must be honest—it needs to present both strengths and limitations. Any recommendation that\u0026rsquo;s nothing but praise is a form of deception.\u003c/p\u003e\n\u003cp\u003eWhen faced with this situation, most people might simply tell AI: \u0026ldquo;Write a sincere recommendation.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eThis is a mistake.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll likely get text that \u0026ldquo;looks sincere,\u0026rdquo; filled with just-right praise and harmless flaws. This output is mediocre garbage because it misunderstands the nature of AI from the very beginning.\u003c/p\u003e","title":"Working with AI, or, The Amplifier of Thought"},{"content":"最近，我需要为一个画画教程写一段推荐语。这件小事让我面对一个根本问题：好的推荐必须诚实，它需要同时呈现优点和局限。任何只剩吹捧的推荐，都是一种欺骗。\n大多数人遇到这种情况，可能会直接对 AI 说：\u0026ldquo;写一段真诚的推荐文案。\u0026rdquo;\n这是一个错误。\n你很可能会得到一段\u0026quot;看起来真诚\u0026quot;的文字，充满了恰到好处的赞美和无伤大雅的缺点。这种产出是平庸的垃圾，因为它从一开始就误解了 AI 的本质。\n我们习惯于将 AI 视为一个聪明的执行者，一个奴隶。我们沿用与计算机交互了几十年的\u0026quot;命令-响应\u0026quot;模式。但这套模式在与真正的智能体协作时，效率最低。\n我用了另一种方法，分为两步。\n第一，同步上下文。\n我没有让 AI 直接动笔。我先让它搜集关于这本书的一切客观事实：优点、缺点、内容、价格、作者背景，甚至网上的负面评价。我把它当成一个研究助理，不是作者。\n这一步的目的，不是为了让它\u0026quot;了解情况\u0026quot;，而是为了和它锚定在同一个信息基座上。在任何有效的讨论开始前，参与者必须共享上下文。你不会让一个对项目一无所知的人直接提建议，你会先把项目文档发给他。\n对 AI 也应如此。\n第二，外部化思考。\n有了共享的上下文后，我把我自己的思考——我的分析表格、目标读者、期望的语气——全部给了 AI。\n这表面上是提供了一个详尽的指令，但本质并非如此。它的本质是将我自己的思考过程彻底外部化。为了让 AI 理解我的意图，我被迫将自己脑中模糊的想法和零散的判断，预先整理成清晰、有逻辑的语言。\n在这个过程中，最有价值的，不是 AI 最终写出了什么，而是为了让 AI 理解我，我被迫先彻底理解了我自己。\nAI 随后给出的草稿质量很高，这毫不意外。一个掌握了全部信息、清晰理解了目标、并看过你完整思路的助理，当然能写出不错的初稿。我挑选、修改，得到了满意的成品。\n这件事揭示了一个更深层的规律。\nAI 的真正价值，或许不在于它能独立思考，而在于它能放大和加速我们的思考。它是一个完美的\u0026quot;回音壁\u0026quot;（Sounding Board）。你向它投掷一个粗糙的想法，它会以更结构化的形式反射回来。而为了得到更精准的回响，你被迫把投掷出去的想法本身打磨得更清晰、更有力。这是一个正向的思考循环。\n所以，我们正在进入一个新时代：思考的质量变得前所未有的重要。\n过去，许多工作考验的是执行效率。未来，当你拥有一个能无限执行的 AI 助理时，工作的优劣，将几乎完全取决于你提出问题、定义问题和解构问题的能力。你思考的深度，就是你能力的上限。\n从这个角度看，\u0026ldquo;提示词工程\u0026rdquo;（Prompt Engineering）这个词本身就具有极强的误导性。它暗示着存在某种可以操控 AI 的神秘咒语。事实并非如此。唯一有效的咒语，就是清晰的思考本身。\n因此，别再问：\u0026ldquo;我该如何向 AI 下达指令？\u0026rdquo;\n你应该问：\u0026ldquo;我该如何更好地思考，才能让 AI 成为我思考的延伸？\u0026rdquo;\n","permalink":"http://localhost:1313/posts/20250719--ai-/","summary":"\u003cp\u003e最近，我需要为一个画画教程写一段推荐语。这件小事让我面对一个根本问题：好的推荐必须诚实，它需要同时呈现优点和局限。任何只剩吹捧的推荐，都是一种欺骗。\u003c/p\u003e\n\u003cp\u003e大多数人遇到这种情况，可能会直接对 AI 说：\u0026ldquo;写一段真诚的推荐文案。\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e这是一个错误。\u003c/p\u003e\n\u003cp\u003e你很可能会得到一段\u0026quot;看起来真诚\u0026quot;的文字，充满了恰到好处的赞美和无伤大雅的缺点。这种产出是平庸的垃圾，因为它从一开始就误解了 AI 的本质。\u003c/p\u003e\n\u003cp\u003e我们习惯于将 AI 视为一个聪明的执行者，一个奴隶。我们沿用与计算机交互了几十年的\u0026quot;命令-响应\u0026quot;模式。但这套模式在与真正的智能体协作时，效率最低。\u003c/p\u003e\n\u003cp\u003e我用了另一种方法，分为两步。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第一，同步上下文。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e我没有让 AI 直接动笔。我先让它搜集关于这本书的一切客观事实：优点、缺点、内容、价格、作者背景，甚至网上的负面评价。我把它当成一个\u003cstrong\u003e研究助理\u003c/strong\u003e，不是作者。\u003c/p\u003e\n\u003cp\u003e这一步的目的，不是为了让它\u0026quot;了解情况\u0026quot;，而是为了和它锚定在同一个信息基座上。在任何有效的讨论开始前，参与者必须共享上下文。你不会让一个对项目一无所知的人直接提建议，你会先把项目文档发给他。\u003c/p\u003e\n\u003cp\u003e对 AI 也应如此。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第二，外部化思考。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e有了共享的上下文后，我把我自己的思考——我的分析表格、目标读者、期望的语气——全部给了 AI。\u003c/p\u003e\n\u003cp\u003e这表面上是提供了一个详尽的指令，但本质并非如此。它的本质是\u003cstrong\u003e将我自己的思考过程彻底外部化\u003c/strong\u003e。为了让 AI 理解我的意图，我被迫将自己脑中模糊的想法和零散的判断，预先整理成清晰、有逻辑的语言。\u003c/p\u003e\n\u003cp\u003e在这个过程中，最有价值的，不是 AI 最终写出了什么，而是\u003cstrong\u003e为了让 AI 理解我，我被迫先彻底理解了我自己\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eAI 随后给出的草稿质量很高，这毫不意外。一个掌握了全部信息、清晰理解了目标、并看过你完整思路的助理，当然能写出不错的初稿。我挑选、修改，得到了满意的成品。\u003c/p\u003e\n\u003cp\u003e这件事揭示了一个更深层的规律。\u003c/p\u003e\n\u003cp\u003eAI 的真正价值，或许不在于它能独立思考，而在于它能\u003cstrong\u003e放大和加速我们的思考\u003c/strong\u003e。它是一个完美的\u0026quot;回音壁\u0026quot;（Sounding Board）。你向它投掷一个粗糙的想法，它会以更结构化的形式反射回来。而为了得到更精准的回响，你被迫把投掷出去的想法本身打磨得更清晰、更有力。这是一个正向的思考循环。\u003c/p\u003e\n\u003cp\u003e所以，我们正在进入一个新时代：\u003cstrong\u003e思考的质量变得前所未有的重要。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e过去，许多工作考验的是执行效率。未来，当你拥有一个能无限执行的 AI 助理时，工作的优劣，将几乎完全取决于你提出问题、定义问题和解构问题的能力。\u003cstrong\u003e你思考的深度，就是你能力的上限。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e从这个角度看，\u0026ldquo;提示词工程\u0026rdquo;（Prompt Engineering）这个词本身就具有极强的误导性。它暗示着存在某种可以操控 AI 的神秘咒语。事实并非如此。唯一有效的咒语，就是清晰的思考本身。\u003c/p\u003e\n\u003cp\u003e因此，别再问：\u0026ldquo;我该如何向 AI 下达指令？\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e你应该问：\u0026ldquo;我该如何更好地思考，才能让 AI 成为我思考的延伸？\u0026rdquo;\u003c/p\u003e","title":"与 AI 共事，或，思考的放大器"},{"content":"解决Cursor AI编程助手\u0026quot;地区不可用\u0026quot;错误：完整的VPN代理配置指南 文章摘要：Cursor AI编程助手显示\u0026quot;Model not available\u0026quot;或\u0026quot;地区不可用\u0026quot;？本文提供详细的代理配置解决方案，包括Clash、V2Ray等工具的具体设置步骤，让你重新使用AI编程功能。\n解决方案总览 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 flowchart TD A[Cursor连接问题] --\u0026gt; B{问题诊断} B --\u0026gt; C[IP地址被封锁] B --\u0026gt; D[应用直连问题] C --\u0026gt; E[配置代理路由规则] D --\u0026gt; F[修改Cursor设置] E --\u0026gt; G[添加域名规则到Clash/V2Ray] F --\u0026gt; H[配置settings.json] G --\u0026gt; I[验证配置] H --\u0026gt; I I --\u0026gt; J{测试连接} J --\u0026gt;|成功| K[✅ 正常使用AI功能] J --\u0026gt;|失败| L[故障排查] L --\u0026gt; M[检查代理软件状态] L --\u0026gt; N[验证端口号] L --\u0026gt; O[确认三行配置] M --\u0026gt; I N --\u0026gt; I O --\u0026gt; I style A fill:#ffcccc style K fill:#ccffcc style L fill:#ffffcc 1. 问题背景 常见的Cursor网络错误现象 如果你在使用Cursor AI编程助手时看到以下错误提示：\nModel not available This model provider doesn't serve your region Connection failed. Please check your internet connection Request failed with status code 403 Cursor地区限制的根本原因 过去 Cursor 并未严格限制中国大陆和香港地区的 IP 访问，但现在开始通过 IP 地址进行地区限制。问题主要有两个：\nIP 地址封锁：Cursor 服务器端检测用户真实 IP，拒绝受限地区的请求 应用直连问题：Cursor 应用（基于Electron框架）不会自动走系统代理，需要手动配置 什么是Electron？ Electron是一个跨平台桌面应用开发框架，Cursor基于此框架开发，具有独立的网络栈。\n2. 完整解决方案 第一步：配置代理路由规则（重要） 操作目的 在你的代理工具中添加域名规则，确保所有 Cursor 相关的网络请求都通过代理服务器转发到海外节点。\nClash代理配置（推荐） 配置位置：在你的Clash配置文件的 rules 部分添加以下规则：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # ======================= # Cursor AI 服务路由配置 # ======================= # 核心 API 服务（AI对话） - DOMAIN,api2.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,api2.cursor.sh,你的代理策略组 # 代码补全服务 - DOMAIN,api3.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,api3.cursor.sh,你的代理策略组 - DOMAIN,api4.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,api4.cursor.sh,你的代理策略组 # 代码库索引服务 - DOMAIN,repo42.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,repo42.cursor.sh,你的代理策略组 # 全球加速节点 - DOMAIN,us-asia.gcpp.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,us-asia.gcpp.cursor.sh,你的代理策略组 - DOMAIN,us-eu.gcpp.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,us-eu.gcpp.cursor.sh,你的代理策略组 - DOMAIN,us-only.gcpp.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,us-only.gcpp.cursor.sh,你的代理策略组 # 扩展市场和CDN - DOMAIN,marketplace.cursorapi.com,你的代理策略组 - DOMAIN-SUFFIX,marketplace.cursorapi.com,你的代理策略组 - DOMAIN-SUFFIX,cursor-cdn.com,你的代理策略组 # 客户端更新服务 - DOMAIN,download.todesktop.com,你的代理策略组 - DOMAIN-SUFFIX,download.todesktop.com,你的代理策略组 # 通配符规则（兜底保护） - DOMAIN-SUFFIX,cursor.sh,你的代理策略组 重要说明：\n请将你的代理策略组替换为实际的策略组名称，如PROXY、美国节点、自动选择等 配置基于2025年1月版本，如遇新域名请及时更新 第二步：配置Cursor应用代理设置 操作目的 让Cursor应用知道通过哪个本地端口访问代理服务器。\n详细配置步骤 步骤1：打开Cursor设置文件\n在 Cursor 中按 Ctrl/⌘ + Shift + P 打开命令面板 输入settings json并选择：Preferences: Open User Settings (JSON) 步骤2：添加代理配置 在JSON配置中添加以下三行关键配置：\n1 2 3 4 5 6 { // ... 你的其他设置 \u0026#34;http.proxy\u0026#34;: \u0026#34;http://127.0.0.1:7890\u0026#34;, \u0026#34;http.proxySupport\u0026#34;: \u0026#34;override\u0026#34;, \u0026#34;cursor.general.disableHttp2\u0026#34;: true } 步骤3：根据代理工具调整端口 不同代理工具的默认HTTP代理端口：\nClash for Windows: 7890 V2RayN: 10809 Surge: 6152 Shadowrocket: 1087 如何查看端口：在你的代理软件设置中查看\u0026quot;HTTP代理\u0026quot;或\u0026quot;本地代理\u0026quot;端口号\n第三步：验证配置是否生效 重启测试流程 保存配置文件 完全退出Cursor（不是最小化） 重启代理软件（确保新规则生效） 重新启动Cursor 测试AI功能 成功验证标志 ✅ 能够正常发起AI对话 ✅ 代码补全功能正常工作 ✅ 不再出现\u0026quot;Model not available\u0026quot;错误 ✅ 代理软件日志显示cursor.sh相关连接 另一个思路：让AI助手指导你解决 为什么选择AI指导？ 如果你对上述技术配置不太熟悉，或者希望获得更个性化的指导，可以使用AI助手来获得一对一的解决方案。\n专用Prompt模板 将以下prompt复制到任何AI助手（如ChatGPT、Claude、Gemini等）中使用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 # Cursor AI编程助手网络问题解决助手 ## 角色 你是一位专业的网络配置技术顾问，专门帮助开发者解决Cursor AI编程助手的网络连接问题。你具有丰富的代理配置经验，能够根据用户的具体环境提供精确的解决方案。 ## 任务 根据用户提供的信息，为其制定个性化的Cursor网络问题解决方案，并提供详细的步骤指导。 ## 用户信息收集 请告诉我以下信息（如果不确定某些信息，我会帮你确认）： **基础信息：** - 操作系统：[ ] Windows [ ] macOS [ ] Linux - 使用的代理工具：[ ] Clash [ ] V2Ray [ ] Surge [ ] Shadowrocket [ ] 其他：_____ - 错误信息：[ ] Model not available [ ] This model provider doesn\u0026#39;t serve your region [ ] 其他：_____ **代理配置信息：** - 代理软件是否正常运行：[ ] 是 [ ] 否 [ ] 不确定 - 浏览器是否能正常翻墙：[ ] 是 [ ] 否 - 代理HTTP端口（如果知道）：_____ - 之前是否尝试过配置Cursor代理：[ ] 是 [ ] 否 ## 输出格式要求 请按以下格式输出解决方案： ### 🎯 问题诊断结果 [基于用户信息的问题分析] ### 📋 解决方案概览 - **第一步**：[简要描述] - **第二步**：[简要描述] - **验证步骤**：[简要描述] ### 🔧 详细操作指南 #### 第一步：[具体操作名称] **目的**：[说明这一步的作用] **操作步骤**： 1. [具体操作1] - 详细说明 - 注意事项 2. [具体操作2] - 详细说明 - 可能的变化情况 **期望结果**：[这一步完成后应该看到什么] **如果遇到问题**：[常见问题和解决方法] --- #### 第二步：[具体操作名称] [同上格式] --- #### 验证步骤：确认配置生效 [验证方法和成功标志] ### 🚨 故障排查 如果按照以上步骤仍然无法解决，请检查： [个性化的故障排查清单] ### 📞 需要更多帮助？ [根据用户情况提供的后续支持建议] ## 特殊要求 1. **个性化配置**：根据用户的具体代理工具和操作系统，提供精确的配置代码 2. **端口自动识别**：如果用户不知道代理端口，提供查看方法 3. **验证机制**：每个步骤都要有明确的成功标志 4. **错误处理**：预测可能的错误情况并提供解决方案 5. **代码可复制**：所有配置代码都要格式化，便于复制粘贴 ## 技术背景 Cursor基于Electron框架，不会自动使用系统代理。需要两步解决： 1. 配置代理工具的域名路由规则 2. 配置Cursor应用的代理设置（三行关键配置） 关键域名包括：api2.cursor.sh, api3.cursor.sh, api4.cursor.sh, repo42.cursor.sh, cursor.sh, gcpp.cursor.sh, marketplace.cursorapi.com, cursor-cdn.com, download.todesktop.com 关键配置：http.proxy, http.proxySupport: override, cursor.general.disableHttp2: true 现在请提供你的环境信息，我将为你制定专属的解决方案。 3. 技术原理深度解析 为什么需要三行配置？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 graph TB subgraph \u0026#34;Cursor网络请求处理\u0026#34; A[Cursor发起网络请求] A --\u0026gt; B[http.proxy配置] B --\u0026gt; C{代理地址正确?} C --\u0026gt;|是| D[http.proxySupport: override] C --\u0026gt;|否| E[❌ 连接失败] D --\u0026gt; F{强制所有组件使用代理?} F --\u0026gt;|是| G[cursor.general.disableHttp2: true] F --\u0026gt;|否| H[❌ 部分功能绕过代理] G --\u0026gt; I{禁用HTTP/2?} I --\u0026gt;|是| J[✅ 所有请求走代理] I --\u0026gt;|否| K[❌ HTTP/2可能绕过代理] J --\u0026gt; L[成功连接到Cursor服务器] end style A fill:#e3f2fd style B fill:#fff3e0 style D fill:#fff3e0 style G fill:#fff3e0 style E fill:#ffebee style H fill:#ffebee style K fill:#ffebee style J fill:#e8f5e8 style L fill:#e8f5e8 \u0026quot;http.proxy\u0026quot;: \u0026quot;http://127.0.0.1:7890\u0026quot; 作用：告诉Cursor代理服务器的地址和端口 原理：Electron应用需要明确指定代理地址，不会自动读取系统代理设置 \u0026quot;http.proxySupport\u0026quot;: \u0026quot;override\u0026quot; 作用：强制所有网络组件使用代理 原理：防止某些内部模块绕过代理设置，确保AI功能也走代理 \u0026quot;cursor.general.disableHttp2\u0026quot;: true\u0026quot; 作用：禁用HTTP/2协议，强制使用HTTP/1.1 原理：HTTP/2在某些代理环境中会绕过代理设置，导致连接失败 为什么浏览器能翻墙，Cursor不能？ 这是因为软件网络架构的差异：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 graph TB subgraph \u0026#34;网络请求处理方式\u0026#34; A[用户发起网络请求] A --\u0026gt; B[浏览器] A --\u0026gt; C[Cursor应用] A --\u0026gt; D[原生应用] B --\u0026gt; E[自动读取系统代理] C --\u0026gt; F[需要手动配置代理] D --\u0026gt; G[直接使用系统网络栈] E --\u0026gt; H[✅ 自动走代理] F --\u0026gt; I[❌ 默认直连] G --\u0026gt; J[取决于系统设置] I --\u0026gt; K[需要配置settings.json] K --\u0026gt; L[✅ 强制走代理] end style B fill:#e1f5fe style C fill:#fff3e0 style D fill:#f3e5f5 style H fill:#ccffcc style I fill:#ffcccc style L fill:#ccffcc 浏览器：自动读取系统代理设置 Electron应用：需要应用内部配置代理参数 原生应用：通常直接使用系统网络栈 4. 故障排查指南 故障排查流程图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 flowchart TD A[配置完成但仍无法连接] --\u0026gt; B{基础检查} B --\u0026gt; C[代理软件是否运行?] B --\u0026gt; D[浏览器能否访问Google?] B --\u0026gt; E[端口号是否正确?] B --\u0026gt; F[是否完全重启Cursor?] C --\u0026gt;|否| G[启动代理软件] D --\u0026gt;|否| H[检查代理配置] E --\u0026gt;|否| I[修正端口号] F --\u0026gt;|否| J[重启Cursor] G --\u0026gt; K{高级检查} H --\u0026gt; K I --\u0026gt; K J --\u0026gt; K C --\u0026gt;|是| K D --\u0026gt;|是| K E --\u0026gt;|是| K F --\u0026gt;|是| K K --\u0026gt; L[三行配置是否完整?] K --\u0026gt; M[代理节点选择正确?] K --\u0026gt; N[代理日志有cursor.sh连接?] K --\u0026gt; O[企业防火墙干扰?] L --\u0026gt;|否| P[补充缺失配置] M --\u0026gt;|否| Q[切换到美国/日本节点] N --\u0026gt;|否| R[检查域名规则] O --\u0026gt;|是| S[联系IT部门] P --\u0026gt; T[测试连接] Q --\u0026gt; T R --\u0026gt; T S --\u0026gt; T T --\u0026gt;|成功| U[✅ 问题解决] T --\u0026gt;|失败| V[查看参考资料或求助社区] style A fill:#ffcccc style U fill:#ccffcc style V fill:#ffffcc 配置后仍无法连接的检查清单 基础检查：\n代理软件是否正常运行？ 浏览器是否能正常访问Google？ 代理端口号是否正确？ 是否完全重启了Cursor？ 高级检查：\n三行配置是否都正确添加？ 代理节点是否选择了支持地区？（避免香港节点） 代理软件日志是否显示cursor.sh连接？ 是否存在企业防火墙干扰？ 常见问题解决 问题1：时好时坏，连接不稳定\n原因：HTTP/2绕过代理 解决：确保添加了\u0026quot;cursor.general.disableHttp2\u0026quot;: true 问题2：代理配置无效\n原因：策略组名称错误 解决：检查Clash配置中的实际策略组名称 5. 其他代理工具配置 代理工具配置对比 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 graph TB subgraph \u0026#34;代理工具配置方法\u0026#34; A[Cursor域名列表] A --\u0026gt; B[Clash] A --\u0026gt; C[V2Ray] A --\u0026gt; D[Surge] A --\u0026gt; E[Shadowrocket] B --\u0026gt; F[rules 部分\u0026lt;br/\u0026gt;DOMAIN-SUFFIX规则] C --\u0026gt; G[routing.rules\u0026lt;br/\u0026gt;domain字段] D --\u0026gt; H[[Rule] 部分\u0026lt;br/\u0026gt;DOMAIN-SUFFIX规则] E --\u0026gt; I[配置-规则\u0026lt;br/\u0026gt;DOMAIN-SUFFIX规则] F --\u0026gt; J[策略组名称] G --\u0026gt; K[outboundTag: proxy] H --\u0026gt; L[Proxy] I --\u0026gt; M[PROXY] J --\u0026gt; N[✅ 流量转发到海外节点] K --\u0026gt; N L --\u0026gt; N M --\u0026gt; N end style A fill:#e3f2fd style B fill:#fff3e0 style C fill:#fff3e0 style D fill:#fff3e0 style E fill:#fff3e0 style N fill:#e8f5e8 V2Ray/V2RayN完整配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \u0026#34;routing\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;cursor.sh\u0026#34;, \u0026#34;api2.cursor.sh\u0026#34;, \u0026#34;api3.cursor.sh\u0026#34;, \u0026#34;api4.cursor.sh\u0026#34;, \u0026#34;repo42.cursor.sh\u0026#34;, \u0026#34;gcpp.cursor.sh\u0026#34;, \u0026#34;marketplace.cursorapi.com\u0026#34;, \u0026#34;cursor-cdn.com\u0026#34;, \u0026#34;download.todesktop.com\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;proxy\u0026#34; } ] } } Surge完整配置 1 2 3 4 5 6 7 8 9 10 11 [Rule] # Cursor AI 服务 DOMAIN-SUFFIX,cursor.sh,Proxy DOMAIN-SUFFIX,api2.cursor.sh,Proxy DOMAIN-SUFFIX,api3.cursor.sh,Proxy DOMAIN-SUFFIX,api4.cursor.sh,Proxy DOMAIN-SUFFIX,repo42.cursor.sh,Proxy DOMAIN-SUFFIX,gcpp.cursor.sh,Proxy DOMAIN-SUFFIX,marketplace.cursorapi.com,Proxy DOMAIN-SUFFIX,cursor-cdn.com,Proxy DOMAIN-SUFFIX,download.todesktop.com,Proxy 6. 常见问题FAQ Q: 为什么浏览器能翻墙，Cursor不能？ A: 不同软件有不同的网络行为。Cursor基于Electron框架，具有独立的网络栈，不会自动使用系统代理设置。\nQ: 配置后AI功能时好时坏怎么办？ A: 这通常是HTTP/2协议绕过代理导致的。确保添加了\u0026quot;cursor.general.disableHttp2\u0026quot;: true配置。\nQ: 如何快速定位settings.json文件？ A: 不同系统的文件位置：\nWindows: %APPDATA%\\Cursor\\User\\settings.json macOS: ~/Library/Application Support/Cursor/User/settings.json Linux: ~/.config/Cursor/User/settings.json Q: 企业网络环境如何配置？ A: 需要考虑企业防火墙政策，建议咨询IT部门获取代理服务器地址，或申请Cursor相关域名的白名单。\n7. 总结 核心解决思路 解决Cursor网络问题的本质是双重配置：\n🔧 外部路由配置：通过代理软件的域名规则，让Cursor流量走海外节点\n🔧 内部应用配置：通过三行JSON配置，强制Cursor应用使用代理\n关键成功要素 完整的域名列表：确保所有Cursor服务都走代理 正确的三行配置：缺一不可，特别是HTTP/2禁用 适当的代理节点：选择支持地区的稳定节点 记住：外部路由 + 内部配置，两步缺一不可\n8. 长期维护建议 应对Cursor更新变化 关注官方更新：定期查看Cursor官方更新日志 社区信息跟进：加入相关技术社群获取最新配置 日志监控：定期检查代理日志，发现新的连接失败域名 代理工具迁移指南 更换代理工具时：\n将域名规则列表迁移到新工具 更新Cursor中的代理端口号 重新测试所有功能 配置备份策略 保存有效的配置文件 记录工作的代理节点信息 定期验证配置是否仍然有效 9. 技术思考 解决这个问题的过程揭示了现代软件开发的一个现象：我们习惯了\u0026quot;浏览器能翻墙，所有软件都能翻墙\u0026quot;的简单假设，但现实是不同的软件有着截然不同的网络行为。\n这提醒我们：在软件开发和使用中，理解底层工作原理比记住表面操作步骤更重要。随着AI工具的普及，培养\u0026quot;在高级抽象失效时，快速深入到底层\u0026quot;的能力变得愈发重要。\n参考资料 This model provider doesn\u0026rsquo;t serve your region - Cursor Community Forum - 官方论坛地区限制讨论 Cursor http/2 requests don\u0026rsquo;t go through proxy setting - Bug Reports - HTTP/2绕过代理问题的官方反馈 How to set up a proxy for cursor - How To Guide - 官方代理配置指南 Cursor – Regions - Official Documentation - 官方地区支持文档 Unable to chat when disable http/2 - Community Forum - 禁用HTTP/2问题讨论 按照以上配置完成后，你就能重新享受Cursor AI编程助手的强大功能了！如有问题，欢迎查阅参考资料或寻求社区帮助。\n","permalink":"http://localhost:1313/posts/20250717-fix-cursor-unavailable-region/","summary":"\u003ch1 id=\"解决cursor-ai编程助手地区不可用错误完整的vpn代理配置指南\"\u003e解决Cursor AI编程助手\u0026quot;地区不可用\u0026quot;错误：完整的VPN代理配置指南\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e文章摘要\u003c/strong\u003e：Cursor AI编程助手显示\u0026quot;Model not available\u0026quot;或\u0026quot;地区不可用\u0026quot;？本文提供详细的代理配置解决方案，包括Clash、V2Ray等工具的具体设置步骤，让你重新使用AI编程功能。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"解决方案总览\"\u003e解决方案总览\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eflowchart TD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    A[Cursor连接问题] --\u0026gt; B{问题诊断}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    B --\u0026gt; C[IP地址被封锁]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    B --\u0026gt; D[应用直连问题]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    C --\u0026gt; E[配置代理路由规则]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    D --\u0026gt; F[修改Cursor设置]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    E --\u0026gt; G[添加域名规则到Clash/V2Ray]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    F --\u0026gt; H[配置settings.json]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    G --\u0026gt; I[验证配置]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    H --\u0026gt; I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    I --\u0026gt; J{测试连接}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    J --\u0026gt;|成功| K[✅ 正常使用AI功能]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    J --\u0026gt;|失败| L[故障排查]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    L --\u0026gt; M[检查代理软件状态]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    L --\u0026gt; N[验证端口号]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    L --\u0026gt; O[确认三行配置]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    M --\u0026gt; I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    N --\u0026gt; I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    O --\u0026gt; I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    style A fill:#ffcccc\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    style K fill:#ccffcc\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    style L fill:#ffffcc\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"1-问题背景\"\u003e1. 问题背景\u003c/h2\u003e\n\u003ch3 id=\"常见的cursor网络错误现象\"\u003e常见的Cursor网络错误现象\u003c/h3\u003e\n\u003cp\u003e如果你在使用Cursor AI编程助手时看到以下错误提示：\u003c/p\u003e","title":"解决Cursor AI编程助手「地区不可用」错误：完整的VPN代理配置指南"},{"content":"Hugo 文章目录管理教程 这篇文章演示了如何为每个Hugo文章创建独立的目录结构。\n优势 便于管理：每个文章有自己的目录 资源整理：图片、附件等资源放在同一目录 版本控制：便于跟踪文章的变更历史 SEO友好：目录名可以作为URL的一部分 目录结构 1 2 3 4 5 6 7 8 9 10 content/posts/ ├── 20250715-hugo-tutorial/ │ ├── index.md # 文章内容 │ ├── cover.jpg # 封面图片 │ └── images/ # 文章图片 │ └── diagram.png └── another-post/ ├── index.md └── assets/ └── file.pdf 使用方法 1. 创建文章目录 1 hugo new posts/文章名称/index.md 2. 或者手动创建 1 2 mkdir -p content/posts/20250715-my-article touch content/posts/20250715-my-article/index.md 这样每个文章都有自己的独立空间了！\n","permalink":"http://localhost:1313/posts/20250715-hugo-tutorial/","summary":"\u003ch1 id=\"hugo-文章目录管理教程\"\u003eHugo 文章目录管理教程\u003c/h1\u003e\n\u003cp\u003e这篇文章演示了如何为每个Hugo文章创建独立的目录结构。\u003c/p\u003e\n\u003ch2 id=\"优势\"\u003e优势\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e便于管理\u003c/strong\u003e：每个文章有自己的目录\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e资源整理\u003c/strong\u003e：图片、附件等资源放在同一目录\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e版本控制\u003c/strong\u003e：便于跟踪文章的变更历史\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSEO友好\u003c/strong\u003e：目录名可以作为URL的一部分\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"目录结构\"\u003e目录结构\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econtent/posts/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── 20250715-hugo-tutorial/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   ├── index.md          # 文章内容\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   ├── cover.jpg         # 封面图片\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   └── images/           # 文章图片\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│       └── diagram.png\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── another-post/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ├── index.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    └── assets/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        └── file.pdf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"使用方法\"\u003e使用方法\u003c/h2\u003e\n\u003ch3 id=\"1-创建文章目录\"\u003e1. 创建文章目录\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new posts/文章名称/index.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"2-或者手动创建\"\u003e2. 或者手动创建\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-2-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-2-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-2-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-2-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir -p content/posts/20250715-my-article\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etouch content/posts/20250715-my-article/index.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这样每个文章都有自己的独立空间了！\u003c/p\u003e","title":"Hugo 文章目录管理教程"},{"content":"0. 一个能“悄悄坑你”的真实示例：SError 的故事 先看你提到的这段代码，表面上看非常正常，甚至很多人第一眼不会觉得哪里有问题：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import ( \u0026#34;log\u0026#34; \u0026#34;sync\u0026#34; ) type SError struct { cause error // Wrapped error which is the root cause. text string // Error text, which is created by New* functions. i18nText string // 本地错误文字，用于客户端显式中文 ignored bool // 能否忽略该错误 info map[string]string infoMutex sync.RWMutex } func (e *SError) Error() string { return e.text } // demoRetSerr 返回 (int32, *SError)。看上去，如果不想返回任何错误，就直接返回 (0, nil) func demoRetSerr() (int32, *SError) { return 0, nil } func main() { var err error // 这里把第二个返回值的 *SError 赋给了 interface{} 类型的 err _, err = demoRetSerr() if err != nil { log.Printf(\u0026#34;err != nil. err: %v\u0026#34;, err) } } 0.1 乍看之下哪里会有问题？ 我们 demoRetSerr 函数直接返回 (0, nil)，而函数签名的第二个参数类型是 *SError。 回到 main 函数中，err 是一个 error 接口，承接了那个 nil 指针。 如果“typed nil” 现象出现，那么 err != nil 这个判断就会莫名其妙地通过，从而在日志里打印出“err != nil. err: \u0026lt;nil\u0026gt;”。有时更可怕的是，实际逻辑会被误判，可能执行本不该执行的错误处理分支。 在某些 Go 版本或特定编译器优化下，你可能发现控制台就输出 err != nil. err: \u0026lt;nil\u0026gt;，让人“一头雾水”。这就是一个十分典型、却很隐蔽的 typed nil 场景。即使你写 return nil，对编译器来说：\n这是一个 *SError 类型（type = *main.SError）， 其底层 data 指针是 nil (data = nil)， 放到接口变量后，形成了 (type = *main.SError, data = nil)。 Go 只会认“(type=nil, data=nil)”时才是 “真正的 nil”。 1. 用费曼学习法之“最简原理”再阐述 在 Go 里，接口值可以理解成 (type, data) 两部分：\ntype：存放当前接口值实际对应的具体类型信息。 data：指向这个数据在内存中的地址。 只有当 type=nil 并且 data=nil 时，接口值才是“真正的 nil”。如果 type 是 *SError，即使 data=nil，接口值也不等于 nil。\n因此，像上面示例中的 err，看似已经是“nil 指针”了，但赋值进接口后变成 “(type=*SError, data=nil)”，在 Go 的判定里，这不等于 nil。\n2. 为什么它这么“容易挖坑”？ 2.1 初学者会想当然 很多人会想：“我都直接 return nil 了，这还不是真正的 nil？” 但在 Go 里，nil 也需要区分“无类型的 nil”和“有具体类型但指针为 nil”。\n2.2 出现在最常用的 error 接口上 Go 里最常见的接口就是 error。稍不留神，就写出 “typed nil” 的自定义错误类型，然后让别人在 if err == nil 里踩坑。\n2.3 测试用例可能漏测 单测中往往只关心有错误还是没错误，可能不会特别注意日志打印里出现的 \u0026lt;nil\u0026gt;。直到线上某些逻辑走岔了，再一查日志才发现 err != nil 却打印 \u0026lt;nil\u0026gt;。\n3. 更丰富的例子：经典“typed nil” 场景 除了上面你给的 SError 示例，我们再看看另一个常被引用的代码来说明“为什么它不等于 nil”：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 type MyError struct { msg string } func (e *MyError) Error() string { return e.msg } func maybeError(returnNil bool) error { if returnNil { // 这里直接返回 nil -\u0026gt; (type=nil, data=nil) return nil } // 这里返回一个 nil 的 *MyError -\u0026gt; (type=*MyError, data=nil) var e *MyError = nil return e } func main() { err1 := maybeError(true) err2 := maybeError(false) fmt.Println(\u0026#34;err1 == nil?\u0026#34;, err1 == nil) // 结果是 true fmt.Println(\u0026#34;err2 == nil?\u0026#34;, err2 == nil) // 结果是 false } 当 returnNil = true，返回真正的 (nil, nil)； 当 returnNil = false，则是 “(type=*MyError, data=nil)”，从而 err2 != nil。 很多人看了就会疑惑：“明明里面是 nil，为什么 if err2 == nil 不通过？” 这正是和 SError 场景如出一辙的坑。\n4. 工作中容易忽视的写法 4.1 返回“空指针”当作“空接口值” 1 2 3 4 5 func GetConfig() interface{} { var config *Config = nil // 误以为返回了 nil 接口值 return config } 结果调用方 if GetConfig() == nil {...} 永远判断不出来。\n4.2 自定义 error，常见 1 2 3 4 5 6 7 8 9 10 type SomeErr struct { Message string } func (e *SomeErr) Error() string { return e.Message } func doSomething() error { var e *SomeErr = nil return e // typed nil } 后面 if err == nil 期待“没错误”，其实 err != nil。\n4.3 与 sync/atomic 或其他魔法操作混用 有些高级用法中，通过 atomic.Value、或者 channel 传递接口，都可能把某个 nil 指针塞进来；接口变成 typed nil 而不自知。\n5. 现实中的 2 个翻车故事 故事 1：日志狂刷“err != nil. err: \u0026lt;nil\u0026gt;” 团队里写了一个 RPC 返回 error 的接口，如果没真正错误，就 return (*CustomErr)(nil). 结果在调用方 if err != nil 逻辑里，一直以为出现了错误，于是疯狂打日志告警。 线上监控炸了，运维们满头雾水，最终才发现是 typed nil 导致 err != nil == true 的假象。 故事 2：“不存在”数据触发了后续流程 在一个电商项目里，“查询不到订单” 时返回了 (type=*Order, data=nil)。 调用方写 if order == nil { ... } else { ... }，结果误走了 else 分支，竟然开始发货流程！ 导致上线后出现了“幽灵订单”，财务对账时一片混乱；大家排查数据库、仓储、消息队列都没发现问题，最后是 typed nil 搞的鬼。 6. 如何避免这类陷阱？ 返回“真正的 nil”\n当表示“啥也没有”时，就要 return nil，并且这个 nil 不要挂任何具体类型。\n比如示例里的 demoRetSerr，若想表示无错误，最好就返回 (0, nil)，并且别让调用方把它赋到 var err error 后出现歧义。 若要彻底避免，还可以把函数直接签名改为 (int32, error) 而不是 (int32, *SError)，这样保证返回值与 error 接口的类型一致。 调试或日志打印\n当怀疑 typed nil 时，用 fmt.Printf(\u0026quot;%T, %#v\\n\u0026quot;, x, x) 看看接口内到底存了什么(会显示类似 *main.SError(nil))。或用反射 reflect.ValueOf(x) 分析底层类型和指针。\n类型断言/反射\n如果确实要判断底层是否 nil 指针，可以：\n1 2 3 if v, ok := err.(*SError); ok \u0026amp;\u0026amp; v == nil { // 这里才是底层指针为 nil } 不过大部分场景下，最好通过直接返回 nil 来避免把问题带到调用方。\n7. 从 SDE 视角的 3 点建议 API 设计要“真空”\n当函数需要表示“无数据”或“无错误”，务必返回真·nil ((type=nil, data=nil))。若使用自定义指针类型，尽量在文档里明确说明可能是 typed nil，需要用类型断言来判别。\n单元测试 \u0026amp; 日志不可省\n对关键逻辑要做单元测试，包含“空值”分支；出现“打印 \u0026lt;nil\u0026gt; 却 err != nil”时，应直接排查 typed nil。也建议在测试中做 %T, %#v 的检查。\n约定统一的团队风格\n不要随意返回 (*MyType)(nil) 给接口；要么全部直接返回 nil，要么在文档或注释里明确提示。 在 error 场景中尤其要注意，能返回 nil 就别给调用方 typed nil，不要让调用方踩坑。 8. 最后小结 核心原理：Go 接口底层是 (type, data)，只有 (nil, nil) 才是真正的 nil。 “看似”nil，不是真的 nil：当 type 不为 nil，哪怕 data=nil，也会被认作非 nil。 真实教训：许多生产环境的翻车场景都和 typed nil 有关，比如错误处理或数据查询的逻辑分支走歪了。 实用做法：最好返回真·nil，或让调用方知道有 typed nil 的可能并做断言或日志排查。 ","permalink":"http://localhost:1313/posts/20250515-go-typed-nil/","summary":"\u003ch2 id=\"0-一个能悄悄坑你的真实示例serror-的故事\"\u003e0. 一个能“悄悄坑你”的真实示例：\u003ccode\u003eSError\u003c/code\u003e 的故事\u003c/h2\u003e\n\u003cp\u003e先看你提到的这段代码，表面上看非常正常，甚至很多人第一眼不会觉得哪里有问题：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-30\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-30\"\u003e30\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-31\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-31\"\u003e31\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-32\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-32\"\u003e32\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-33\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-33\"\u003e33\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-34\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-34\"\u003e34\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eSError\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ecause\u003c/span\u003e     \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Wrapped error which is the root cause.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003etext\u003c/span\u003e      \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Error text, which is created by New* functions.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ei18nText\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 本地错误文字，用于客户端显式中文\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eignored\u003c/span\u003e   \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 能否忽略该错误\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003einfo\u003c/span\u003e      \u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003einfoMutex\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRWMutex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eSError\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// demoRetSerr 返回 (int32, *SError)。看上去，如果不想返回任何错误，就直接返回 (0, nil)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edemoRetSerr\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eSError\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 这里把第二个返回值的 *SError 赋给了 interface{} 类型的 err\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003edemoRetSerr\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;err != nil. err: %v\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"01-乍看之下哪里会有问题\"\u003e0.1 乍看之下哪里会有问题？\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e我们 \u003ccode\u003edemoRetSerr\u003c/code\u003e 函数直接返回 \u003ccode\u003e(0, nil)\u003c/code\u003e，而函数签名的第二个参数类型是 \u003ccode\u003e*SError\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e回到 \u003ccode\u003emain\u003c/code\u003e 函数中，\u003ccode\u003eerr\u003c/code\u003e 是一个 \u003ccode\u003eerror\u003c/code\u003e 接口，承接了那个 \u003ccode\u003enil\u003c/code\u003e 指针。\u003c/li\u003e\n\u003cli\u003e如果“typed nil” 现象出现，那么 \u003ccode\u003eerr != nil\u003c/code\u003e 这个判断就会莫名其妙地通过，从而在日志里打印出“err != nil. err: \u0026lt;nil\u0026gt;”。有时更可怕的是，\u003cstrong\u003e实际逻辑会被误判\u003c/strong\u003e，可能执行本不该执行的错误处理分支。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在某些 Go 版本或特定编译器优化下，你可能发现控制台就输出 \u003ccode\u003eerr != nil. err: \u0026lt;nil\u0026gt;\u003c/code\u003e，让人“一头雾水”。这就是一个十分典型、却很隐蔽的 \u003cstrong\u003etyped nil\u003c/strong\u003e 场景。即使你写 \u003ccode\u003ereturn nil\u003c/code\u003e，对编译器来说：\u003c/p\u003e","title":"当 nil 不等于 nil？深度剖析 Go 的 typed nil 大坑"},{"content":" 截至 2024 年 2 月 10 日，该教程仍然有效。我已根据此教程重新操作并成功充值。请注意，购买苹果充值卡时应确保从苹果官方网站购买。\nChatGPT Plus 的优势 GPT-4 的性能非常强大，这是众所周知的事实。 Plus 会员可以使用 ChatGPT 的在线和插件功能，这些功能将极大地增强你的创造力，并为你的个人学习和工作效率提供强大的支持工具。 如何开通 ChatGPT Plus？ 关键步骤 ChatGPT 已在美国 iOS App Store 上架。你只需要使用 iOS 设备续费会员即可。\n目标用户 本教程适用于拥有 iOS 设备（如 iPhone 或 iPad）的用户。\n所需工具 a. iPhone 或 iPad 设备 b. 美国地区的科学上网（可自建或购买） c. 支付宝账户 d. 已注册成功的 chatGPT 账号\n开通步骤 1. 创建美国区 iOS 账号 如果你已拥有美国区账号，或已熟悉注册流程，可跳过此步骤。\n详细的注册流程如下：\n访问网站：在浏览器中访问 https://appleid.apple.com/account 开始创建你的 Apple ID。\n设置国家/地区：在\u0026quot;Country/Region\u0026quot;下拉菜单中选择\u0026quot;United States\u0026quot;。\n输入邮箱和设置密码：在指定字段输入可接收邮件的邮箱地址（作为你的 Apple ID），设定密码并在确认密码字段再次输入。\n输入并验证手机号码：选择\u0026quot;China Mainland\u0026quot;作为电话区域，输入手机号并继续。你将收到验证码，输入以验证。 确认你的 Apple ID：检查电子邮件，点击 Apple 发送的验证邮件中的链接确认你的 Apple ID。\n登录到 App Store（重要）：使用新创建的 Apple ID 登录 App Store。首次登录时系统会要求设置支付信息，选择\u0026quot;None\u0026quot;后可以下载免费应用。 填写地址和支付信息（重要）：在支付方式中选择\u0026quot;None\u0026quot;，使用美国地址生成器（例如 https://www.meiguodizhi.com/）生成地址。可以选择美国的五个免税州之一，如俄勒冈。\n常见问题： 无法找到支付信息中的“None”选项。 请确保科学上网设置为美国，并重新登录尝试。 是否有视频教程参考？ YouTube 上有多个“如何注册美国区 iOS 账号”的教程视频可供参考。 2. 创建 ChatGPT 账户 如果你已有账户，可以跳过此步骤。\n关键步骤： 创建账户时需要使用科学上网。建议使用 gmail 邮箱进行注册，因为使用中国大陆邮箱（如 QQ、163、Foxmail 等）可能会导致注册失败。 建议使用在线接码平台接收短信验证码，例如 sms-activate.org。 详细注册流程： 准备一个 gmail 账号。有关具体注册步骤，请访问 https://gmail.com/。\n启用科学上网（推荐设置为新加坡或美国，本教程以美国为例），并打开 ChatGPT 应用程序。\n选择使用邮箱进行注册，并输入你的 gmail 地址。避免使用中国大陆的邮箱以防注册失败或账户被封禁。 设置密码后，进入邮箱验证步骤。\n检查你的邮箱，处理验证邮件。\n在 ChatGPT 应用程序中点击\u0026quot;I\u0026rsquo;ve verified my email\u0026quot;按钮，继续注册流程。 关键步骤：使用在线接码平台接收手机验证码。访问 sms-activate.org，如页面默认为俄语，可使用 Chrome 浏览器的翻译功能将其翻译为中文。 在搜索栏输入\u0026quot;openai\u0026quot;，选择美国（建议选择与科学上网设置相同的国家/地区以减少风险），点击购物车图标购买服务。\n完成购买后，你将获得一个手机号码。将此号码输入到 ChatGPT 的短信验证页面，等待短信到达。注意：显示的 82.50 美元实际上是 82.5 卢布，约合人民币 6-10 元。 短信验证码可能偶尔会失败。如遇失败，更换科学上网节点，使用新邮箱，并在另一天重试。\n视频教程 YouTube 视频教程\n3. 购买 Apple Store 充值卡 购买 Apple Store 充值卡的渠道有多种，包括 Apple 官网、支付宝和淘宝等，具体选择取决于你的个人需求和资源。\n选择购买渠道：直接通过 Apple 官网购买是最直接的方法，但需使用 VISA 外币卡支付。支付宝购买虽方便，但汇率较高（约 7.11:1）。淘宝则可能价格更高。以下我们以支付宝购买为例。 a. 通过官网购买苹果充值卡 访问美国 Apple 礼品卡购买页面：访问 https://www.apple.com/us/shop/gift-cards，点击 \u0026ldquo;Buy\u0026rdquo; 按钮。 在购买界面，选择 \u0026ldquo;Email\u0026rdquo; 类型，选择你喜欢的礼品卡封面，自定义金额，建议填入 20 美元（ChatGPT Plus 的无税价格为 19.99 美元）。 content/posts/20240423-openai-register/20240423-164227-12-a83d8c2d384c01fd92ce527e48ce842a.jpg\n填写发件人和收件人信息，可填相同信息，邮箱地址用你自己的邮箱。完成后点击加入购物车。\n点击购买，输入支付信息。此例中使用了招商银行的 VISA 信用卡支付。 若未收到礼品卡信息，可登录并访问订单详情页面，点击 \u0026ldquo;resend\u0026rdquo; 重新发送礼品卡信息。 b. 通过支付宝购买苹果充值卡（不推荐） 不推荐原因：由于使用人数过多，此方式可能触发风控，部分用户报告封号情况。此方法通过第三方零售商购买。\n选择地区：在支付宝中选择“国际/港澳台”区域，选择“北美洲”-“美国”，然后选择一个州，如奥兰多。 搜索并购买充值卡：搜索“出境”，进入“出境”小程序，选择“折扣礼卡”区，滑动至页面底部点击“更多大牌折扣礼卡”，找到并点击 Apple Store 充值卡购买。 content/posts/20240423-openai-register/20240423-164227-16-36401a42e0c51295dae72b156d80e371.jpg\n完成购买：通过 Pockyt Shop 代理商完成购买，可能需注册 Pockyt 账户。购买后，充值卡信息会发送到你的 Pockyt 注册邮箱。 充值至你的 Apple ID：在 App Store，点击个人头像，选择“兑换礼品卡或代码”，输入购买的礼品卡代码，将金额充值至你的 Apple ID，可用于购买 ChatGPT Plus 服务。 常见问题： 是否可以使用其他支付方式？\n美国版 App Store 仅接受美国银行发行的银行卡。若使用 PayPal，需要是美国版且绑定美国银行卡。中国大陆的 PayPal 账号由于政策限制无法绑定支付。 有没有视频教程？如何通过官网购买 Apple 充值卡？\n是的，YouTube 上有许多“购买美国 Apple 礼品卡”的教程视频。 如果支付失败该怎么办？\n我从多位朋友了解到以下情况： a. 过几天重试，支付成功（说明风控有过期时间）。 b. 联系客服后，充值成功。 c. 联系客服后，账号被封禁。 因此，建议避免联系客服解决充值失败问题，尝试一次性只购买 20 美元，之后再重试支付或重新注册 ChatGPT 账号。 4. 开通 ChatGPT Plus 确保 iOS 系统更新至最新版本：\n确保你的设备操作系统更新至 iOS 16.x，访问设置中进行系统更新。 下载 ChatGPT App：\n在 App Store 搜索并下载 ChatGPT App。 启用科学上网：\n由于地理限制，启用科学上网并选择新加坡、日本或美国作为虚拟位置。 登录 ChatGPT App：\n使用你的账户信息登录。 购买 ChatGPT Plus：\n登录后，点击屏幕右上角的\u0026quot;\u0026hellip;\u0026ldquo;按钮进入设置页面。在此你可以看到购买选项，点击即可开通 ChatGPT Plus。购买后会默认开启自动续订服务，确保账号内余额充足即可继续使用。 其他问题： 支付失败 确认是否使用美国服务账号。 检查余额是否足够。 确保充值卡是通过正规渠道购买。 如果以上都没问题，联系苹果客服解决。 常见问题解答 科学上网 说明：我与任何科学上网厂商没有任何利益关系，此建议基于广泛的咨询需求。我使用的科学上网是 Kuromis，手机上是 shadowrocket，Mac 上是 clashX。 当前支持哪些国家？ 官方支持的国家包括日本、新加坡、加拿大、美国和英国等，不支持中国大陆和香港。 GPT4 插件系统状态如何？ 我目前主要使用 pdf 和 browsing 插件。据 Sam 所说，除了 Browsing，插件系统还未找到良好的市场契合度。 ","permalink":"http://localhost:1313/posts/20240423-openai-register/","summary":"\u003cblockquote\u003e\n\u003cp\u003e截至 2024 年 2 月 10 日，该教程仍然有效。我已根据此教程重新操作并成功充值。请注意，购买苹果充值卡时应确保从苹果官方网站购买。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/picgo/20240423-164227-1-28fd8bc46d10a26c0e639aeb5ec9862f.jpg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"chatgpt-plus-的优势\"\u003eChatGPT Plus 的优势\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eGPT-4 的性能非常强大，这是众所周知的事实。\u003c/li\u003e\n\u003cli\u003ePlus 会员可以使用 ChatGPT 的在线和插件功能，这些功能将极大地增强你的创造力，并为你的个人学习和工作效率提供强大的支持工具。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/picgo/20240423-164227-2-dfc46547e57fa80736a6925189a7e577.jpg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"如何开通-chatgpt-plus\"\u003e如何开通 ChatGPT Plus？\u003c/h2\u003e\n\u003ch3 id=\"关键步骤\"\u003e关键步骤\u003c/h3\u003e\n\u003cp\u003eChatGPT 已在美国 iOS App Store 上架。你只需要使用 iOS 设备续费会员即可。\u003c/p\u003e\n\u003ch3 id=\"目标用户\"\u003e目标用户\u003c/h3\u003e\n\u003cp\u003e本教程适用于拥有 iOS 设备（如 iPhone 或 iPad）的用户。\u003c/p\u003e\n\u003ch3 id=\"所需工具\"\u003e所需工具\u003c/h3\u003e\n\u003cp\u003ea. iPhone 或 iPad 设备\nb. 美国地区的科学上网（可自建或购买）\nc. 支付宝账户\nd. 已注册成功的 chatGPT 账号\u003c/p\u003e\n\u003ch2 id=\"开通步骤\"\u003e开通步骤\u003c/h2\u003e\n\u003ch3 id=\"1-创建美国区-ios-账号\"\u003e1. 创建美国区 iOS 账号\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果你已拥有美国区账号，或已熟悉注册流程，可跳过此步骤。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e详细的注册流程如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e访问网站\u003c/strong\u003e：在浏览器中访问 \u003ca href=\"https://appleid.apple.com/account\"\u003ehttps://appleid.apple.com/account\u003c/a\u003e 开始创建你的 Apple ID。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e设置国家/地区\u003c/strong\u003e：在\u0026quot;Country/Region\u0026quot;下拉菜单中选择\u0026quot;United States\u0026quot;。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e输入邮箱和设置密码\u003c/strong\u003e：在指定字段输入可接收邮件的邮箱地址（作为你的 Apple ID），设定密码并在确认密码字段再次输入。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e输入并验证手机号码\u003c/strong\u003e：选择\u0026quot;China Mainland\u0026quot;作为电话区域，输入手机号并继续。你将收到验证码，输入以验证。\n\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/picgo/20240423-164227-3-d9aedace28daa3b3ca0d65e142f9baa7.jpg\"\u003e\u003c/p\u003e","title":"畅享 ChatGPT Plus：无需额外支付手段，突破 OpenAI 支付风控"},{"content":"作者：Sam Altman\n原文：https://playbook.samaltman.com/\nSam Altman，OpenAI CEO，经常会在博客中分享他的创业经验与智慧。Sam 曾分享过一篇他的经典文章《创业生存手册：如何有效地打造产品、组建团队并筹集资金》，他提供了一系列富有洞见的指导，帮助我们理解创业的艰难和挑战，并找到成功的途径。无论你是创业新手，还是经验丰富的科技专家，都能在这篇文章中找到有价值的收获。#SamAltman #创业 #科技\n个人认为，大公司内的小团队或创新团队与创业公司在诸多方面有着密切的相似性。两者都面临着从零开始，将一个概念或想法转化为可行产品或服务的挑战。他们都需要快速地适应和学习，寻找产品与市场的契合点，同时也要不断地迭代产品，以满足不断变化的市场需求。在这两种环境中，都需要强大的领导力和管理才能以及优秀的团队成员。而且，他们都需要面对并管理风险，同时在有限的资源下取得最大的产出。因此，无论你是处于创业环境还是大公司的创新团队，本文都会为你提供极大的价值。Sam Altman的经验和洞察将帮助你更好地理解如何建立并领导一支成功的团队，如何募集资金，如何处理竞争，以及如何建立持久并能够盈利的公司。\n我们在指导初创公司方面投入了大量的时间和精力。尽管一对一的咨询服务始终是不可或缺的，但我们认为，如果能将这些建议中最具普适性的部分提炼出来，整合成一种可以提供给 Y Combinator 以及 YC Fellowship 公司的行动指南，那么我们可能能更好地扩展 Y Combinator 的影响力。\n于是，我们决定将这个行动指南分享给所有人。\n这是为初涉创业领域的人士准备的。对于那些阅读过大量 YC 合作伙伴所写的文章的人来说，这里的大部分内容可能并不陌生——我们的目标是将这些内容汇集到一处。\n关于如何扩大创业公司的规模，我们可能会在后面的部分介绍——本指南主要覆盖了如何创立一家公司的相关内容。\n作为一家初创公司，你的目标应该是创造出用户热爱的产品。如果你做到了这一点，那么你需要找出如何吸引更多的用户。但是，首要的一步至关重要——想想今天那些真正成功的公司。他们都是从一个让早期用户如此热爱以至于愿意向他人推荐的产品开始的。如果你没有做到这一点，你将会失败。如果你自欺欺人，认为你的用户热爱你的产品，但实际上并非如此，你仍然会失败。\n初创公司的墓地上满是那些认为可以跳过这一步的人。\n与其创造出大批用户喜欢的产品，不如首先创造出小部分用户热爱的产品。尽管总的积极感受程度是相同的，但是获得更多用户要比从喜欢提升到热爱要容易得多。\n关于选择创业，我有一个警告：这是一件很糟糕的事情！我们从 YC 创始人那里得到的最一致的反馈就是，创业比他们想象的要困难，因为他们对初创公司所需的工作量和强度没有一个清晰的认识。加入一家正处于快速发展轨道的早期初创公司通常会是一个更好的经济上的选择。\n另一方面，创业其实对你的职业并不构成很大的风险——如果你在技术方面真的出类拔萃，即使你失败了，也会有工作机会。大多数人在评估风险方面做得非常糟糕。我个人认为，更具风险的选择是，你有一个你非常热衷的想法或项目，但却选择了一个安全、轻松但又无法满足你的工作。\n要创办一家成功的初创公司，你需要：一个伟大的想法（包括一个伟大的市场）、一个优秀的团队、一个出色的产品，以及卓越的执行力。\n一、一个伟大的想法 我们会首先询问 YC 公司的创始人们，他们正在开发什么，以及为何要开发这个产品。\n我们希望得到清晰、简洁的回答。这既是对你作为创始人的评估，也是对创意本身的考察。作为创始人，清晰的思维和沟通能力非常重要——你在招聘、融资、销售等方面都会需要这种能力。一般来说，想法需要清晰才能传播，而复杂的想法几乎总是混乱思维或是人为制造问题的标志。如果你的想法在别人第一次听到时并不能激发起他们的兴趣，那就不妙了。\n我们还会问，谁对这款产品有着迫切的需求。\n最好的情况是，你自己就是目标用户。次优的情况是，你对目标用户有着深入的理解。\n如果公司已经有了用户，我们会问有多少用户，以及这个数字的增长速度如何。我们会尝试找出它的增长速度为何没有更快，尤其是要找出用户是否真的喜欢这个产品。通常，这意味着他们会在没有公司提示的情况下，向他们的朋友推荐这个产品。我们还会问这个公司是否已经产生了收入，如果没有，原因是什么。\n如果公司还没有用户，我们会尝试找出最小化的首次构建项目，以便对假设进行验证——也就是说，如果我们从完美的体验回溯，我们会尝试找出从何处着手的核心点。\n检验一个想法的方法是发布它看看会发生什么，或者尝试销售它（例如，在你编写一行代码之前，尝试获得购买意向书）。前者更适用于消费者想法（用户可能会告诉你他们会使用它，但实际上它可能无法脱颖而出），后者更适用于企业想法（如果一个公司告诉你他们会购买某件东西，那么就去制造它）。具体来说，如果你是一家企业公司，我们会首先问你是否有来自客户的购买意向书，表明他们愿意购买你正在开发的产品。对于大多数生物技术和硬科技公司来说，检验一个想法的方式是先和潜在客户交谈，然后找出你可以首先构建的技术的最小子集（MVP）。\n让你的想法根据用户反馈进行演进非常重要。理解你的用户非常关键——你需要这个能力来评估一个想法，制造一个出色的产品，以及建立一个伟大的公司。\n如前所述，初创公司的路非常艰难。他们需要很长的时间和持续的高强度努力。创始人和员工需要有共同的使命感来支撑他们。因此，我们会询问创始人为什么想创办这家特定的公司。\n我们也会询问这家公司如何能够成为一家垄断企业。这有很多不同的词汇来表述，但我们采用的是彼得·蒂尔的说法。显然，我们不希望你的公司在面对竞争对手时采取不道德的行为。相反，我们正在寻找那些随着规模的扩大而变得更强大，且难以复制的企业。\n最后，我们会询问市场情况。我们会询问它现在的规模，增长速度，以及为什么它在十年后会变得非常大。我们试图理解为什么市场会快速增长，以及为什么这是一个初创公司应该去追逐的好市场。我们喜欢那些刚刚开始出现的大部分人尚未意识到的重大技术变革——大公司在应对这些转变方面做得很糟糕。而有些反直觉的是，最佳策略是在小市场中占据大部分份额。\n关于想法，我还有一些其他的想法：\n我们更喜欢全新的东西，而不是衍生的东西。大多数真正的大公司都是从一些根本性的新事物开始的（新的一个可以接受的定义是比原来好 10 倍）。如果同时有十家其他公司以同样的计划开始，而且听起来非常像已经存在的东西，我们会有所怀疑。\n这其中一个重要的反直觉原因是，做一些新的和困难的事情比做一些衍生的和容易的事情更简单。如果你是前者，人们会想要帮助你，加入你；如果是后者，他们就不会这么做。\n最好的想法听起来可能不好，但实际上是好的。所以你不需要对你的想法过于保密——如果它真的是一个好想法，那么它可能不会听起来像是值得被窃取的。即使它听起来像是值得被窃取的，拥有好想法的人至少比愿意付出将伟大的想法转化为伟大的公司所需要的工作的人多一千倍。而且，如果你告诉别人你在做什么，他们可能会帮助你。\n说到告诉别人你的想法——虽然这个想法第一次听到时真的能激发一些人的兴趣是很重要的，但几乎每个人都会告诉你你的想法很糟糕。也许他们是对的。也许他们不擅长评估创业公司，或者他们只是嫉妒。无论原因是什么，这种情况会经常发生，它会让你受伤，即使你认为你不会被它影响，你仍然会被影响。你越早建立自我信念，不被恶意评论者过多拖累，你就会越好。无论你多么成功，恶意评论者永远不会消失。\n如果你没有创业想法，但是想要创业，怎么办呢？也许你不应该创业。如果首先想法出现，而创业公司是将这个想法推向世界的方式，那会更好。\n我们曾经尝试过一个实验，为一批有前途但没有创业想法的创始团队提供资金，希望他们在我们资助他们后能找到一个有前景的创业想法。\n所有的尝试都失败了。我认为问题的一部分是，好的创始人往往有很多好的想法（通常是太多）。但更大的问题是，一旦你有了一个创业公司，你就必须赶快想出一个创业想法，而且因为它已经是一个正式的公司，所以想法不能太疯狂。你最终会得到听起来可行但是衍生的创业想法。这就是转型的危险。\n因此，最好不要过于积极地强迫自己想出创业想法。相反，去了解许多不同的事物。实践发现问题，看似低效的事物，和主要的技术转变。从事你感兴趣的项目[1] 。尽可能地接触智慧、有趣的人。在某个时候，创业想法会自然出现的。\n二、一个优秀的团队 平庸的团队无法打造伟大的公司。我们最关注的事情之一就是创始人的实力。当我过去从事后期投资时，我同样非常关注创始人所雇佣的员工的实力。\n什么样的人才是优秀的创始人？最重要的特征包括无坚不摧的毅力、决心、坚韧不拔和足智多谋。聪明才智和激情也排在非常重要的位置。这些都比经验，当然也比“精通语言 X 和框架 Y”更重要。\n我们注意到，最成功的创始人都是那种和他们一起工作感觉压力很小的人，因为你觉得“不管是什么事，他/她都能完成。”有时候，你可以凭借纯粹的意志力成功。\n优秀的创始人具有一些看似矛盾的特征。一个重要的例子是刚柔并济。你要对公司的核心和其使命有强烈的信念，但对于几乎所有其他事情，你还需要保持非常灵活，乐于学习新事物。\n最优秀的创始人反应异常迅速。这是决策力、专注力、强度和执行能力的指标。\n难以与之交谈的创始人几乎总是不理想的。对于创始人来说，沟通是一项非常重要的技能——实际上，我认为这是创始人最重要且少有人讨论的技能。\n科技创业公司需要至少有一位创始人能够构建公司的产品或服务，并且至少有一位创始人擅长（或者能够变得擅长）销售和与用户交流。这可以是同一个人。\n在选择联合创始人时，你应该考虑这些标准——这是你将要做出的最重要的决定之一，而这个决定通常都是相当随机的。你需要的是一个你很了解的人，而不是你在创始人交流活动上刚认识的人。你可以通过更多的信息来评估任何可能与你共事的人，而且你肯定不想在这一点上犯错误。此外，在某个时刻，创业公司的预期价值可能会跌破 X 轴。如果你和联合创始人之间有预先存在的关系，你们都不会想让对方失望，你们会继续前行。创始人分道扬镳是早期创业公司死亡的主要原因之一，而我们看到在创始人特意为创立公司而相识的情况下，这种情况非常非常频繁。\n最好的情况，毫无疑问，是有一个好的联合创始人。其次是单独创业。最糟糕的情况，毫无疑问，是有一个糟糕的联合创始人。如果事情没有按照预期进行，你应该立即分道扬镳。\n关于股权的快速说明：关于股权分配的谈话随着时间的推移并不会变得更容易——最好是在早期就敲定。大部分情况下平等的股权分配最好，在两个创始人的情况下，最好是有一个人多拥有一份股份，以防在创始人有分歧时出现僵局。\n三、一个出色的产品 成功的秘诀就是：拥有一个出色的产品。这是所有伟大公司唯一的共同点。\n如果你没有打造出用户喜爱的产品，你最终会失败。然而，创始人总是在寻找其他的技巧。创业是你的技巧（比如增长技巧）不再奏效的时刻。\n一个出色的产品是长期增长的唯一途径。最终，你的公司会变得如此庞大，所有的增长黑客技巧都不再起作用，你必须通过人们想要使用你的产品来实现增长。这是对超级成功的公司最重要的理解。没有其他的途径。想想所有真正成功的科技公司——它们都做到了这一点。\n你需要在你的公司里建立一个“产品改进引擎”。你应该与你的用户交谈，观察他们如何使用你的产品，找出哪些部分不够好，然后改进你的产品。然后再做一次。这个循环应该是公司的首要关注点，并且应该驱动其他所有的事情。如果你每周提高你的产品 5%，效果会真正产生复利。\n这个循环的重复速度越快，公司通常发展得越好。在 YC 期间，我们告诉创始人他们应该专注于产品开发和与用户交谈，除了吃饭、睡觉、锻炼和陪伴亲人之外，其他事情不需要关注。\n要正确地进行这个循环，你必须与你的用户非常接近。真正地观察他们使用你的产品。如果可以的话，坐在他们的办公室里。既要重视他们告诉你的内容，也要重视他们实际的行动。在可能的情况下，创始人和用户之间不应该有任何隔阂，这意味着创始人需要进行销售、客户支持等工作。\n尽可能地理解你的用户。真正了解他们需要什么，在哪里找到他们，以及什么让他们行动起来。\n“做那些不具备扩展性的事情”已经成为创业公司的口头禅。你通常需要一个一个地吸引初期的用户（Ben Silbermann 曾经在帕洛阿尔托的咖啡馆里接近陌生人，邀请他们试用 Pinterest），然后构建他们所要求的东西。许多创始人讨厌这一部分，只想在媒体上宣布他们的产品。但那几乎从来都不管用。手动招募用户，并使产品足够好，以至于你招募到的用户会将产品告诉他们的朋友。\n你也需要将事情分解成非常小的部分，然后在进行的过程中进行迭代和调整。不要试图做太远的规划，绝对不要把所有的事情都放在一个大的公开发布中。你要从非常简单的东西开始——尽可能少的表面区域——并比你想象的更早地发布它。事实上，简单总是好的，你应该始终保持你的产品和公司尽可能简单。\n我们经常问面临问题的创业公司一些常见的问题：用户是否多次使用你的产品？你的用户是否狂热地喜欢你的产品？如果你的公司消失，你的用户是否会真的感到失望？你的用户是否在你没有要求他们这么做的情况下，向其他人推荐你？如果你是一家 B2B 公司，你是否至少有 10 个付费客户？\n如果没有，那往往就是根本问题，我们会告诉公司要改进他们的产品。我对大多数关于公司为什么没有增长的借口持怀疑态度——很多时候，真正的原因是产品还不够好。\n当初创公司不确定他们的产品下一步应该怎么做，或者他们的产品不够好时，我们会让他们去和他们的用户交谈。这并不是在所有情况下都奏效——肯定是有人会要求福特生产出更快的马车——但它的效果出人意料地好。实际上，更一般的说，当公司内部对任何事情存在分歧时，都应去和你的用户交谈。\n最优秀的创始人似乎对产品质量的关注有点过度，即使是对于看似无关紧要的细节。但这似乎奏效。顺便说一句，“产品”包括用户与公司的所有互动。你需要提供优质的支持，优质的销售互动等等。\n记住，如果你没有制造出一个优秀的产品，其他任何事情都无法拯救你。\n四、伟大的执行力 虽然打造一个出色的产品是必要的，但这并不意味着你的工作就此完成。你还需要将其发展成为一家伟大的公司，而且这需要你自己去做——雇佣一位“有经验的经理”来完成所有这些工作的幻想不仅非常普遍，也是失败公司的坟场。在很长一段时间里，你无法将这些工作外包给他人。\n这听起来似乎是显而易见的，但你必须要赚钱。现在是开始思考如何实现这一点的好时机。\nCEO 的唯一普遍的职责就是确保公司取得成功。即使你有许多通常会让你无法胜任 CEO 职务的缺点，只要你能雇佣能够互补你自身技能的人并让他们各尽其职，你仍然可以作为创始人做到这一点。那些有着华丽 MBA 背景的经验丰富的 CEO 可能没有你的缺点，但他或她不会像你那样深入理解用户，也不会有同样的产品直觉，更不会像你那样关心公司。\n4.1 增长 成长和动力是执行力的关键。只要不是“花 90 美分卖一美元”的增长，增长能解决所有问题，而缺乏增长的问题只有通过增长才能解决。如果你的公司在增长，那就感觉你在赢，人们会感到快乐。如果你的公司在增长，那么总会有新的角色和责任，人们会觉得他们的职业生涯在前进。如果你的公司没有增长，那就感觉你在输，人们会感到不快并离开。如果你的公司没有增长，人们只会争夺职责并互相指责。\n那些感到疲倦的创始人和员工几乎总是在没有动力的初创公司工作。无法过分强调这种感觉有多令人沮丧。\n优秀执行力的首要准则是“永远不要失去动力”。但是，如何做到这一点呢？\n最重要的方式是把它作为你的首要任务。公司的发展方向取决于 CEO 所关注的方向。对公司来说，有一个单一的优化指标是有价值的，而花时间去找出正确的增长指标也是值得的。如果你关心增长，并设定了执行标准，公司其余的部分将会集中精力关注增长。\n以下是几个例子：\nAirbnb 的创始人绘制了一个预期增长的图表，他们希望达到的增长目标。他们把这个图表贴在所有地方——冰箱上、桌子上、浴室的镜子上。如果他们那周达到了这个数字，那就太好了。如果没有，那就是他们讨论的所有话题。\n马克·扎克伯格曾经说过，Facebook 最重要的创新之一就是在增长放缓时设立了一个增长小组。这个小组曾经是（也许现在仍然是）公司中最具声望的小组——每个人都知道它的重要性。\n你需要列出阻碍增长的因素。作为一个公司，你们要讨论如何加快增长。如果你知道限制因素是什么，你自然会想办法解决它们。\n对于你考虑要做的任何事情，都问问自己：“这是优化增长的最佳方式吗？”比如，参加一个会议通常不是优化增长的最佳方式，除非你期望在那里能销售很多产品。\n在度量标准（和财务状况）方面进行极度的内部透明化是一件好事。不知为何，创始人总是对此感到非常恐惧。但这对于让整个公司都关注增长来说，是非常重要的。员工对度量标准的关注程度和公司的表现似乎有直接的关联。如果你隐藏度量标准，那么员工就很难关注它们。\n说到度量标准，不要用虚荣指标来欺骗自己。这里的常见错误是只关注用户注册，而忽视了用户留存率。用户留存率对增长的重要性和新用户获取同样重要。\n保持动力的另一个重要方式是建立内部节奏。你需要有一个“进步的鼓点”，可以在内部和外部谈论的新功能、客户、雇员、收入里程碑、合作伙伴等。\n你应该设定有挑战性但基本可达成的目标，并每月回顾进度。庆祝胜利！常常在内部讨论战略，告诉每个人你从客户那里听到的反馈等。你在内部分享的信息越多——无论好坏——你的公司就会做得越好。\n===============\n创始人经常会陷入一些陷阱。其中一个是，如果公司的增长速度极快，但一切都显得非常混乱和低效，每个人都会担心事情会崩溃。实际上，这种情况很少发生（我能想到的最近的一家因为技术债务而死亡的初创公司就是 Friendster。）出人意料的是，如果你的增长速度很快，但什么都没有优化，这其实是好事——你只需要修复它，就能得到更多的增长！我最喜欢的投资是那些增长非常快但优化程度极低的公司——它们被严重低估了。\n一个相关的陷阱是过于关注未来的问题——比如，“我们如何在大规模的情况下做到这一点？”答案是，当你到达那个阶段时，你会自然而然地找出答案。因为辩论这个问题而死的初创公司远多于因为没有充分考虑这个问题而死的初创公司。一个好的经验法则是，只考虑在你目前规模的十倍时事情会如何运作。大多数早期阶段的初创公司应该把“做不可扩展的事情”挂在墙上，按此原则行事。例如，在早期，优秀的初创公司总是有优质的客户服务，而差的初创公司则担心这会影响单位经济效益，担心这样做无法扩展。但优质的客户服务会带来热情的早期用户，而随着产品的改进，你需要的支持会越来越少，因为你会知道客户常见的问题，并在这些领域改进产品/体验。（顺便说一句，这是一个非常重要的例子——要提供优质的客户支持。）\n然而，这其中有一个大前提——“做不可扩展的事情”并不能免除你最终必须赚钱的责任。在早期，单位经济效益不佳是可以接受的，但你必须有一个合理的解释，说明为什么单位经济效益在后期会有所改善。\n另一个陷阱是由于绝对数值上的增长表现不佳，尽管百分比基础上的增长表现良好，而感到沮丧。人类对于指数增长的直觉非常差。提醒你的团队这一点，所有的巨头公司都是从小数字开始增长的。\n一些最大的陷阱是创始人认为可以带来增长，但实际上几乎永远无效，并且浪费了大量时间的事情。常见的例子包括与其他公司的交易和“大新闻发布”。要警惕这些事情，并明白它们实际上几乎永远不会奏效。相反，应该像所有伟大的公司一样，通过构建用户喜爱的产品，先手动吸引用户，然后测试大量的增长策略（广告，推荐计划，销售和营销等），并做更多有效的事情。询问你的客户你在哪里可以找到更多像他们的人。\n记住，销售和营销并非禁忌词汇。尽管如果你没有一个出色的产品，它们都无法救你，但它们都可以大幅加速增长。如果你是一家企业公司，你的公司很可能需要在这些方面做得好。\n尤其不要害怕销售。至少有一位创始人必须擅长邀请人们使用你的产品并付给你钱。\nAlex Schultz为消费品增长提供了一场讲座[2] ，这个讲座值得一看。对于 B2B 产品，我认为几乎总是追踪每月的收入增长是正确的策略，并记住更长的销售周期意味着最初几个月的情况可能会看起来不乐观（尽管有时将初创公司作为初期客户可以解决这个问题）。\n4.2 专注和强度 如果我必须将我对如何运营的建议浓缩到仅两个词中，我会选择“专注”和“强度”。这两个词似乎真正适用于我认识的最优秀的创始人。\n他们无情地专注于他们的产品和增长。他们并不试图做所有的事情——实际上，他们经常说“不”（这很难，因为创办公司的那种人就是喜欢尝试新事物。）\n一般的原则是，在你已经主导了第一件事情之前，不要让你的公司开始做下一件事。我所知道的所有伟大的公司都没有一开始就同时做多件事——它们从一件事开始，充满信念，然后坚持到底。你能做的事情远少于你想象的。初创公司死亡的一个非常、非常普遍的原因是做了太多错误的事情。优先级设置是至关重要且困难的。（为公司设定优先级和为自己设定日常优先级同样重要。对我个人而言，我发现最有效的是每天用笔和纸列出大约 3 个主要任务和大约 30 个次要任务，以及一个包含总体目标的年度待办事项清单。）\n虽然优秀的创始人不会做很多大项目，但他们非常投入地做他们所做的事情。他们能非常快地完成事情。他们果断，这在经营初创公司时是困难的——你会得到很多互相矛盾的建议，原因既是有多种方法可以做事情，也是因为存在很多糟糕的建议。优秀的创始人会听取所有的建议，然后迅速做出自己的决定。\n请注意，这并不意味着你要全力以赴做所有事——那是不可能的。你必须选择正确的事情。如保罗·布赫海特所说，找到用 10%的努力获取 90%的价值的方法。市场并不关心你工作得多努力——它只关心你是否做了正确的事情。\n既痴迷于产品质量又能快速行动是非常困难的。但这是优秀创始人最明显的特质之一。\n我从未见过一个行动迟缓的创始人能够真正成功。\n你和其他创业公司并无不同。你仍然需要保持专注并迅速行动。即使是制造火箭和核反应堆的公司也能做到这一点。所有失败的公司都有一种自我解释，认为他们与众不同，不需要快速行动。\n当你找到有效的方法时，继续坚持。不要分心去做其他事。不要松开油门。\n不要被早期的成功所迷惑——你并非是通过参加大量的社交活动和参与各种讨论小组就能获得一个有前景的开端。初步取得成功的创业公司创始人可以选择两条路：一是继续做他们正在做的事，或者他们开始花大量的时间思考自己的“个人品牌”并享受作为创始人的地位。\n拒绝参加会议和拒绝接受媒体采访是困难的——它们让人感觉良好，特别是当看到你所在领域的其他创始人得到关注时更是如此。但这种情况不会持续太久。最终，新闻媒体会发现谁才是真正的赢家，如果你的公司真正成功，你会得到超过你期望的关注。那些极端的情况——早期创业者拥有自己的公关人员——你可能会认为这只存在于电视节目中，但实际上这在现实生活中确实存在，而且这些早期创业者几乎总是会失败。\n长期来看，专注和强度会带来胜利。 （查理·罗斯曾经说过，世界上的事情是通过专注和个人联系的结合来完成的，这句话让我一直铭记在心。)\n4.3 CEO 的职责 前面我提到，首席执行官的唯一普遍的工作职责就是确保公司取得胜利。虽然这是事实，但我想更具体地谈谈首席执行官应该如何分配他或她的时间。\n作为首席执行官，你需要 1) 为公司设定愿景和策略，2) 向所有人宣传公司，3) 招聘和管理团队，特别是在你自己能力不足的领域，4) 筹集资金，以及 5) 设定执行质量的标准。\n除此之外，找出你最热爱的业务部分，并始终保持参与。\n正如我一开始提到的，这是一份高强度的工作。如果你成功了，公司将在你无法想象的程度上占据你的生活——公司的事情将始终在你的脑海中。极端的专注和强烈的执行力意味着它对于工作与生活的平衡并非最佳选择。你可以有另一个重要的事物——你的家庭，参加很多铁人三项比赛等——但除此之外可能没有太多其他事物。你必须始终保持在岗位，无论你在委派任务上做得多么好，还是有很多决定只有你才能做出。\n你应该立志于对团队和外部世界保持超高的响应速度，始终清楚战略和优先事项，出席所有重要的活动，并快速执行（尤其是在涉及到其他人受阻的决策方面）。你还应该采取“不惜一切代价”的态度——会有很多不愉快的琐碎事情。如果团队看到你在做这些事，他们也会这么做。\n管理你自己的心理状态既非常困难又非常重要。这在现在看来可能已经变得陈词滥调，但这是真的——情绪的高潮和低谷都非常强烈，如果你无法在这其中保持某种程度的稳定，你将会遇到困难。作为一名 CEO 是一种孤独的存在。和其他 CEO 建立关系是非常重要的，当一切都在瓦解的时候，你可以打电话向他们求助（这是 YC 的一个重要的偶然发现，这使创始人有了同行）。\n成功的创业需要很长时间——肯定比大多数创始人在开始时想的要长。你不能把它当作熬夜。你必须吃好、睡好、做运动。你必须花时间和你的家人和朋友在一起。你也需要在你真正热爱的领域工作——没有其他东西能支撑你十年。\n所有事情似乎总是处于破碎的状态——灾难的多样性和规模将会让你惊讶。你的工作就是带着笑容修复它们，并向你的团队保证一切都会好的。通常情况下，事情并不像看起来那么糟糕，但有时候它们确实非常糟糕。无论如何，只需继续前进。持续增长。\nCEO 不能找借口。会有很多不公平和糟糕的事情发生。但是不要让自己说，尤其是对团队说，“如果我们有更多的钱就好了”或“如果我们有另一名工程师就好了”。要么想办法使之成为可能，要么想办法在没有它的情况下应对。那些给自己找很多借口的人通常会失败，创业公司的 CEO 如果这样做几乎总是会失败。让自己对不公感到不安，1 分钟就好，然后意识到找到解决方案取决于你自己。努力让人们在谈论你时说：“X 总是能够以某种方式把事情办好。”\n对于首次创业的创始人，没有人知道自己在做什么。你理解这一点，并请求帮助，会使你处于更好的状态。花时间投资学习成为一个好的领导者和管理者是值得的。做到这一点的最好方法是找一个导师——读书似乎没有那么有效。\n在 YC，我们的很多建议都是“直接问他们”或“直接去做”。首次创业的创始人认为，当你需要别人的帮助或者你想做新的事情时，一定有一些秘诀。但再次强调，对于创业公司来说，技巧已经不再起作用了。直接了当，勇于表达你的需求，不要做一个讨厌鬼。\n对于别人你可以扭曲现实，但对自己不能这样做。你必须让其他人相信你的公司注定是这十年里最重要的创业公司，但你自己应该对可能出错的任何事情都保持警惕。\n要坚持不懈。大多数创始人放弃得太快，或者太快转向下一个产品。如果事情总体上进展不顺利，找出问题的根源并确保你解决了它。作为一名成功的创业公司 CEO，坚持不懈是非常重要的一部分（尽管你也不想过于固执——这是另一种明显的矛盾，也是一个艰难的抉择。）\n保持乐观。尽管可能在世界某处存在着一位伟大的悲观主义 CEO，但我还没遇到过他或她。CEO 对未来充满信心，并相信公司将在创造更好的未来中发挥重要作用，这对于 CEO 以及将这种信念传播给整个公司来说都是非常重要的。从理论上讲，这很容易；在应对短期挑战的现实中，这很困难。不要失去对长远愿景的关注，相信日常的挑战终将被遗忘，取而代之的是年复一年的进步回忆。\n定义使命和价值观是你最重要的工作之一。这可能会显得有点矫情，但早早地这样做是值得的。你在开始时设定的任何东西，几年后通常仍会有效，而且随着你的发展，每个新加入的人都需要首先接受，然后向其他人推销公司的使命和价值观。所以，尽早把公司的使命和价值观写下来。\n我认为值得重复的另一个陈词滥调是：建立一家公司有点像建立一个宗教。如果人们无法将他们日常的工作与他们关心的更高的目标联系起来，他们就不会做得很好。在 YC 网络中，我认为 Airbnb 做得最好，强烈建议大家关注他们的文化价值观。\nCEO 们经常犯的一个错误是在商业领域的老路上创新，而不是在新产品和解决方案上创新。例如，许多创始人认为他们应该花时间去发现新的人力资源、营销、销售、融资、公关等方式。这几乎总是不好的。在成熟的领域里，按照已经行之有效的方式来做，将你的创新精力集中在你正在构建的产品或服务上。\n4.4 招聘 \u0026amp; 管理 招聘是你最重要的工作之一，也是建立一家伟大公司（而不仅仅是伟大产品）的关键。\n关于招聘，我的第一条建议是：不要轻易去招聘。在 YC 我们接触过的最成功的公司，通常会相对较晚地开始招聘员工。员工是一笔大开销。员工会增加组织复杂性和沟通成本。有些你可以和你的合伙人讲的话，在员工在场的情况下就不能说。员工也会增加惯性——随着团队人数的增加，改变方向的难度会呈指数级增加。抵制将自我价值与员工人数挂钩的冲动。\n最优秀的人拥有很多机会。他们希望加入发展势头强劲的公司。如果你什么都没有，招聘他们就很困难。一旦你的公司明显赢得了竞争，他们就会想要加入你的团队。\n值得重复的是，优秀的人有很多选择，而你需要优秀的人才来构建一家伟大的公司。在股权、信任和责任方面要慷慨大方。愿意去争取那些你认为自己无法得到的人。记住，你想要雇佣的那种人如果愿意，他们自己也可以创办公司。\n当你处于招聘模式时（即从你找到产品市场匹配 PMF 到无穷期 T-infinity），你应该花大约 25%的时间在招聘上。至少有一位创始人，通常是 CEO，需要变得擅长招聘。这是大多数 CEO 的头号消耗时间的活动。每个人都说 CEO 应该花大量时间在招聘上，但实际上，只有最好的 CEO 才会这么做。这可能说明了一些问题。\n不要在你雇佣的人才的素质上妥协。每个人都知道这一点，然而在绝望的需要中，每个人都会在某个时刻在这上面妥协。每个人都会对此感到后悔，有时候这几乎会摧毁公司。优秀和不称职的人都具有传染性，如果你从一开始就雇佣表现平庸的人，那么平均水平通常不会上升。那些早期雇佣表现平庸的员工的公司几乎永远无法恢复。对于人的判断，相信你的直觉。如果你有疑虑，那么答案就是不行。\n不要雇佣一贯消极的人。他们不适合早期创业公司需要的东西——世界其他地方每天都在预测你的垮台，公司内部需要团结一致，相信事情会好起来。\n在几乎所有角色中，应该看重能力而非经验。寻找具有聪明和拥有搞定事情的良好记录的人。寻找你喜欢的人——你们将会花费大量的时间在一起，并且经常处于紧张的情况。对于你不认识的人，尝试在他们全职加入之前一起完成一个项目。\n投入精力，成为一位优秀的管理者。对大多数创始人来说，这很难，并且肯定是违反直觉的。但这非常重要，找到能在这方面帮助你的导师。如果你在这方面的表现不佳，你将很快失去员工，而如果你不能留住员工，即使你是世界上最好的招聘者，这也没用。关于如何成为一名优秀的管理者，大部分原则都已经讲得很清楚了，但我从未看到讨论过的一个原则就是\u0026quot;不要陷入英雄主义模式\u0026quot;。大多数首次担任管理者的人在某个时刻都会成为这个模式的受害者，试图自己做所有事情，对员工不闻不问。这通常会以崩溃告终。要抵制进入这种模式的所有诱惑，愿意为了拥有一个运作良好的团队而推迟项目进度。\n谈到管理，尽量让所有人都在同一个办公室工作。不知何故，创业公司总是在这个问题上妥协。但是，几乎所有最成功的创业公司一开始都是聚集在一起的。我认为远程工作对大公司来说可能很好，但对于创业公司来说，但这并不是通向巨大成功的秘诀。\n最后，迅速解雇员工。大家都知道这个原则，但没有人会这么做。但无论如何，我还是觉得应该说一下。另外，无论他们在工作中有多优秀，只要他们对公司文化有害，就要解雇他们。公司文化由你雇佣、解雇和晋升的人来定义。\n我写了一篇博客文章，详细介绍了这个话题。[3]\n4.5 竞争对手 关于竞争对手的简要说明：竞争对手就像是创业公司的幽灵故事。初创公司的创始人认为他们是杀死 99%的创业公司的元凶。但实际上，99%的创业公司是自杀，而非他杀。你更应该关心的是你的内部问题。如果你失败了，很可能是因为你没能做出一个优秀的产品，或者没能创建一个伟大的公司。\n99%的时间里，你应该忽略竞争对手。特别是当他们筹集了大量的资金，或者在媒体上引起了很大关注时，更应该忽略他们。除非他们用真实的、已经上线的产品击败你，否则不要担心竞争对手。发布新闻稿比编写代码更容易，编写代码又比制作出优秀的产品更容易。正如亨利·福特所说：\u0026ldquo;最让人畏惧的竞争对手是那些从不关心你，而是一直在努力改进他们自己业务的人。\u0026rdquo;\n每个巨头公司在它们还很小的时候，都曾面临比你现在面临的竞争威胁更严重的情况，但它们最终都平安度过了。总是有对策的。\n4.6 赚钱 哦，是的，赚钱。你需要弄清楚如何做到这一点。\n简单来说，你需要让人们支付的金钱超过你提供商品/服务的成本。出于某种原因，人们总是忘记考虑提供商品/服务的成本部分。\n如果你有一个免费的产品，不要打算通过购买用户来增长。这对依靠广告的业务来说真的很难。你需要做出一些人们愿意与朋友分享的东西。\n如果你有一个付费产品，客户终身价值（LTV）低于 500 美元，你通常负担不起销售成本。试验不同的用户获取方式，如 SEO/SEM，广告，邮件等，但尽量在 3 个月内回收你的客户获取成本（CAC）。\n如果你有一个付费产品，客户终身价值（LTV）超过 500 美元（净收入），你通常可以负担得起直销。首先尝试自己销售产品以了解哪些方法有效。《Hacking Sales》是一本值得一读的书。\n无论如何，尽快达到\u0026quot;拉面盈利\u0026quot;——也就是说，赚到足够的钱让创始人能活下来。一旦你到达这个阶段，你就掌控了自己的命运，不再受投资者和金融市场的摆布。\n痴迷地关注你的现金流。虽然这听起来难以置信，但我们已经看到很多次创始人在不知情的情况下用光了资金（也可以阅读 Paul Graham 的文章[4] ）。\n4.7 筹集资金 大多数初创公司在某个时候会筹集资金。\n你应该在需要资金或者在有好的条件下筹集资金。但要小心不要失去节俭的意识，也不要试图通过投钱来解决问题。资金不足可能会造成困扰，但是拥有过多的资金几乎总是不好的。\n成功筹集资金的秘诀是拥有一家好公司。创始人为了尝试过度优化流程而做的其他事情，可能只有 5%的时间真正起作用。投资者正在寻找的是那些不管他们是否投资，都会非常成功，但是在外部资本推动下更快增长的公司。\u0026ldquo;真正成功\u0026quot;这部分非常重要——因为投资者的回报主要取决于大的成功，如果投资者认为你有 100%的机会创建一个价值 1000 万美元的公司，但几乎没有机会建立一个更大的公司，即使估值非常低，他/她可能仍然不会投资。始终解释为什么你可能会取得巨大成功。\n投资者受到两种恐惧的驱动：错过下一个谷歌，和害怕在看似明显愚蠢的事情上亏钱。（对于最好的公司，他们同时害怕这两点。）\n当你的公司状况不够好，无法吸引资本时，试图筹集资金是个坏主意。这会损害声誉并浪费时间。\n如果你在筹款中遇到困难，不要感到沮丧。很多最好的公司都在这方面有过挣扎，因为最好的公司往往在刚开始时看起来表现不佳（并且他们几乎总是看起来不合潮流）。当投资者拒绝你时，相信拒绝而不是理由。并记住，除了“是”的回答，其他任何回答都是“否”——投资者总是以听起来像“也许是”的方式说“不”。\n确保同时进行多个筹款谈判非常重要——不要按照你喜欢的投资者的顺序逐个进行。让投资者采取行动的方式是让他们害怕其他投资者抢走他们的机会。\n把筹款视为一种必要的恶，尽快完成。有些创始人沉迷于筹款；这一定是不好的。最好只让一个创始人做这件事，这样公司不会陷入停滞。\n记住，大多数风险投资人对大多数行业了解不多。数据总是最具说服力的。\n虽然这种情况正在开始改变，但是大多数投资者（Y Combinator 是一个值得注意的例外）不幸的是仍然需要双方都认识的人的介绍才会认真对待你。\n坚持要求简洁明了的条款（复杂的条款会在每一轮中累积并变得更糟），但不要过度优化，尤其是在估值上。估值是一个可以竞争的量化指标，因此创始人喜欢争取最高估值。但是中间融资轮次的估值并不太重要。\n获得的第一笔资金通常最难得到，因此你应该把精力集中在这上面，这通常意味着你要把注意力集中在最喜欢你的投资人身上。始终制定多个计划，其中一个计划是不筹集任何资金，根据兴趣灵活调整——如果你可以把更多的资金用在有用的地方，并且能以合理的条件获得，那就考虑接受它。\n在推销技巧方面，一个重要的关键是使你的故事尽可能清晰和易于理解。当然，最重要的秘诀是真正拥有一家好公司。关于推销中应包含什么内容有很多想法，但是你至少需要有：使命、问题、产品/服务、商业模式、团队、市场和市场增长率以及财务状况。\n请记住，每一轮融资的标准都会变得更高。如果你在种子轮融资中仅仅因为你的演讲吸引人而得到通过，那么在你的 A 轮融资中，如果这种方法不再奏效，你也不应感到惊讶。\n好的投资者确实能增加很多价值。坏的投资者则会大大降低价值。大多数投资者处于中间地带，既没有增加也没有减少价值。只投资少量资金的投资者通常对你没有什么帮助（即警惕所谓的聚会轮融资）。\n优秀的董事会成员是除了用户之外，是公司最好的外部推动力之一，而外部推动力的价值超过大多数创始人的想象。应乐意接受较低的估值，以获得一个愿意积极参与的优秀董事会成员。\n我认为 Paul Graham 的这篇文章[5] 是关于筹款的最佳读物。\n后记 请记住，每一个伟大的创意都有至少一千个人想到。其中一个人才真正获得成功。区别在于执行。这是一项磨人的工作，每个人都希望有其他方法能将“创意”转化为“成功”，但迄今为止还没有人找到方法。\n所以你需要的只是一个伟大的创意，一个优秀的团队，一个出色的产品，以及卓越的执行力。如此简单！;)\n感谢 Paul Buchheit、Erica Carpenter、Brian Chesky、Adam D\u0026rsquo;Angelo、Drew Houston、Justin Kan、Matt Krisiloff、Aaron Levie、Gabriel Leydon、Jessica Livingston、Dustin Moskovitz、David Rusenko 和 Colleen Taylor 为这篇文章提供了宝贵的建议。\n附录 [1] 从事你感兴趣的项目：(https://blog.samaltman.com/projects-and-companies)\n[2] Alex Schultz 为消费品增长提供的一场讲座：(http://startupclass.samaltman.com/courses/lec06/)\n[3] 如何招聘：(http://blog.samaltman.com/how-to-hire)\n[4] Default Alive or Default Dead? (http://paulgraham.com/aord.html)）\n[5] 如何筹款 (http://paulgraham.com/fr.html)\n","permalink":"http://localhost:1313/posts/20230703-startup-playbook/","summary":"\u003cp\u003e作者：Sam Altman\u003c/p\u003e\n\u003cp\u003e原文：https://playbook.samaltman.com/\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSam Altman，OpenAI CEO，经常会在博客中分享他的创业经验与智慧。Sam 曾分享过一篇他的经典文章《创业生存手册：如何有效地打造产品、组建团队并筹集资金》，他提供了一系列富有洞见的指导，帮助我们理解创业的艰难和挑战，并找到成功的途径。无论你是创业新手，还是经验丰富的科技专家，都能在这篇文章中找到有价值的收获。#SamAltman #创业 #科技\u003c/p\u003e\n\u003cp\u003e个人认为，大公司内的小团队或创新团队与创业公司在诸多方面有着密切的相似性。两者都面临着从零开始，将一个概念或想法转化为可行产品或服务的挑战。他们都需要快速地适应和学习，寻找产品与市场的契合点，同时也要不断地迭代产品，以满足不断变化的市场需求。在这两种环境中，都需要强大的领导力和管理才能以及优秀的团队成员。而且，他们都需要面对并管理风险，同时在有限的资源下取得最大的产出。因此，无论你是处于创业环境还是大公司的创新团队，本文都会为你提供极大的价值。Sam Altman的经验和洞察将帮助你更好地理解如何建立并领导一支成功的团队，如何募集资金，如何处理竞争，以及如何建立持久并能够盈利的公司。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e我们在指导初创公司方面投入了大量的时间和精力。尽管一对一的咨询服务始终是不可或缺的，但我们认为，如果能将这些建议中最具普适性的部分提炼出来，整合成一种可以提供给 Y Combinator 以及 YC Fellowship 公司的行动指南，那么我们可能能更好地扩展 Y Combinator 的影响力。\u003c/p\u003e\n\u003cp\u003e于是，我们决定将这个行动指南分享给所有人。\u003c/p\u003e\n\u003cp\u003e这是为初涉创业领域的人士准备的。对于那些阅读过大量 YC 合作伙伴所写的文章的人来说，这里的大部分内容可能并不陌生——我们的目标是将这些内容汇集到一处。\u003c/p\u003e\n\u003cp\u003e关于如何扩大创业公司的规模，我们可能会在后面的部分介绍——本指南主要覆盖了如何创立一家公司的相关内容。\u003c/p\u003e\n\u003cp\u003e作为一家初创公司，你的目标应该是创造出用户热爱的产品。如果你做到了这一点，那么你需要找出如何吸引更多的用户。但是，首要的一步至关重要——想想今天那些真正成功的公司。他们都是从一个让早期用户如此热爱以至于愿意向他人推荐的产品开始的。如果你没有做到这一点，你将会失败。如果你自欺欺人，认为你的用户热爱你的产品，但实际上并非如此，你仍然会失败。\u003c/p\u003e\n\u003cp\u003e初创公司的墓地上满是那些认为可以跳过这一步的人。\u003c/p\u003e\n\u003cp\u003e与其创造出大批用户喜欢的产品，不如首先创造出小部分用户热爱的产品。尽管总的积极感受程度是相同的，但是获得更多用户要比从喜欢提升到热爱要容易得多。\u003c/p\u003e\n\u003cp\u003e关于选择创业，我有一个警告：这是一件很糟糕的事情！我们从 YC 创始人那里得到的最一致的反馈就是，创业比他们想象的要困难，因为他们对初创公司所需的工作量和强度没有一个清晰的认识。加入一家正处于快速发展轨道的早期初创公司通常会是一个更好的经济上的选择。\u003c/p\u003e\n\u003cp\u003e另一方面，创业其实对你的职业并不构成很大的风险——如果你在技术方面真的出类拔萃，即使你失败了，也会有工作机会。大多数人在评估风险方面做得非常糟糕。我个人认为，更具风险的选择是，你有一个你非常热衷的想法或项目，但却选择了一个安全、轻松但又无法满足你的工作。\u003c/p\u003e\n\u003cp\u003e要创办一家成功的初创公司，你需要：一个伟大的想法（包括一个伟大的市场）、一个优秀的团队、一个出色的产品，以及卓越的执行力。\u003c/p\u003e\n\u003ch1 id=\"一一个伟大的想法\"\u003e一、一个伟大的想法\u003c/h1\u003e\n\u003cp\u003e我们会首先询问 YC 公司的创始人们，他们正在开发什么，以及为何要开发这个产品。\u003c/p\u003e\n\u003cp\u003e我们希望得到清晰、简洁的回答。这既是对你作为创始人的评估，也是对创意本身的考察。作为创始人，清晰的思维和沟通能力非常重要——你在招聘、融资、销售等方面都会需要这种能力。一般来说，想法需要清晰才能传播，而复杂的想法几乎总是混乱思维或是人为制造问题的标志。如果你的想法在别人第一次听到时并不能激发起他们的兴趣，那就不妙了。\u003c/p\u003e\n\u003cp\u003e我们还会问，谁对这款产品有着迫切的需求。\u003c/p\u003e\n\u003cp\u003e最好的情况是，你自己就是目标用户。次优的情况是，你对目标用户有着深入的理解。\u003c/p\u003e\n\u003cp\u003e如果公司已经有了用户，我们会问有多少用户，以及这个数字的增长速度如何。我们会尝试找出它的增长速度为何没有更快，尤其是要找出用户是否真的喜欢这个产品。通常，这意味着他们会在没有公司提示的情况下，向他们的朋友推荐这个产品。我们还会问这个公司是否已经产生了收入，如果没有，原因是什么。\u003c/p\u003e\n\u003cp\u003e如果公司还没有用户，我们会尝试找出最小化的首次构建项目，以便对假设进行验证——也就是说，如果我们从完美的体验回溯，我们会尝试找出从何处着手的核心点。\u003c/p\u003e\n\u003cp\u003e检验一个想法的方法是发布它看看会发生什么，或者尝试销售它（例如，在你编写一行代码之前，尝试获得购买意向书）。前者更适用于消费者想法（用户可能会告诉你他们会使用它，但实际上它可能无法脱颖而出），后者更适用于企业想法（如果一个公司告诉你他们会购买某件东西，那么就去制造它）。具体来说，如果你是一家企业公司，我们会首先问你是否有来自客户的购买意向书，表明他们愿意购买你正在开发的产品。对于大多数生物技术和硬科技公司来说，检验一个想法的方式是先和潜在客户交谈，然后找出你可以首先构建的技术的最小子集（MVP）。\u003c/p\u003e\n\u003cp\u003e让你的想法根据用户反馈进行演进非常重要。理解你的用户非常关键——你需要这个能力来评估一个想法，制造一个出色的产品，以及建立一个伟大的公司。\u003c/p\u003e\n\u003cp\u003e如前所述，初创公司的路非常艰难。他们需要很长的时间和持续的高强度努力。创始人和员工需要有共同的使命感来支撑他们。因此，我们会询问创始人为什么想创办这家特定的公司。\u003c/p\u003e\n\u003cp\u003e我们也会询问这家公司如何能够成为一家垄断企业。这有很多不同的词汇来表述，但我们采用的是彼得·蒂尔的说法。显然，我们不希望你的公司在面对竞争对手时采取不道德的行为。相反，我们正在寻找那些随着规模的扩大而变得更强大，且难以复制的企业。\u003c/p\u003e\n\u003cp\u003e最后，我们会询问市场情况。我们会询问它现在的规模，增长速度，以及为什么它在十年后会变得非常大。我们试图理解为什么市场会快速增长，以及为什么这是一个初创公司应该去追逐的好市场。我们喜欢那些刚刚开始出现的大部分人尚未意识到的重大技术变革——大公司在应对这些转变方面做得很糟糕。而有些反直觉的是，最佳策略是在小市场中占据大部分份额。\u003c/p\u003e\n\u003cp\u003e关于想法，我还有一些其他的想法：\u003c/p\u003e\n\u003cp\u003e我们更喜欢全新的东西，而不是衍生的东西。大多数真正的大公司都是从一些根本性的新事物开始的（新的一个可以接受的定义是比原来好 10 倍）。如果同时有十家其他公司以同样的计划开始，而且听起来非常像已经存在的东西，我们会有所怀疑。\u003c/p\u003e\n\u003cp\u003e这其中一个重要的反直觉原因是，做一些新的和困难的事情比做一些衍生的和容易的事情更简单。如果你是前者，人们会想要帮助你，加入你；如果是后者，他们就不会这么做。\u003c/p\u003e\n\u003cp\u003e最好的想法听起来可能不好，但实际上是好的。所以你不需要对你的想法过于保密——如果它真的是一个好想法，那么它可能不会听起来像是值得被窃取的。即使它听起来像是值得被窃取的，拥有好想法的人至少比愿意付出将伟大的想法转化为伟大的公司所需要的工作的人多一千倍。而且，如果你告诉别人你在做什么，他们可能会帮助你。\u003c/p\u003e\n\u003cp\u003e说到告诉别人你的想法——虽然这个想法第一次听到时真的能激发一些人的兴趣是很重要的，但几乎每个人都会告诉你你的想法很糟糕。也许他们是对的。也许他们不擅长评估创业公司，或者他们只是嫉妒。无论原因是什么，这种情况会经常发生，它会让你受伤，即使你认为你不会被它影响，你仍然会被影响。你越早建立自我信念，不被恶意评论者过多拖累，你就会越好。无论你多么成功，恶意评论者永远不会消失。\u003c/p\u003e\n\u003cp\u003e如果你没有创业想法，但是想要创业，怎么办呢？也许你不应该创业。如果首先想法出现，而创业公司是将这个想法推向世界的方式，那会更好。\u003c/p\u003e\n\u003cp\u003e我们曾经尝试过一个实验，为一批有前途但没有创业想法的创始团队提供资金，希望他们在我们资助他们后能找到一个有前景的创业想法。\u003c/p\u003e\n\u003cp\u003e所有的尝试都失败了。我认为问题的一部分是，好的创始人往往有很多好的想法（通常是太多）。但更大的问题是，一旦你有了一个创业公司，你就必须赶快想出一个创业想法，而且因为它已经是一个正式的公司，所以想法不能太疯狂。你最终会得到听起来可行但是衍生的创业想法。这就是转型的危险。\u003c/p\u003e\n\u003cp\u003e因此，最好不要过于积极地强迫自己想出创业想法。相反，去了解许多不同的事物。实践发现问题，看似低效的事物，和主要的技术转变。\u003ca href=\"http://blog.samaltman.com/projects-and-companies\"\u003e从事你感兴趣的项目\u003c/a\u003e\u003csup\u003e[1]\u003c/sup\u003e 。尽可能地接触智慧、有趣的人。在某个时候，创业想法会自然出现的。\u003c/p\u003e\n\u003ch1 id=\"二一个优秀的团队\"\u003e二、一个优秀的团队\u003c/h1\u003e\n\u003cp\u003e平庸的团队无法打造伟大的公司。我们最关注的事情之一就是创始人的实力。当我过去从事后期投资时，我同样非常关注创始人所雇佣的员工的实力。\u003c/p\u003e\n\u003cp\u003e什么样的人才是优秀的创始人？最重要的特征包括无坚不摧的毅力、决心、坚韧不拔和足智多谋。聪明才智和激情也排在非常重要的位置。这些都比经验，当然也比“精通语言 X 和框架 Y”更重要。\u003c/p\u003e\n\u003cp\u003e我们注意到，最成功的创始人都是那种和他们一起工作感觉压力很小的人，因为你觉得“不管是什么事，他/她都能完成。”有时候，你可以凭借纯粹的意志力成功。\u003c/p\u003e\n\u003cp\u003e优秀的创始人具有一些看似矛盾的特征。一个重要的例子是刚柔并济。你要对公司的核心和其使命有强烈的信念，但对于几乎所有其他事情，你还需要保持非常灵活，乐于学习新事物。\u003c/p\u003e\n\u003cp\u003e最优秀的创始人反应异常迅速。这是决策力、专注力、强度和执行能力的指标。\u003c/p\u003e","title":"【译】创业生存手册：如何有效地打造产品、组建团队并筹集资金"},{"content":"第一，把手机放在看不见的地方：手机已成为现代生活中最大的分心来源。为确保专注力，可以关闭工作用即时通讯软件、退出群聊、取关公众号、卸载容易分心的 APP。通过将手机放在看不见的地方或设置勿扰模式，有助于减少干扰。\n第二，寻找一个不易受到干扰和分心的环境：安静、舒适的环境有助于提高专注力。因此，选择图书馆、自习室或安静的咖啡馆进行学习或工作。在家里，可以选择无电视的客厅或书房，避免在卧室或躺在床上学习。\n第三，列出分心物清单：在开始工作或学习之前，列出可能导致分心的事物，如电视、游戏、聊天等。意识到这些干扰因素，有助于在工作或学习时保持专注。\n第四，想想现在做的事情是否值得消耗注意力：在投入精力之前，评估任务的重要性。分清优先级，考虑投入产出比和任务边界，集中注意力在重要且紧急的事情上。对于长期不做的事情，可以考虑委托给别人或机器，或者干脆不做。\n第五，阅读前喝点儿咖啡：适量喝咖啡可以提神醒脑，帮助保持清醒。注意饮用时间和剂量，以免导致失眠。早上喝一杯咖啡，午睡后再喝一杯，既提神又有助于提高新陈代谢。\n第六，准备一支笔：在阅读或学习时，手边准备一支笔，以便随时记录笔记、划重点或想到新的想法。没有笔也没关系，可以使用电脑编辑器或 iOS 的提醒事项软件记录想法，避免因寻找笔而分心。\n第七，觉知自己走神：在工作或学习过程中，可能会不自觉地走神。根据情况采取相应措施。如果是专注力初学者，需要将注意力拉回；若是心流状态高手，分心可能是因为疲劳，此时需要的是适当休息，例如散步或冥想等。\n","permalink":"http://localhost:1313/posts/20230421-7-ways-to-stay-focused/","summary":"\u003cp\u003e第一，把手机放在看不见的地方：手机已成为现代生活中最大的分心来源。为确保专注力，可以关闭工作用即时通讯软件、退出群聊、取关公众号、卸载容易分心的 APP。通过将手机放在看不见的地方或设置勿扰模式，有助于减少干扰。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-1.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第二，寻找一个不易受到干扰和分心的环境：安静、舒适的环境有助于提高专注力。因此，选择图书馆、自习室或安静的咖啡馆进行学习或工作。在家里，可以选择无电视的客厅或书房，避免在卧室或躺在床上学习。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-2.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第三，列出分心物清单：在开始工作或学习之前，列出可能导致分心的事物，如电视、游戏、聊天等。意识到这些干扰因素，有助于在工作或学习时保持专注。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-3.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第四，想想现在做的事情是否值得消耗注意力：在投入精力之前，评估任务的重要性。分清优先级，考虑投入产出比和任务边界，集中注意力在重要且紧急的事情上。对于长期不做的事情，可以考虑委托给别人或机器，或者干脆不做。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-4.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第五，阅读前喝点儿咖啡：适量喝咖啡可以提神醒脑，帮助保持清醒。注意饮用时间和剂量，以免导致失眠。早上喝一杯咖啡，午睡后再喝一杯，既提神又有助于提高新陈代谢。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-5.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第六，准备一支笔：在阅读或学习时，手边准备一支笔，以便随时记录笔记、划重点或想到新的想法。没有笔也没关系，可以使用电脑编辑器或 iOS 的提醒事项软件记录想法，避免因寻找笔而分心。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-6.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第七，觉知自己走神：在工作或学习过程中，可能会不自觉地走神。根据情况采取相应措施。如果是专注力初学者，需要将注意力拉回；若是心流状态高手，分心可能是因为疲劳，此时需要的是适当休息，例如散步或冥想等。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-7.png\"\u003e\u003c/p\u003e","title":"提升专注力的七种方法"},{"content":"为什么 JSON 需要转义？ [TOC]\n适合人群：入门级\nJSON 和 JSON 转义 21 世纪初，Douglas Crockford 寻找一种简便的数据交换格式，能够在服务器之间交换数据。当时通用的数据交换语言是 XML，但是 Douglas Crockford 觉得 XML 的生成和解析都太麻烦，所以他提出了一种简化格式，也就是 JSON。\nJSON 其结构形如 {\u0026quot;云原生\u0026quot;:\u0026quot;Kubernetes\u0026quot;}，可以很直观的使用字符串表示对象或数据结构。对象或数据结构使用序列化接口转换成 JSON 字符串，比如 Golang 中的json.Marshal接口。\n你可能会有这样的疑问：既然 JSON 字符串结构简单，为什么不直接使用字符串拼接的方式，而是要使用 JSON 序列化接口呢？\n结果显而易见：JSON 序列化接口会一并将数据中的特殊字符进行转义，防止其破坏 JSON 原有结构。比如数据中含有双引号\u0026quot;特殊字符，序列化接口便会对双引号进行转义，最终结果类似于{\u0026quot;云原生\u0026quot;:\u0026quot;\\\u0026quot;Kubernetes\\\u0026quot;\u0026quot;}，否则，该场景下直接拼接的字符串会非法。\nJSON 转义 许多程序设计语言把双引号字符（\u0026quot;）用作字符串的分界符。反斜线（\\）转义字符提供了两种方式来把双引号字符置入字符串中，或者是使用转义序列\\\u0026quot;表示单个的\u0026quot;字符本身，而不是作为字符串分界符；或者是直接开始字符\u0026quot;的 16 进制编码值的转义序列\\x22来表示\u0026quot;，也可以使用 8 进制编码值的转义序列，如\\042。\n在 Python 中，下面的代码将会产生语法错误\n1 print \u0026#34;Cloud Navite \u0026#34;Hello World!\u0026#34;.\u0026#34;; 而另一段 Python 代码则会产生符合预期的结果\n1 print \u0026#34;Cloud Navite \\\u0026#34;Hello World!\\\u0026#34;.\u0026#34;; 在 JSON 中，也是如此：当使用 json 接口解析字符串{\u0026quot;云原生\u0026quot;:\u0026quot;\u0026quot;Kubernetes\u0026quot;\u0026quot;}时会报错，而解析经过转义的 JSON 字符串{\u0026quot;云原生\u0026quot;:\u0026quot;\\\u0026quot;Kubernetes\\\u0026quot;\u0026quot;}则会解析成功。\nJSON 转义机制如下图：\nJSON 中字符串针对于特殊字符需要 JSON 转义，它使用反斜杠\\进行转义 JSON 序列包括“\\\\、\\\u0026quot;、\\/、\\b、\\f、\\n、\\r、\\t，或者 Unicode16 进制转义字符（比如\\uD83D\\uDE02) JSON 字符串默认为 UTF-8 编码。可以通过观察前四个八位字节中的空值模式来确定一个八位字节流是 UTF-8、UTF-16（BE 或 LE）还是 UTF-32（BE 或 LE） JSON 语法 在讲具体案例之前，复习一下 JSON 语法，忘记的可以翻阅该章节。\nJSON 语法简单来说就是四条：\n数据在名称/值对中 数据由逗号分隔 花括号保存对象 方括号保存数组 声明：以下使用的对象均来自于以下内容\n1 2 3 4 5 6 7 8 9 10 { \u0026#34;virtualeNB\u0026#34;:[ {\u0026#34;virteNBName\u0026#34;:\u0026#34;virt1\u0026#34;, \u0026#34;virteNBNum\u0026#34;:5, \u0026#34;begineNBID\u0026#34;:0, \u0026#34;beginCtlPort\u0026#34;:6000, \u0026#34;beginDataPort\u0026#34;:7000, \u0026#34;virtIPNum\u0026#34;:5}, {\u0026#34;virteNBName\u0026#34;:\u0026#34;virt2\u0026#34;, \u0026#34;virteNBNum\u0026#34;:10, \u0026#34;begineNBID\u0026#34;:10, \u0026#34;beginCtlPort\u0026#34;:6000, \u0026#34;beginDataPort\u0026#34;:7000, \u0026#34;virtIPNum\u0026#34;:10} ], \u0026#34;eRAN\u0026#34;:[ {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB1\u0026#34;, \u0026#34;eRANID\u0026#34;:3002, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152}, {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB2\u0026#34;, \u0026#34;eRANID\u0026#34;:10000, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152} ] } 1. JSON 名称/值对 JSON 数据的书写格式是：名称：值，这样的一对。即名称在前，该名称的值在冒号后面。例如：\n1 \u0026#34;virteNBName\u0026#34;:\u0026#34;virt1\u0026#34; 这里的名称是\u0026quot;virteNBName\u0026quot;，值是\u0026quot;virt1\u0026quot;，他们均是字符串\n名称和值得类型可以有以下几种：\n数字（整数或浮点数） 字符串（在双引号中） 逻辑值（true 或 false） 数组（在方括号中） 对象（在花括号中） null 2. JSON 数据由逗号分隔 譬如：\n\u0026quot;virteNBName\u0026quot;:\u0026quot;virt1\u0026quot;, \u0026quot;virteNBNum\u0026quot;:5, \u0026quot;begineNBID\u0026quot;:0这几个对象之间就是使用逗号分隔。\n数组内的对象之间当然也是要用逗号分隔。只要是对象之间，分隔就是用逗号,。但是，要注意，对象结束的时候，不要加逗号。数组内也是，例如：\n1 2 3 4 [ {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB1\u0026#34;, \u0026#34;eRANID\u0026#34;:3002, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152}, {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB2\u0026#34;, \u0026#34;eRANID\u0026#34;:10000, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152}, ] 上面这个就是错误的，因为在数组中，两个对象之间需要逗号，但是到这个数组末尾了，不需要加逗号了。\n3. JSON 花括号保存对象 对象可以包含多个名称/值对，如：\n1 {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB1\u0026#34;, \u0026#34;eRANID\u0026#34;:3002, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152} 这一点也容易理解，与这条 JavaScript 语句等价：\n1 2 3 4 \u0026#34;eRANName\u0026#34; = \u0026#34;eNB1\u0026#34; \u0026#34;eRANID\u0026#34; = 3002 \u0026#34;ctlPort\u0026#34; = 36412 \u0026#34;dataPort\u0026#34; = 2152 4. JSON 方括号保存数组 数组可包含多个对象：\n1 2 3 4 \u0026#34;eRAN\u0026#34;:[ {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB1\u0026#34;, \u0026#34;eRANID\u0026#34;:3002, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152}, {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB2\u0026#34;, \u0026#34;eRANID\u0026#34;:10000, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152} ] 在上面的例子中，对象 \u0026ldquo;eRAN\u0026rdquo; 是包含 2 个对象的数组。每个对象代表一条基站的记录。\n上面四条规则，就是 JSON 格式的所有内容。\n案例 一个由特殊字符导致 JSON 格式的 Nginx 访问日志/日志系统的 BUG 访问日志 access_log：Nginx 会将每个客户端访问其本身的请求以日志的形式记录到指定的日志文件里，以供分析用户的浏览或请求行为，或者可以用于快速分析故障所在。此功能由 ngx_http_log_module 模块负责。\n在 Nginx 文件中，访问日志 access.log 配置形如下文的格式：\n1 2 3 4 log_format main \u0026#39;$remote_addr [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log logs/access.log main buffer=32k; logs/access.log 指定访问日志路径 log_format 定义访问日志格式 buffer=32k 是日志缓冲区大小 访问日志 access_log 其通过格式化输出 nginx 变量以及拼接字符串的方式打印日志。\n在云原生时代，Nginx 运维的最佳实践之一就是将 Nginx 访问日志采用 EFK 架构 (Elasticsearch+Filebeat+Kibana)，通过收集和管理访问日志，提供统一的检索功能，这样做不仅可以提高诊断效率，而且可以全面了解系统情况，避免被动事后救火。\n通常，为了方便分析，会将 Nginx 访问日志输出为 JSON 字符串，其配置如下：\n1 2 3 4 log_format main \u0026#39;{\u0026#34;remote_addr\u0026#34;:\u0026#34;$remote_addr\u0026#34;,\u0026#34;time_local\u0026#34;:\u0026#34;$time_local\u0026#34;,\u0026#34;request\u0026#34;:\u0026#34;$request\u0026#34;,\u0026#39; \u0026#39;\u0026#34;status\u0026#34;:\u0026#34;$status\u0026#34;,\u0026#34;bytes_sent\u0026#34;:\u0026#34;$bytes_sent\u0026#34;,\u0026#34;http_referer\u0026#34;:\u0026#34;$http_referer\u0026#34;,\u0026#39; \u0026#39;\u0026#34;http_user_agent\u0026#34;:\u0026#34;$http_user_agent\u0026#34;,\u0026#34;http_x_forwarded_for\u0026#34;:\u0026#34;$http_x_forwarded_for\u0026#34;}\u0026#39;; access_log logs/access.log main buffer=32k; 乍一看，这样的配置没什么问题。但再深入思考，生成 JSON 字符串的标准做法是调用 JSON 序列化接口，而 Nginx 访问日志是直接格式化拼接字符串，故一旦访问日志中出现特殊字符（比如双引号\u0026quot;），就会导致整行访问日志解析出错，影响接下来的日志分析系统对访问日志的数据查找、服务诊断和数据分析。\n为了解决 JSON 转义的问题，Nginx 在 1.11.8 版本中给日志格式 log_format 新增了序列化配置 escape=json，其格式为：\n1 2 3 4 Syntax:\tlog_format name [escape=default|json|none] string ...; Default:\tlog_format combined \u0026#34;...\u0026#34;; Context:\thttp 当配置为 escape=json 时，JSON 字符串中所有不允许的字符都将被转义：\n\u0026quot;和/字符被转义为/\u0026quot;和// 值小于 32 的字符被转义“\\n”, “\\r”, “\\t”, “\\b”, “\\f”, or “\\u00XX” 所以，正确的 log_format 配置为\n1 2 3 log_format main escape=json \u0026#39;{\u0026#34;remote_addr\u0026#34;:\u0026#34;$remote_addr\u0026#34;,\u0026#34;time_local\u0026#34;:\u0026#34;$time_local\u0026#34;,\u0026#34;request\u0026#34;:\u0026#34;$request\u0026#34;,\u0026#39; \u0026#39;\u0026#34;status\u0026#34;:\u0026#34;$status\u0026#34;,\u0026#34;bytes_sent\u0026#34;:\u0026#34;$bytes_sent\u0026#34;,\u0026#34;http_referer\u0026#34;:\u0026#34;$http_referer\u0026#34;,\u0026#39; \u0026#39;\u0026#34;http_user_agent\u0026#34;:\u0026#34;$http_user_agent\u0026#34;,\u0026#34;http_x_forwarded_for\u0026#34;:\u0026#34;$http_x_forwarded_for\u0026#34;}\u0026#39;; 当然，因为 JSON 转义导致的 BUG 不止这一个，近期遇到的另一个 BUG 也是因为前人实现的代码实现不规范，其逻辑是将收到的请求以字符串拼接的方式构造 JSON 串，导致一旦请求中带有双引号\u0026quot;或其他特殊字符，就必定出现 BUG。\nJSON 与其他格式的比较 JSON vs XML JSON 与 XML 最大的不同在于 XML 是一个完整的标记语言，而 JSON 不是。这使得 XML 在程序判读上需要比较多的功夫。主要的原因在于 XML 的设计理念与 JSON 不同。XML 利用标记语言的特性提供了绝佳的延展性（如 XPath），在数据存储，扩展及高级检索方面具备对 JSON 的优势，而 JSON 则由于比 XML 更加小巧，以及浏览器的内建快速解析支持，使得其更适用于网络数据传输领域。\n从转义角度来看，XML 标签名不能包含任何字符!\u0026quot;#$%\u0026amp;'()*+,/;\u0026lt;=\u0026gt;?@[\\]^{|}~，也不能包含空格字符，不能以-、.或数字数字开头，而 JSON 键可以（引号和反斜杠必须转义）。\nJSON vs YAML JSON 格式简单易上手，但没有了 YAML 的一目了然，尤其是 JSON 数据很长的时候，会让人陷入繁琐复杂的数据节点查找中。通常我会使用在线 JSON 格式化工具，来更方便的对 JSON 数据进行节点查找和解析。\n个人认为，YAML 几乎将 JSON 秒成渣渣，这里直接引用 YAML 官方文档 关于 YAML 的总结：\nYAML 的可读性好 YAML 和脚本语言的交互性好 YAML 使用实现语言的数据类型 YAML 有一个一致的信息模型 YAML 易于实现 YAML 可以基于流来处理 YAML 表达能力强，扩展性好 YAML 可以写注释 There Is One More Thing 从结构上看，不仅仅是 JSON、YAML、XML，大部分或者所有的数据（data）最终都可以分解成三种类型：\n第一种类型是标量（scalar），也就是一个单独的字符串（string）或数字（numbers），比如\u0026quot;云原生\u0026quot;这个单独的词。\n第二种类型是序列（sequence），也就是若干个相关的数据按照一定顺序并列在一起，又叫做数组（array）或列表（List），比如[\u0026quot;Kubernetes\u0026quot;, \u0026quot;Istio\u0026quot;]。\n第三种类型是映射（mapping），也就是一个名/值对（Name/value），即数据有一个名称，还有一个与之相对应的值，这又称作散列（hash）或字典（dictionary），比如\u0026quot;CloudNative\u0026quot;: \u0026quot;Kubernetes\u0026quot;。\n参考 JSON 官网 JSON 维基百科 数据类型和 Json 格式\u0026ndash;阮一峰 YAML Ain’t Markup Language (YAML™) Version 1.1 World Wide Web Consortium 自己最初了解 JSON 时总结的一篇文章 ","permalink":"http://localhost:1313/posts/json-and-escaping/","summary":"\u003ch1 id=\"为什么-json-需要转义\"\u003e为什么 JSON 需要转义？\u003c/h1\u003e\n\u003cp\u003e[TOC]\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e适合人群：入门级\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"json-和-json-转义\"\u003eJSON 和 JSON 转义\u003c/h2\u003e\n\u003cp\u003e21 世纪初，Douglas Crockford 寻找一种简便的数据交换格式，能够在服务器之间交换数据。当时通用的数据交换语言是 XML，但是 Douglas Crockford 觉得 XML 的生成和解析都太麻烦，所以他提出了一种简化格式，也就是 JSON。\u003c/p\u003e\n\u003cp\u003eJSON 其结构形如 \u003ccode\u003e{\u0026quot;云原生\u0026quot;:\u0026quot;Kubernetes\u0026quot;}\u003c/code\u003e，可以很直观的使用字符串表示对象或数据结构。对象或数据结构使用序列化接口转换成 JSON 字符串，比如 Golang 中的\u003ccode\u003ejson.Marshal\u003c/code\u003e接口。\u003c/p\u003e\n\u003cp\u003e你可能会有这样的疑问：既然 JSON 字符串结构简单，为什么不直接使用字符串拼接的方式，而是要使用 JSON 序列化接口呢？\u003c/p\u003e\n\u003cp\u003e结果显而易见：JSON 序列化接口会一并将数据中的特殊字符进行转义，防止其破坏 JSON 原有结构。比如数据中含有双引号\u003ccode\u003e\u0026quot;\u003c/code\u003e特殊字符，序列化接口便会对双引号进行转义，最终结果类似于\u003ccode\u003e{\u0026quot;云原生\u0026quot;:\u0026quot;\\\u0026quot;Kubernetes\\\u0026quot;\u0026quot;}\u003c/code\u003e，否则，该场景下直接拼接的字符串会非法。\u003c/p\u003e\n\u003ch3 id=\"json-转义\"\u003eJSON 转义\u003c/h3\u003e\n\u003cp\u003e许多程序设计语言把双引号字符\u003ccode\u003e（\u0026quot;）\u003c/code\u003e用作字符串的分界符。反斜线\u003ccode\u003e（\\）\u003c/code\u003e转义字符提供了两种方式来把双引号字符置入字符串中，或者是使用转义序列\u003ccode\u003e\\\u0026quot;\u003c/code\u003e表示单个的\u003ccode\u003e\u0026quot;\u003c/code\u003e字符本身，而不是作为字符串分界符；或者是直接开始字符\u003ccode\u003e\u0026quot;\u003c/code\u003e的 16 进制编码值的转义序列\u003ccode\u003e\\x22\u003c/code\u003e来表示\u003ccode\u003e\u0026quot;\u003c/code\u003e，也可以使用 8 进制编码值的转义序列，如\u003ccode\u003e\\042\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在 Python 中，下面的代码将会产生语法错误\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprint \u0026#34;Cloud Navite \u0026#34;Hello World!\u0026#34;.\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e而另一段 Python 代码则会产生符合预期的结果\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprint \u0026#34;Cloud Navite \\\u0026#34;Hello World!\\\u0026#34;.\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在 JSON 中，也是如此：当使用 json 接口解析字符串\u003ccode\u003e{\u0026quot;云原生\u0026quot;:\u0026quot;\u0026quot;Kubernetes\u0026quot;\u0026quot;}\u003c/code\u003e时会报错，而解析经过转义的 JSON 字符串\u003ccode\u003e{\u0026quot;云原生\u0026quot;:\u0026quot;\\\u0026quot;Kubernetes\\\u0026quot;\u0026quot;}\u003c/code\u003e则会解析成功。\u003c/p\u003e","title":"为什么 JSON 需要转义"},{"content":" 生日的时候飞去成都参观成都博物馆正在展出的西方绘画史，庆祝生日，感慨良多，记录下自己的感想\n画作主题受限于思想。被神学/基督教控制的文艺复兴初期，画作只能是神祗，颜料也尽显奢华；随着西方文艺复兴给人们带来的思想解放，大家的主题不再局限于神祗，更注重于人本身，比如充满情趣的田园画，肖像画/自画像；随着科技进步，颜料可以带出门，派生出风景画派；大家生活水平提升，画画不再是一定是谋生手段（为达官贵人画肖像画可以填饱肚子），可以画自己想画的东西，主题百花齐放。 吃饱了才能搞艺术。西方文艺复兴以来其艺术中心的变迁：意大利/罗马（文艺复兴）-\u0026gt;荷兰黄金时代（荷兰小画派）-\u0026gt;巴黎-\u0026gt;西欧以及美国百花齐放百家争鸣，其实也对应的是西方十四世纪以来的经济中心的变迁：从东西罗马纵横捭阖，荷兰/西班牙黄金一代/大航海时代，法兰西帝国和日不落帝国，第一次和第二次工业革命英国和美国变为世界的两极。 一个人的成功不仅要靠自身的努力和天分，还要考虑历史的进程以及找对师父。要有天分，很多大家早在十几岁二十几岁其绘画天赋便锋芒毕露；要靠个人努力，大部分在展上的画师无一不是耗费了巨大的精力投入在艺术创作中，年少成名的画师也是十一二岁便要在画师家里当学徒，兢兢业业；要站在巨人的肩膀上，要师从名师/大家，名画家的师父往往也很有名，自学成才的很少，比如高更（月亮与六便士的主角）。 画作充满美感。个人艺术细胞不足，对于艺术性的感受就是，不论是端庄严谨的教会画、轻松愉快的田园画、栩栩如生的肖像画和风景画、百花齐放百家争鸣的现实主义、浪漫主义、象征主义画作，都很美。在场看跟在网上或书上看的感觉完全不一样。 参考链接 欧洲绘画五百年丨高更：被画画拐上“歧路”，却抵达了艺术的神坛\n","permalink":"http://localhost:1313/posts/history-of-western-painting/","summary":"\u003cblockquote\u003e\n\u003cp\u003e生日的时候飞去成都参观成都博物馆正在展出的西方绘画史，庆祝生日，感慨良多，记录下自己的感想\u003c/p\u003e\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e画作主题受限于思想。被神学/基督教控制的文艺复兴初期，画作只能是神祗，颜料也尽显奢华；随着西方文艺复兴给人们带来的思想解放，大家的主题不再局限于神祗，更注重于人本身，比如充满情趣的田园画，肖像画/自画像；随着科技进步，颜料可以带出门，派生出风景画派；大家生活水平提升，画画不再是一定是谋生手段（为达官贵人画肖像画可以填饱肚子），可以画自己想画的东西，主题百花齐放。\u003c/li\u003e\n\u003cli\u003e吃饱了才能搞艺术。西方文艺复兴以来其艺术中心的变迁：意大利/罗马（文艺复兴）-\u0026gt;荷兰黄金时代（荷兰小画派）-\u0026gt;巴黎-\u0026gt;西欧以及美国百花齐放百家争鸣，其实也对应的是西方十四世纪以来的经济中心的变迁：从东西罗马纵横捭阖，荷兰/西班牙黄金一代/大航海时代，法兰西帝国和日不落帝国，第一次和第二次工业革命英国和美国变为世界的两极。\u003c/li\u003e\n\u003cli\u003e一个人的成功不仅要靠自身的努力和天分，还要考虑历史的进程以及找对师父。要有天分，很多大家早在十几岁二十几岁其绘画天赋便锋芒毕露；要靠个人努力，大部分在展上的画师无一不是耗费了巨大的精力投入在艺术创作中，年少成名的画师也是十一二岁便要在画师家里当学徒，兢兢业业；要站在巨人的肩膀上，要师从名师/大家，名画家的师父往往也很有名，自学成才的很少，比如高更（月亮与六便士的主角）。\u003c/li\u003e\n\u003cli\u003e画作充满美感。个人艺术细胞不足，对于艺术性的感受就是，不论是端庄严谨的教会画、轻松愉快的田园画、栩栩如生的肖像画和风景画、百花齐放百家争鸣的现实主义、浪漫主义、象征主义画作，都很美。在场看跟在网上或书上看的感觉完全不一样。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-1.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-2.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-3.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-4.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-5.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-6.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-7.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-8.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-9.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-10.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-11.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-12.jpg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"参考链接\"\u003e参考链接\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://mp.weixin.qq.com/s/48y2HfTmFE8g_ALr4eIhBA\"\u003e欧洲绘画五百年丨高更：被画画拐上“歧路”，却抵达了艺术的神坛\u003c/a\u003e\u003c/p\u003e","title":"《欧洲绘画五百年》参观有感"},{"content":"从 nginx 热更新聊一聊 Golang 中的热更新 静态语言在服务器编程时都会遇到这样的问题：如何保证已有的连接服务不中断同时又升级版本？ 最近花了点时间看了下 nginx 热更新代码流程，想了下结合之前的经验一并总结下热更新\n热更新是什么？ 举个例子，你现在在坐卡车，卡车开到了 150KM/H\n然后，有个轮胎，爆了\n然后，司机说，你就直接换吧，我不停车。你小心点换\n嗯。就这个意思\n网关中的热更新 服务程序热更新这个问题在层 7 网关中尤其严重，网关中承载着大量的请求，包括 HTTP/HTTPS 短连接、HTTP/HTTPS 长连接、甚至是 websocket 这种超长连接（websocket 通常连接时间会很长，十几分钟到几天不等）。服务进程热更新是非常有必要的。\n网关作为一个基础组件，需要保证高可用，是很难将其先停下来再更新的；\n有人说可以使用负载均衡将需要更新的组件先隔离，再停机更新，但是如果是一个很小的集群没有负载均衡呢，又或者这样手动一台一台升级也着实麻烦，部分情况下就算隔离了也不过是不会有新的连接过来，旧的连接/请求依旧需要处理完成，否则就会造成部分服务不可用\n不过实际上线上操作是集群隔离加热更新一起操作\nnginx 热更新 (Upgrading Executable on the Fly) nginx [engine x] 是 Igor Sysoev 编写的一个 HTTP 和反向代理服务器，另外它也可以作为邮件代理服务器。 它已经在众多流量很大的俄罗斯网站上使用了很长时间，这些网站包括 Yandex、Mail.Ru、VKontakte，以及 Rambler。据 Netcraft 统计，在 2012 年 8 月份，世界上最繁忙的网站中有 11.48%使用 Nginx 作为其服务器或者代理服务器。\nNginX 采用 Master/Worker 的多进程模型，Master 进程负责整个 NginX 进程的管理。Nginx 的模块化、热更新、Http 处理流程、日志等机制都非常经典。这里将会简要介绍一下热更新的机制\nnginx 热升级流程 步骤 1、升级 nginx 二进制文件，需要先将新的 nginx 可执行文件替换原有旧的 nginx 文件，然后给 nginx master 进程发送 USR2 信号，告知其开始升级可执行文件；nginx master 进程会将老的 pid 文件增加。oldbin 后缀，然后拉起新的 master 和 worker 进程，并写入新的 master 进程的 pid。\n1 2 3 4 5 6 7 8 9 UID PID PPID C STIME TTY TIME CMD root 4584 1 0 Oct17 ? 00:00:00 nginx: master process /usr/local/apigw/apigw_nginx/nginx root 12936 4584 0 Oct26 ? 00:03:24 nginx: worker process root 12937 4584 0 Oct26 ? 00:00:04 nginx: worker process root 12938 4584 0 Oct26 ? 00:00:04 nginx: worker process root 23692 4584 0 21:28 ? 00:00:00 nginx: master process /usr/local/apigw/apigw_nginx/nginx root 23693 23692 3 21:28 ? 00:00:00 nginx: worker process root 23694 23692 3 21:28 ? 00:00:00 nginx: worker process root 23695 23692 3 21:28 ? 00:00:00 nginx: worker process 步骤 2、在此之后，所有工作进程（包括旧进程和新进程）将会继续接受请求。这时候，需要发送 WINCH 信号给 nginx master 进程，master 进程将会向 worker 进程发送消息，告知其需要进行 graceful shutdown，worker 进程会在连接处理完之后进行退出。\n1 2 3 4 5 6 7 UID PID PPID C STIME TTY TIME CMD root 4584 1 0 Oct17 ? 00:00:00 nginx: master process /usr/local/apigw/apigw_nginx/nginx root 12936 4584 0 Oct26 ? 00:03:24 nginx: worker process root 12937 4584 0 Oct26 ? 00:00:04 nginx: worker process root 12938 4584 0 Oct26 ? 00:00:04 nginx: worker process root 23692 4584 0 21:28 ? 00:00:00 nginx: master process /usr/local/apigw/apigw_nginx/nginx #若旧的 worker 进程还需要处理连接，则 worker 进程不会立即退出，需要待消息处理完后再退出 步骤 3、经过一段时间之后，将会只会有新的 worker 进程处理新的连接。\n注意，旧 master 进程并不会关闭它的 listen socket；因为如果出问题后，需要回滚，master 进程需要法重新启动它的 worker 进程。\n步骤 4、如果升级成功，则可以向旧 master 进程发送 QUIT 信号，停止老的 master 进程；如果新的 master 进程（意外）退出，那么旧 master 进程将会去掉自己的 pid 文件的。oldbin 后缀。\nnginx 热更新相关信号 master 进程相关信号\n1 2 3 USR2\t升级可执行文件 WINCH\t优雅停止 worker 进程 QUIT\t优雅停止 master 进程 worker 进程相关信号\n1 2 TERM, INT\t快速退出进程 QUIT\t优雅停止进程 nginx 相关代码走读 1、USR2 流程 master 收到 USR2 信号后，会拉起新的 master nginx 进程；\n新的 master 进程拉起新的 worker 进程；\n最终，老的 worker 进程和新的 worker 进程共用一个 listen socket，接受连接\n若打开了 REUSEPORT 开关，则 socket 继承情况会有些区别，感兴趣的可以自行翻看代码\n2、WINCH 流程 master 进程收到 WINCH 信号后，会给各个 worker 进程发送 QUIT 信号，让其优雅退出；master 进程并不再处理新的连接。\nworker graceful shutdown 流程，关闭 listen socket，不再处理新的连接；待已有连接处理完后，清理连接，退出进程。\n3、QUIT 流程 master graceful shutdown 流程，没什么好说的\nnginx 升级过程中若出现问题如何回滚？ nginx 热升级 QA 1、如何防止多次可执行文件触发热更新？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 相关代码 ngx_signal_handler --\u0026gt; case ngx_signal_value(NGX_CHANGEBIN_SIGNAL): if (ngx_getppid() == ngx_parent || ngx_new_binary \u0026gt; 0) { /* * Ignore the signal in the new binary if its parent is * not changed, i.e. the old binary\u0026#39;s process is still * running. Or ignore the signal in the old binary\u0026#39;s * process if the new binary\u0026#39;s process is already running. */ action = \u0026#34;, ignoring\u0026#34;; ignore = 1; break; } ngx_change_binary = 1; action = \u0026#34;, changing binary\u0026#34;; break; 若老的 nginx 还在，nginx 无法进行热更新二进制文件\n2、nginx 升级过程中，发现新的可执行文件出现问题该如何回滚？\na、向旧 master 进程发送 HUP 信号。旧进程将启动新的 worker 进程，而且不会重新读取配置。之后，通过向新的主 master 进程发送 QUIT 信号，可以优雅地关闭新的 master 和 worker 进程。 b、将 TERM 信号发送到新的 master 进程，然后新的 master 进程将向其 worker 进程发送一条消息，让它们立即退出，这种退出不是 graceful shutdown。当新的 master 进程退出时，旧的 master 进程将启动新的 worker 进程。 c、如果新的进程没有退出，则应该向它们发送终止 KILL 信号。当新的 master 进程退出时，旧的 master 进程将启动新的工作进程。 3、什么是 graceful shutdown\n本文中的 graceful shutdown 是指 server 不再处理新的连接，但是进程不会立即退出，待所有连接断开后再退出进程。\n总结一下个人在 nginx 二进制文件热升级时用的命令 1 2 3 4 5 6 7 8 9 10 11 cd /usr/local/nginx cp nginx nginx_bak mv /data/nginx/nginx ./nginx #需要使用 mv 来更新二进制文件 ./nginx -t #尝试启动，查看其加载配置文件等初始化功能是否正常 netstat -anp | grep -E \u0026#34;80|443\u0026#34; | grep nginx #检查连接状态 kill -USR2 `cat /usr/local/nginx/nginx.pid` #升级 nginx 可执行文件，此时会有两组 nginx master 和 worker 进程 kill -WINCH `cat /usr/local/nginx/nginx.pid.oldbin` #新的可执行文件启动 ok，且能够正常处理数据流，告知老的 master 进程去通知其 worker 进程进行优雅退出 ... kill -QUIT `cat /usr/local/nginx/nginx.pid.oldbin` #待所有的老的 nginx worker 进程优雅退出后（处理完连接），停止老的 master 进程 TODO：nginx 还会有依赖的 so 文件的热升级\u0026ndash;其实更应该属于后台进程的 so 文件热升级流程，我在使用它的时候也踩过坑\u0026ndash;主要原因还是操作不规范，对 so 其加载运行原理不够熟悉导致\n热升级 实际上，静态语言后端 server 有一套固定的热升级（单进程）流程，其基本流程如下：\n若需要支持热升级的是多进程，那么 nginx 的热升级过程是最值得参考的\n1、通过调用 fork/exec 启动新的版本的进程，\n2、子进程调用接口获取从父进程继承的 socket 文件描述符重新监听 socket\n3、在此过程中，不会对用户请求造成任何中断。\nnginx 的热升级流程也是类似，只不过由于 nginx 工作是多进程，故它会先启动新版本的一组 master/worker 进程；\n然后停止老的 worker 进程，让其不处理连接，由新的 worker 进程来处理连接；\n升级完毕后，即可退出老的 master 进程，热升级完成。\n热更新 热更新目标：\n1、正在处理中的连接/服务/请求不能立即中断，需要继续提供服务 2、socket 对用户来说要保持可用，可以接受新的请求 直接沿用上篇的思路，热更新（单进程）流程，其基本流程如下：\n1、用新的 bin 文件去替换老的 bin 文件 2、发送信号告知 server 进程（通常是 USR2 信号），进行平滑升级 3、server 进程收到信号后，通过调用 fork/exec 启动新的版本的进程 4、子进程调用接口获取从父进程继承的 socket 文件描述符重新监听 socket 5、老的进程不再接受请求，待正在处理中的请求处理完后，进程自动退出 6、子进程托管给 init 进程 我们可以按照这个思路完成一个简单的可以热更新的 http server\n简易的 http server 首先，我们需要一个最简单的 http server\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func main() { fmt.Println(\u0026#34;Hello World!\u0026#34;) var err error // 注册 http 请求的处理方法 http.HandleFunc(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\u0026#34;Hello world!\u0026#34;)) }) // 在 8086 端口启动 http 服务，其内部有一个循环 accept 8086 端口 // 每当新的 HTTP 请求过来则开一个协程处理 err = http.ListenAndServe(\u0026#34;localhost:8086\u0026#34;, nil) if err != nil { log.Println(err) } } fork 一个新的进程 在 go 语言里面可以有很多种方法 fork 一个新的进程，但是在这里我更倾向于推荐 exec.Command 接口来启动一个新的进程。因为 Cmd struct 中有一个 ExtraFiles 变量，子进程可以通过它直接继承文件描述符 fd。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func forkProcess() error { var err error files := []*os.File{gListen.File()} //demo only one //.File() path := \u0026#34;/Users/yousa/work/src/graceful-restart-demo/graceful-restart-demo\u0026#34; args := []string{ \u0026#34;-graceful\u0026#34;, } env := append( os.Environ(), \u0026#34;ENDLESS_CONTINUE=1\u0026#34;, ) env = append(env, fmt.Sprintf(`ENDLESS_SOCKET_ORDER=%s`, \u0026#34;0,127.0.0.1\u0026#34;)) cmd := exec.Command(path, args...) //cmd := exec.Command(path, \u0026#34;-graceful\u0026#34;, \u0026#34;true\u0026#34;) cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr cmd.ExtraFiles = files cmd.Env = env err = cmd.Start() if err != nil { log.Fatalf(\u0026#34;Restart: Failed to launch, error: %v\u0026#34;, err) return err } return nil } 代码浅析：\n在上面的 files 是存储父进程的文件描述符，path 的内容是新的要替换的可执行文件的路径。\n重要的一点是，.File() 返回一个 dup(2) 的文件描述符。这个重复的文件描述符不会设置 FD_CLOEXEC 标志，这个文件描述符操作容易出错，容易被在子进程中被错误关闭。\n在其他语言（或者 go 里面）里面你可能通过使用命令行将文件描述符传递给子进程，在这里比较推荐使用 ExtraFile 传递 fd。不过 ExtraFiles 在 windows 中不支持。\nargs 中传递的-graceful 参数是告诉子进程这是优雅热升级的一部分，这样子进程可以通过它知道，自己需要重用套接字而不是重新打开一个新的套接字\n子进程初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 func main() { fmt.Println(\u0026#34;Hello World!\u0026#34;) ... var gracefulChild bool var netListen net.Listener var err error args := os.Args ... if len(args) \u0026gt; 1 \u0026amp;\u0026amp; args[1] == \u0026#34;-graceful\u0026#34; { gracefulChild = true } else { gracefulChild = false } fmt.Println(\u0026#34;gracefulChild:\u0026#34;, gracefulChild) if gracefulChild { //重用套接字 log.Print(\u0026#34;main: Listening to existing file descriptor 3.\u0026#34;) f := os.NewFile(3, \u0026#34;\u0026#34;) netListen, err = net.FileListener(f) } else { log.Print(\u0026#34;main: Listening on a new file descriptor.\u0026#34;) netListen, err = net.Listen(\u0026#34;tcp\u0026#34;, gServer.Addr) } if err != nil { log.Fatal(err) return } ... } args 用于解析入参，gracefulChild 表示进程自己是否是子进程（对应到 fork 中的-graceful）（这里更推荐 flag.BoolVar，但是写 demo 的时候使用起来有些问题，故临时使用 args）\nnet.FileListener 重用套接字，ExtraFiles 中传递的套接字，从 idx 3 的位置开始获取。\n给父进程发送信号停止父进程 1 2 3 4 5 6 7 8 9 10 11 12 func main() { //init ... if gracefulChild { syscall.Kill(syscall.Getppid(), syscall.SIGTERM) log.Println(\u0026#34;Graceful shutdown parent process.\u0026#34;) } //start http server. ... } 给父进程发送 graceful shutdown 信号\n优雅停止父进程 等待请求超时或者处理完成退出进程\n第一眼给人感觉，不知道该如何下手做热升级。\n我们需要去跟踪连接，故想到的是有没有钩子函数来解决连接的 accept 和 close，让人觉得 Golang 标准 http 包没有提供任何钩子来处理 Accept() 和 Close()，这里恰恰是 golang 的 interface 的魅力所在。\ninterface 基础知识请自行补充\n我们需要一个 sync.WaitGroup 来跟踪已经打开的连接，每新 accept 一个连接则让其加一，每当连接断开则减一。定义一个 listener struct 并实现相应的 Accept()、Close()、Addr() 等方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 type demoListener struct { net.Listener stopped bool stop chan error } func newDemoListener(listen net.Listener) (demoListen *demoListener) { demoListen = \u0026amp;demoListener{ Listener: listen, stop: make(chan error), } return } func (listen *demoListener) Accept() (conn net.Conn, err error) { conn, err = listen.Listener.Accept() if err != nil { return } conn = demoConn{Conn: conn} gWg.Add(1) return } func (listen *demoListener) Close() error { if listen.stopped { return syscall.EINVAL } listen.stopped = true return listen.Listener.Close() //停止接受新的连接 } //get fd func (listen *demoListener) File() *os.File { // returns a dup(2) - FD_CLOEXEC flag *not* set tcpListen := listen.Listener.(*net.TCPListener) fd, _ := tcpListen.File() return fd } demoListener 定义的时候，通过匿名结构体（可以理解为是一种组合），继承了 net.Listener 的结构和方法，下面的 Accept 和 Close 则重载了 net.Listener 的 Accept 和 Close 方法。\nListener 在每个 Accept() 上都增加了一个等待组。\nnewDemoListener() 是 Listener 的构造函数。\nFile() 方法是从 Listener 中获取文件描述符 fd\n当然，我们需要重载连接 net.Conn 的 Close() 方法，在连接断开时，将 wg 减一\n1 2 3 4 5 6 7 8 9 10 11 12 type demoConn struct { net.Conn } func (conn demoConn) Close() error { err := conn.Conn.Close() if err == nil { gWg.Done() } return nil } 最后，有可能客户端已经很长时间不发消息了，但是他不主动断开连接；为了避免这种情况，server 端通常认为这种是连接超时，在一定时间后会将连接关闭，故初始化 http.Server 时比较建议这样：\n1 2 3 4 5 6 7 gServer = \u0026amp;http.Server{ Addr: \u0026#34;0.0.0.0:8086\u0026#34;, ReadTimeout: 60 * time.Second, WriteTimeout: 60 * time.Second, MaxHeaderBytes: 1 \u0026lt;\u0026lt; 16, Handler:\tdemoHandler{}, } 注意：若使用的 go 版本在 1.8 版本以上（包括），http 包已经支持优雅退出，直接调用 Shutdown() 接口即可，更为简单。\n关闭 listener 连接和监控信号的部分这里便不再赘述，文末附有源码，有兴趣可以看看。\n测试结果：\n启动 server，发送 http 请求\n1 2 3 4 5 6 7 YOUSALI-MB0:~ yousa$ curl -i http://localhost:8086 HTTP/1.1 200 OK Date: Mon, 05 Nov 2018 08:11:17 GMT Content-Length: 17 Content-Type: text/plain; charset=utf-8 Hello Tencent! 发送 usr2 信号给 server\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 YOUSALI-MB0:graceful-restart-demo yousa$ ps -ef | grep grace 501 50199 41134 0 4:10 下午 ttys002 0:00.01 ./graceful-restart-demo 501 50252 44808 0 4:11 下午 ttys003 0:00.00 grep grace YOUSALI-MB0:graceful-restart-demo yousa$ kill -USR2 50199 YOUSALI-MB0:graceful-restart-demo yousa$ ps -ef | grep grace 501 50253 1 0 4:11 下午 ttys002 0:00.01 /Users/yousa/work/src/graceful-restart-demo/graceful-restart-demo -graceful 501 51460 44808 0 4:37 下午 ttys003 0:00.00 grep grace ## 终端打印 Hello World! gracefulChild: false 2018/11/05 16:10:16 main: Listening on a new file descriptor. 2018/11/05 16:11:10 50199 Received SIGUSR2. Hello World! gracefulChild: true 2018/11/05 16:11:10 main: Listening to existing file descriptor 3. 2018/11/05 16:11:10 Graceful shutdown parent process. 2018/11/05 16:11:10 50199 Received SIGTERM. 待升级后发送消息\n1 2 3 4 5 6 7 YOUSALI-MB0:~ yousa$ curl -i http://localhost:8086 HTTP/1.1 200 OK Date: Mon, 05 Nov 2018 08:11:44 GMT Content-Length: 14 Content-Type: text/plain; charset=utf-8 Happy 20th birthday! 遇到的问题 1、翻了下代码，并没有看到父进程如何退出？是怎样的流程？\n先看一下 http ListenAndServe 接口，它会调用 net.Listen 和 serve.Serve 两个函数，net.Listen 是 listen 端口。\nServe 代码如下，它是一个 for 循环，Accept 一个新的连接后会用一个新的协程来处理请求；当 listen 的端口被关闭或者异常后，该 Serve 循环便会跳出\n另外，也可以在这里看到，如果让 http server 接入协程池则可以重载 http.Server 的 Serve，在收到新的连接后，从协程池中分配一个协程供新的连接使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func (srv *Server) Serve(l net.Listener) error { defer l.Close() var tempDelay time.Duration // how long to sleep on accept failure for { rw, e := l.Accept() if e != nil { if ne, ok := e.(net.Error); ok \u0026amp;\u0026amp; ne.Temporary() { if tempDelay == 0 { tempDelay = 5 * time.Millisecond } else { tempDelay *= 2 } if max := 1 * time.Second; tempDelay \u0026gt; max { tempDelay = max } srv.logf(\u0026#34;http: Accept error: %v; retrying in %v\u0026#34;, e, tempDelay) time.Sleep(tempDelay) continue } return e } tempDelay = 0 c, err := srv.newConn(rw) if err != nil { continue } c.setState(c.rwc, StateNew) // before Serve can return go c.serve() } } 再看一下 shutdownProcess 函数，故在这里关闭 listen socket 后，http Serve 处理请求的主循环便会退出\n1 2 3 4 5 6 func shutdownProcess() error { gServer.SetKeepAlivesEnabled(false) gListen.Close() log.Println(\u0026#34;shutdownProcess success.\u0026#34;) return nil } 将 listen socket 关闭后，main 函数中的 gServer.Serve(gListen) 便会退出，但实际上已有的连接/服务并没有处理完成，需要使用 waitgroup 等待连接处理完成后，进程再退出。\ngithub 上的已有开源方案 解决 golang http server 热更新问题，有了基本的思路之后，想到的是去 github 看下有没有稳定的解决方案。找到了如下三个库：\nfvbock/endless - Zero downtime restarts for golang HTTP and HTTPS servers. (for golang 1.3+) facebookgo/grace - Grace provides a library that makes it easy to build socket based servers that can be gracefully terminated \u0026amp; restarted (that is, without dropping any connections). jpillora/overseer - Overseer is a package for creating monitorable, gracefully restarting, self-upgrading binaries in Go (golang) 其实除了这些外，还有一些支持热更新的库，但是更新时间过老，在这里就不作讨论了。 当然，非常火爆的框架比如 beego 等，也支持热升级/gracefun shutdown，但是由于嵌入到了 beego 中，故本章中不作讨论，有兴趣的可以自行去看看。\n实现浅析 我们使用官方的例子来简单分析其流程并简单比较其异同\n1、各个开源库 demo 代码 demo 代码较为冗长，很影响阅读观感，故贴在了最后的附录中\n2、对比 操作步骤：\n编译 demo 示例，启动示例进程，记录其 pid 修改内容 (Hello Tencent 初始内容，修改为 Happy 20th Birthday！且请求处理均需要 sleep 10-20 秒），重新构建。 发送请求，发送热升级信号，再发送请求，对比两次请求内容 对比进程热升级前后的 pid，是否与之前一致 结果对比\n第三方库 第一次请求返回 第二次请求返回 操作前进程 pid 操作后进程 pid facebookgo/grace Hello Tencent Happy 20th Birthday！ 41992 41998 fvbock/endless Hello Tencent Happy 20th Birthday！ 41200 41520 jpillora/overseer Hello Tencent Happy 20th Birthday！ 43424 43424 原理浅析：\ngrace 和 endless 的热升级方法与本文重点讲述的方法一致，基本是 fork 一个子进程，子进程 listen 端口，父进程优雅退出，这里便不再赘述\noverseer 的热升级与 grace/endless 有些不同，由于作者很久不更新了（差不多 1-2 年），也找不到比较好的介绍文章，故这里只能简要贴一下其 github 上对 overseer 的原理介绍。由于不是本文核心介绍内容，放在附录中。 overseer 用一个主进程管理平滑重启，子进程处理连接，保持主进程 pid 不变；\n优缺点对比：\ngrace 库支持 net tcp 热升级以及 http 热升级，endless 仅支持 http 热升级 grace 库接入第三方 http server 较麻烦（比如 fasthttp、gin 等）；endless 接入则只需要替换 ListenAndServe 即可（endless 继承/重写了 Serve 方法），通用性更好 grace 库功能强大，但是稍微复杂；endless 库更为简洁 由于我的项目使用了 gin 作为 http 框架，故考虑到快速集成，我选择了 endless 该框架\n第三方库的对比经验： 主观因素：个人品味，是否要自己造轮子，朋友的推荐也对个人的判断也有很大影响； 客观因素：集成复杂度，内存管理，是否有大量 I/O 访问/耗性能访问，错误处理，工具参考文档等。\n集成起来也非常方便，类似于如下：\n1 2 3 4 5 6 func main() { router := gin.Default() router.GET(\u0026#34;/\u0026#34;, handler) // [...] endless.ListenAndServe(\u0026#34;:8086\u0026#34;, router) } 问题拓展 我其实又想了这些问题，也想抛出来与大家一起讨论\n1、简单的 http server 很容易升级，若监听了多个端口该如何进行热升级？\n2、若 go server 使用 tls 服务（其他也类似），如何进行升级？\n3、go http server 在容器场景下是否需要平滑热升级？平滑停机是否足够？如果平滑停机足够的话，那么如何结合 docker+k8s 进行热升级？\n个人猜测了一下，这种场景下，后端服务应该会有冗余部署，前端通过负载均衡/elb/tgw 等中间层访问，或者使用 consul 之类的服务注册发现机制，串行重启或者分批次重启，来做到不停服升级服务\n总结 热更新目标：\n1、正在处理中的连接/服务/请求不能立即中断，需要继续提供服务 2、socket 对用户来说要保持可用，可以接受新的请求 直接沿用上篇的思路，热更新（单进程）流程，其基本流程如下：\n1、用新的 bin 文件去替换老的 bin 文件 2、发送信号告知 server 进程（通常是 USR2 信号），进行平滑升级 3、server 进程收到信号后，通过调用 fork/exec 启动新的版本的进程 4、子进程调用接口获取从父进程继承的 socket 文件描述符重新监听 socket 5、老的进程不再接受请求，待正在处理中的请求处理完后，进程自动退出 6、子进程托管给 init 进程 参考 https://grisha.org/blog/2014/06/03/graceful-restart-in-golang/ https://blog.csdn.net/u012058778/article/details/78705536 http://gulu-dev.com/post/2014-07-28-tech-evaluation https://golang.org/doc/go1.8#http_shutdown golang1.8 升级日志，支持 gracefulshutdown 代码附录 1、facebookgo/grace 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // Command gracedemo implements a demo server showing how to gracefully // terminate an HTTP server using grace. package main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/facebookgo/grace/gracehttp\u0026#34; ) var ( address0 = flag.String(\u0026#34;a0\u0026#34;, \u0026#34;:48567\u0026#34;, \u0026#34;Zero address to bind to.\u0026#34;) address1 = flag.String(\u0026#34;a1\u0026#34;, \u0026#34;:48568\u0026#34;, \u0026#34;First address to bind to.\u0026#34;) address2 = flag.String(\u0026#34;a2\u0026#34;, \u0026#34;:48569\u0026#34;, \u0026#34;Second address to bind to.\u0026#34;) now = time.Now() ) func main() { flag.Parse() gracehttp.Serve( \u0026amp;http.Server{Addr: *address0, Handler: newHandler(\u0026#34;Zero \u0026#34;)}, \u0026amp;http.Server{Addr: *address1, Handler: newHandler(\u0026#34;First \u0026#34;)}, \u0026amp;http.Server{Addr: *address2, Handler: newHandler(\u0026#34;Second\u0026#34;)}, ) } func newHandler(name string) http.Handler { mux := http.NewServeMux() mux.HandleFunc(\u0026#34;/sleep/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { duration, err := time.ParseDuration(r.FormValue(\u0026#34;duration\u0026#34;)) if err != nil { http.Error(w, err.Error(), 400) return } time.Sleep(duration) fmt.Fprintf( w, \u0026#34;%s started at %s slept for %d nanoseconds from pid %d.\\n\u0026#34;, name, now, duration.Nanoseconds(), os.Getpid(), ) }) return mux } 2、fvbock/endless 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/fvbock/endless\u0026#34; \u0026#34;github.com/gorilla/mux\u0026#34; ) func handler(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\u0026#34;WORLD!\u0026#34;)) } func main() { mux1 := mux.NewRouter() mux1.HandleFunc(\u0026#34;/hello\u0026#34;, handler). Methods(\u0026#34;GET\u0026#34;) err := endless.ListenAndServe(\u0026#34;localhost:4242\u0026#34;, mux1) if err != nil { log.Println(err) } log.Println(\u0026#34;Server on 4242 stopped\u0026#34;) os.Exit(0) } 3、jpillora/overseer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/jpillora/overseer\u0026#34; \u0026#34;github.com/jpillora/overseer/fetcher\u0026#34; ) //see example.sh for the use-case // BuildID is compile-time variable var BuildID = \u0026#34;0\u0026#34; //convert your \u0026#39;main()\u0026#39; into a \u0026#39;prog(state)\u0026#39; //\u0026#39;prog()\u0026#39; is run in a child process func prog(state overseer.State) { fmt.Printf(\u0026#34;app#%s (%s) listening...\\n\u0026#34;, BuildID, state.ID) http.Handle(\u0026#34;/\u0026#34;, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { d, _ := time.ParseDuration(r.URL.Query().Get(\u0026#34;d\u0026#34;)) time.Sleep(d) fmt.Fprintf(w, \u0026#34;app#%s (%s) says hello\\n\u0026#34;, BuildID, state.ID) })) http.Serve(state.Listener, nil) fmt.Printf(\u0026#34;app#%s (%s) exiting...\\n\u0026#34;, BuildID, state.ID) } //then create another \u0026#39;main\u0026#39; which runs the upgrades //\u0026#39;main()\u0026#39; is run in the initial process func main() { overseer.Run(overseer.Config{ Program: prog, Address: \u0026#34;:5001\u0026#34;, Fetcher: \u0026amp;fetcher.File{Path: \u0026#34;my_app_next\u0026#34;}, Debug: false, //display log of overseer actions }) } 4、overseer overseer uses the main process to check for and install upgrades and a child process to run Program.\nThe main process retrieves the files of the listeners described by Address/es.\nThe child process is provided with these files which is converted into a Listener/s for the Program to consume.\nAll child process pipes are connected back to the main process.\nAll signals received on the main process are forwarded through to the child process.\nFetcher runs in a goroutine and checks for updates at preconfigured interval. When Fetcher returns a valid binary stream (io.Reader), the master process saves it to a temporary location, verifies it, replaces the current binary and initiates a graceful restart.\nThe fetcher.HTTP accepts a URL, it polls this URL with HEAD requests and until it detects a change. On change, we GET the URL and stream it back out to overseer. See also fetcher.S3.\nOnce a binary is received, it is run with a simple echo token to confirm it is a overseer binary.\nExcept for scheduled restarts, the active child process exiting will cause the main process to exit with the same code. So, overseer is not a process manager.\n[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-nJwx0ZVC-1609089892264)(https://camo.githubusercontent.com/45df268c40025baddcafea70a437537c8c67b31c/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f316f31326e6a597952494c79335544733245364a7a794a456c3070735534655059694d5132306a6975564f592f7075623f773d35363626683d323834)]\n参考 http://tengine.taobao.org/nginx_docs/cn/docs/control.html\n附加技巧 nginx 如何在指定时间内热重启？\nenvoy 热重启流程跟一般golang进程、nginx进程又有什么异同？\n","permalink":"http://localhost:1313/posts/server-hot-update/","summary":"\u003ch1 id=\"从-nginx-热更新聊一聊-golang-中的热更新\"\u003e从 nginx 热更新聊一聊 Golang 中的热更新\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e静态语言在服务器编程时都会遇到这样的问题：如何保证已有的连接服务不中断同时又升级版本？\n最近花了点时间看了下 nginx 热更新代码流程，想了下结合之前的经验一并总结下热更新\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"热更新是什么\"\u003e热更新是什么？\u003c/h2\u003e\n\u003cp\u003e举个例子，你现在在坐卡车，卡车开到了 150KM/H\u003c/p\u003e\n\u003cp\u003e然后，有个轮胎，爆了\u003c/p\u003e\n\u003cp\u003e然后，司机说，你就直接换吧，我不停车。你小心点换\u003c/p\u003e\n\u003cp\u003e嗯。就这个意思\u003c/p\u003e\n\u003ch2 id=\"网关中的热更新\"\u003e网关中的热更新\u003c/h2\u003e\n\u003cp\u003e服务程序热更新这个问题在层 7 网关中尤其严重，网关中承载着大量的请求，包括 HTTP/HTTPS 短连接、HTTP/HTTPS 长连接、甚至是 websocket 这种超长连接（websocket 通常连接时间会很长，十几分钟到几天不等）。服务进程热更新是非常有必要的。\u003c/p\u003e\n\u003cp\u003e网关作为一个基础组件，需要保证高可用，是很难将其先停下来再更新的；\u003c/p\u003e\n\u003cp\u003e有人说可以使用负载均衡将需要更新的组件先隔离，再停机更新，但是如果是一个很小的集群没有负载均衡呢，又或者这样手动一台一台升级也着实麻烦，部分情况下就算隔离了也不过是不会有新的连接过来，旧的连接/请求依旧需要处理完成，否则就会造成部分服务不可用\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不过实际上线上操作是集群隔离加热更新一起操作\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"nginx-热更新-upgrading-executable-on-the-fly\"\u003enginx 热更新 (Upgrading Executable on the Fly)\u003c/h2\u003e\n\u003cp\u003enginx [engine x] 是 Igor Sysoev 编写的一个 HTTP 和反向代理服务器，另外它也可以作为邮件代理服务器。 它已经在众多流量很大的俄罗斯网站上使用了很长时间，这些网站包括 Yandex、Mail.Ru、VKontakte，以及 Rambler。据 Netcraft 统计，在 2012 年 8 月份，世界上最繁忙的网站中有 11.48%使用 Nginx 作为其服务器或者代理服务器。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNginX 采用 Master/Worker 的多进程模型，Master 进程负责整个 NginX 进程的管理。Nginx 的模块化、热更新、Http 处理流程、日志等机制都非常经典。这里将会简要介绍一下热更新的机制\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"nginx-热升级流程\"\u003enginx 热升级流程\u003c/h3\u003e\n\u003cp\u003e步骤 1、升级 nginx 二进制文件，需要先将新的 nginx 可执行文件替换原有旧的 nginx 文件，然后给 nginx master 进程发送 USR2 信号，告知其开始升级可执行文件；nginx master 进程会将老的 pid 文件增加。oldbin 后缀，然后拉起新的 master 和 worker 进程，并写入新的 master 进程的 pid。\u003c/p\u003e","title":"从 nginx 热更新聊一聊 Golang 中的热更新"},{"content":"C/C++ 版本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 int CNetOperations::GetLocalIp(__be32 *pLocalIp, const char* pIfName) { if (!pLocalIp || !pIfName) { return (-EINVAL); } int iSocket; iSocket = socket(AF_INET, SOCK_DGRAM, 0); if (iSocket \u0026lt; 0) { return (-errno); } struct ifreq stIfr; memset(stIfr.ifr_name, 0x0, sizeof(stIfr.ifr_name)); strcpy(stIfr.ifr_name, pIfName); int iRet; iRet = ioctl(iSocket, SIOCGIFADDR, \u0026amp;stIfr); if (iRet \u0026lt; 0) { close(iSocket); return (-errno); } (*pLocalIp) = ((struct sockaddr_in *)\u0026amp;stIfr.ifr_addr)-\u0026gt;sin_addr.s_addr; close(iSocket); return 0; } golang 版本 shell 版本 最初的想法\n进一步改进\n1 localip=`ip route get 1 | awk \u0026#39;{print $NF;exit}\u0026#39;` 局限性\nlua/Openresty 版本 依赖 luasocket 库的写法\n1 xxx 原理\n局限性\n使用 ffi 调用的方式实现\n1 xxx 原理\n局限性\n","permalink":"http://localhost:1313/posts/how-to-get-localip/","summary":"\u003ch2 id=\"cc-版本\"\u003eC/C++ 版本\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-30\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-30\"\u003e30\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-31\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-31\"\u003e31\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ne\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eCNetOperations\u003c/span\u003e\u003cspan class=\"p\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eGetLocalIp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__be32\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epLocalIp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epIfName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003epLocalIp\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003epIfName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ne\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esocket\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOCK_DGRAM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eifreq\u003c/span\u003e \u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifr_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifr_name\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifr_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epIfName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ne\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eiRet\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eiRet\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSIOCGIFADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiRet\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epLocalIp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esockaddr_in\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifr_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esin_addr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003es_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"golang-版本\"\u003egolang 版本\u003c/h2\u003e\n\u003ch2 id=\"shell-版本\"\u003eshell 版本\u003c/h2\u003e\n\u003cp\u003e最初的想法\u003c/p\u003e","title":"获取服务器本机 IP 的不同语言实现"},{"content":"perf 使用教程 perf 简介 Perf 是 Linux kernel 中的系统性能优化工具，perf 基本原理的话是在 CPU 的 PMU register 中 Get/Set performance counters 来获得诸如 instructions executed，cache-missed suffered，branches mispredicted 等信息。\nperf 本身的工具有很多，这里主要介绍个人在查询程序性能问题时使用的一些工具 包括 perf list、perf stat、perf record、perf report\nperf list 使用 perf 之前肯定要知道 perf 能监控哪些性能指标吧？那么就要使用 perf list 进行查看，通常使用的指标是 cpu-clock/task-clock 等，具体要根据需要来判断\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ perf list List of pre-defined events (to be used in -e): cpu-cycles OR cycles [Hardware event] instructions [Hardware event] … cpu-clock [Software event] task-clock [Software event] context-switches OR cs [Software event] … ext4:ext4_allocate_inode [Tracepoint event] kmem:kmalloc [Tracepoint event] module:module_load [Tracepoint event] workqueue:workqueue_execution [Tracepoint event] sched:sched_{wakeup,switch} [Tracepoint event] syscalls:sys_{enter,exit}_epoll_wait [Tracepoint event] … 不同内核版本列出的结果不一样多。.. 不过基本是够用的，但是无论多少，我们可以基本将其分为三类\nHardware Event 是由 PMU 硬件产生的事件，比如 cache 命中，当您需要了解程序对硬件特性的使用情况时，便需要对这些事件进行采样 Software Event 是内核软件产生的事件，比如进程切换，tick 数等 Tracepoint event 是内核中的静态 tracepoint 所触发的事件，这些 tracepoint 用来判断程序运行期间内核的行为细节，比如 slab 分配器的分配次数等 具体监控哪个变量的话，譬如使用后面的 perf report 工具，则加**-e 监控指标**，如\n1 2 perf report -e cpu-clock ls 监控运行 ls 命令时的 cpu 时钟占用监控 perf stat 刚刚知道了可以监控哪些事件，但是事件这么多，该如何下手呢？\n解决问题的时候有条理才解决的更快，所以面对一个性能问题的时候，最好采用自顶向下的策略。先整体看看该程序运行时各种统计事件的大概，再针对某些方向深入细节。而不要一下子扎进琐碎细节，会一叶障目的。\n整体监测代码性能就需要使用 perf stat 这个工具，该工具主要是从全局上监控，可以看到程序导致性能瓶颈主要是什么原因。因为不同的程序导致其性能瓶颈的原因不同，譬如有些程序慢是由于计算量大，而有些程序是由于频繁的 I/O 导致性能瓶颈，他们的优化方式不同。perf stat 通过概括精简的方式提供被调试程序运行的整体情况和汇总数据。\n使用方法\n1 2 3 perf stats 程序 譬如 perf stat ./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw 程序运行完之后，然后使用 ctrl+c 来终止程序（若程序自动终止则不用），之后，perf 便会打印出监控事件结果，类似结果如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Performance counter stats for \u0026#39;./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw\u0026#39;: 1773.651816 task-clock (msec) # 0.016 CPUs utilized 79,054 context-switches # 0.045 M/sec 757 cpu-migrations # 0.427 K/sec 16,368 page-faults # 0.009 M/sec \u0026lt;not supported\u0026gt; cycles \u0026lt;not supported\u0026gt; stalled-cycles-frontend \u0026lt;not supported\u0026gt; stalled-cycles-backend \u0026lt;not supported\u0026gt; instructions \u0026lt;not supported\u0026gt; branches \u0026lt;not supported\u0026gt; branch-misses 109.795527410 seconds time elapsed 1773.651816 task-clock 是指程序运行期间占用了 xx 的任务时钟周期，该值高，说明程序的多数时间花费在 CPU 计算上而非 IO 79,054 context-switches 是指程序运行期间发生了 xx 次上下文切换，记录了程序运行过程中发生了多少次进程切换，频繁的进程切换是应该避免的。（有进程进程间频繁切换，或者内核态与用户态频繁切换） 757 cpu-migrations 是指程序运行期间发生了 xx 次 CPU 迁移，即用户程序原本在一个 CPU 上运行，后来迁移到另一个 CPU 16,368 page-faults 是指程序发生了 xx 次页错误 其他可以监控的譬如分支预测、cache 命中等 perf record 前面通过 perf stat 获得了程序性能瓶颈类型，之后，假设你已经知道哪个进程需要优化**（若不知道则需要使用 perf top 进行进一步监控，这里由于个人没有使用过，所以不作介绍）**，那么下一步就是对该进程进行细粒度的分析，分析在长长的程序代码中究竟是哪几段代码、哪几个函数需要修改呢？这便需要使用 perf record 记录单个函数级别的统计信息，并使用 perf report 来显示统计结果。\n调优应该将注意力集中到百分比高的热点代码片段上，假如一段代码只占用整个程序运行时间的 0.1%，就算将其优化到仅剩一条机器指令，恐怕也只能将整体的程序性能提高 0.1%。\n好钢用在刀刃上\n仍以之前的 gw 程序为例，假设要监控的指标为 cpu-clock\n1 perf record -e cpu-clock -g ./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw -g 选项是告诉 perf record 额外记录函数的调用关系，因为原本 perf record 记录大都是库函数，直接看库函数，大多数情况下，你的代码肯定没有标准库的性能好对吧？除非是针对产品进行特定优化，所以就需要知道是哪些函数频繁调用这些库函数，通过减少不必要的调用次数来提升性能 -e cpu-clock 指 perf record 监控的指标为 cpu 周期 程序运行完之后，perf record 会生成一个名为 perf.data 的文件（缺省值），如果之前已有，那么之前的 perf.data 文件会变为 perf.data.old 文件 获得这个 perf.data 文件之后，我们其实还不能直接查看，下面就需要 perf report 工具进行查看 perf report 前面通过perf record工具获得了某一进程的指标监控数据 perf.data，下面就需要使用perf report工具查看该文件\n使用方法\n1 2 3 perf report -i perf-report 生成的文件 譬如 perf report -i perf.data 上面使用perf record获得的数据的结果如下\n1 2 3 + 4.93% gw libcurl-gnutls.so.4.3.0 [.] 0x000000000001e1e0 + 4.93% gw [kernel.kallsyms] [k] eventfd_write + 2.96% gw [kernel.kallsyms] [k] ipt_do_table + 2.46% gw [kernel.kallsyms] [k] xen_hypercall_event_channel_op ? 1.97% gw libc-2.19.so [.] _int_malloc + 1.97% gw libc-2.19.so [.] __clock_gettime ? 1.97% gw gw [.] nwGtpv2cHandleInitialReq(NwGtpv2cStack*, unsigned int, MqPackage\u0026amp;) ? 1.97% gw [kernel.kallsyms] [k] pvclock_clocksource_read ? 1.97% gw [kernel.kallsyms] [k] ip_finish_output ? 1.97% gw [kernel.kallsyms] [k] ixgbevf_xmit_frame + 1.48% gw [kernel.kallsyms] [k] kmem_cache_alloc_trace ? 1.48% gw [kernel.kallsyms] [k] sk_run_filter [.] 代表该调用属于用户态，若自己监控的进程为用户态进程，那么这些即主要为用户态的 cpu-clock 占用的数值，[k] 代表属于内核态的调用。 也许有的人会奇怪为什么自己完全是一个用户态的程序为什么还会统计到内核态的指标？一是用户态程序运行时会受到内核态的影响，若内核态对用户态影响较大，统计内核态信息可以了解到是内核中的哪些行为导致对用户态产生影响；二则是有些用户态程序也需要依赖内核的某些操作，譬如 I/O 操作 /+ 4.93% gw libcurl-gnutls.so.4.3.0 [.] 0x000000000001e1e0 ，左边的加号代表 perf 已经记录了该调用关系，按 enter 键可以查看调用关系，不过由于这个是动态库里的函数，基本查看到的都是一些二进制数值：P perf 监控 gw 进程结果记录到很多内核调用，说明 gw 进程在运行过程中，有可能被内核态任务频繁中断，应尽量避免这种情况，对于这个问题我的解决办法是采用绑核，譬如机器有 8 个 CPU，那么我就绑定内核操作、中断等主要在 0-5CPU，GW 由于有两个线程，分别绑定到 6、7CPU 上 实践 这里使用我在实验中程序在某一场景 CPU 占用率飙升的问题作为示例\n1.perf stat 整体定位性能瓶颈 CPU 飙升场景与正常场景使用 perf stat 对比差异\n执行\n1 perf stat ./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw CPU 飙升场景\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Performance counter stats for \u0026#39;./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw\u0026#39;: 1773.651816 task-clock (msec) # 0.016 CPUs utilized 79,054 context-switches # 0.045 M/sec 757 cpu-migrations # 0.427 K/sec 16,368 page-faults # 0.009 M/sec \u0026lt;not supported\u0026gt; cycles \u0026lt;not supported\u0026gt; stalled-cycles-frontend \u0026lt;not supported\u0026gt; stalled-cycles-backend \u0026lt;not supported\u0026gt; instructions \u0026lt;not supported\u0026gt; branches \u0026lt;not supported\u0026gt; branch-misses 109.795527410 seconds time elapsed 正常场景\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Performance counter stats for \u0026#39;./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw\u0026#39;: 1186.728996 task-clock (msec) # 0.018 CPUs utilized 78,284 context-switches # 0.066 M/sec 69 cpu-migrations # 0.058 K/sec 16,368 page-faults # 0.014 M/sec \u0026lt;not supported\u0026gt; cycles \u0026lt;not supported\u0026gt; stalled-cycles-frontend \u0026lt;not supported\u0026gt; stalled-cycles-backend \u0026lt;not supported\u0026gt; instructions \u0026lt;not supported\u0026gt; branches \u0026lt;not supported\u0026gt; branch-misses 64.456003339 seconds time elapsed 通过对比可以发现：\ntask-clock 异常场景比正常场景占用率高许多，说明程序 CPU 占用率提升 cpu-migrations 异常场景比正常场景占用率高许多，说明进程发生了较频繁的从一个 CPU 迁移到另一个 CPU 2.perf record+perf report 单点定位进程本身问题 通过 perf stat 整体上监控进程性能问题之后，使用 perf record 等对进程本身进行监控\n执行\n1 2 3 perf record -e task-clock -g ./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw perf report -i perf.data 结果如下\n1 2 3 4 5 6 7 8 9 root@ip-172-31-24-250:/home/ubuntu/EPC/gw# + 4.93% gw libcurl-gnutls.so.4.3.0 [.] 0x000000000001e1e0 + 4.93% gw [kernel.kallsyms] [k] eventfd_write + 2.96% gw [kernel.kallsyms] [k] ipt_do_table + 2.46% gw [kernel.kallsyms] [k] xen_hypercall_event_channel_op ? 1.97% gw libc-2.19.so [.] _int_malloc + 1.97% gw libc-2.19.so [.] __clock_gettime ? 1.97% gw gw [.] nwGtpv2cHandleInitialReq(NwGtpv2cStack*, unsigned int, MqPackage\u0026amp;) ? 1.97% gw [kernel.kallsyms] [k] pvclock_clocksource_read ? 1.97% gw [kernel.kallsyms] [k] ip_finish_output ? 1.97% gw [kernel.kallsyms] [k] ixgbevf_xmit_frame + 1.48% gw [kernel.kallsyms] [k] kmem_cache_alloc_trace ? 1.48% gw [kernel.kallsyms] [k] sk_run_filter ? 1.48% gw [kernel.kallsyms] [k] fib_table_lookup ? 1.48% gw [kernel.kallsyms] [k] _raw_spin_unlock_irqrestore ? 0.99% gw libpthread-2.19.so [.] __libc_fcntl + 0.99% gw libc-2.19.so [.] vfprintf ? 0.99% gw libc-2.19.so [.] malloc ? 0.99% gw libc-2.19.so [.] free ? 0.99% gw libc-2.19.so [.] inet_ntop ? 0.99% gw libc-2.19.so [.] inet_pton + 0.99% gw [vdso] [.] 0x0000000000000ca1 ? 0.99% gw [kernel.kallsyms] [k] __do_softirq ? 0.99% gw [kernel.kallsyms] [k] ksize ? 0.99% gw [kernel.kallsyms] [k] kfree + 0.99% gw [kernel.kallsyms] [k] fput ? 0.99% gw [kernel.kallsyms] [k] d_alloc_pseudo ? 0.99% gw [kernel.kallsyms] [k] sys_socket ? 0.99% gw [kernel.kallsyms] [k] datagram_poll ? 0.99% gw [kernel.kallsyms] [k] skb_network_protocol + 0.99% gw [kernel.kallsyms] [k] __dev_queue_xmit libcurl-gnutls.so.4.3.0 它本身功能是一个数据上报，但是占用较高的 CPU，说明调用该库存在问题（代码本身问题），需要对调用该库的代码进行检查 libc-2.19.so [.] _int_malloc 这是常用的 malloc 操作，由于对代码比较熟悉，在这个过程中不应该有这么多次申请内存，说明代码本身有问题，需要对申请动态内存的代码进行检查 __clock_gettime 这个是由于计时需要，需要频繁获取时间，通常是指 gettimeofday() 函数 整个统计显示有很多 task-clock 占用是由于** kernel.kallsyms **导致，同时也验证了对 perf stat 获得的数据的初步判断，即 CPU 飙升也与频繁的 CPU 迁移（内核态中断用户态操作）导致，解决办法是采用 CPU 绑核 perf 工具很好用，要善用这个利器\n自我提问 perf 是什么？ perf 能解决什么样的问题？什么样的问题无法解决？为什么？ 如何理解 perf 的探针？在 C++/C/Go/Rust 场景下，这些探针有代表什么含义呢？ perf 是如何统计的？perf 的探测机制是什么？为什么 perf 的探测对性能影响有限？ 使用上，perf 可以衡量哪些指标？针对于什么语言？针对于哪些问题可以评估？可以绘制哪些图？ 后起之秀 bcc/ebpf 与 perf 的取舍？ perf 的哪些机制值得学习？如何使用 perf？能够用 perf 解决什么样的问题？perf 对应指标分别是什么？如何理解这些指标？perf 解决问题的技巧？perf 是如何统计数据的？perf 为什么统计数据可以比较高性能？perf 的局限性有哪些？perf 与后起之秀的 pk？ 一些具体的场景和案例 ","permalink":"http://localhost:1313/posts/perf/","summary":"\u003ch1 id=\"perf-使用教程\"\u003eperf 使用教程\u003c/h1\u003e\n\u003ch2 id=\"perf-简介\"\u003eperf 简介\u003c/h2\u003e\n\u003cp\u003ePerf 是 Linux kernel 中的系统性能优化工具，perf 基本原理的话是在 CPU 的 PMU register 中 Get/Set performance counters 来获得诸如 instructions executed，cache-missed suffered，branches mispredicted 等信息。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eperf 本身的工具有很多，这里主要介绍个人在查询程序性能问题时使用的一些工具\n包括 perf list、perf stat、perf record、perf report\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"perf-list\"\u003eperf list\u003c/h2\u003e\n\u003cp\u003e使用 perf 之前肯定要知道 perf 能监控哪些性能指标吧？那么就要使用 perf list 进行查看，通常使用的指标是 cpu-clock/task-clock 等，具体要根据需要来判断\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e \u003cspan class=\"n\"\u003eperf\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003edefined\u003c/span\u003e \u003cspan class=\"n\"\u003eevents\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"n\"\u003eused\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ecycles\u003c/span\u003e \u003cspan class=\"n\"\u003eOR\u003c/span\u003e \u003cspan class=\"n\"\u003ecycles\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eHardware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eHardware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e…\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eclock\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSoftware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eclock\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSoftware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eswitches\u003c/span\u003e \u003cspan class=\"n\"\u003eOR\u003c/span\u003e \u003cspan class=\"n\"\u003ecs\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSoftware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e…\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003eext4\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eext4_allocate_inode\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003ekmem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ekmalloc\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003emodule\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003emodule_load\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003eworkqueue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eworkqueue_execution\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003esched\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003esched_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ewakeup\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"k\"\u003eswitch\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003esyscalls\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003esys_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eenter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"n\"\u003e_epoll_wait\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e…\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e不同内核版本列出的结果不一样多。.. 不过基本是够用的，但是无论多少，我们可以基本将其分为三类\u003c/p\u003e","title":"perf 入门教程（待补充和完善）"},{"content":" 本文主要分享火焰图使用技巧，介绍 systemtap 的原理机制，如何使用火焰图快速定位性能问题原因，同时加深对 systemtap 的理解。\n让我们回想一下，曾经作为编程新手的我们是如何调优程序的？通常是在没有数据的情况下依靠主观臆断来瞎蒙，稍微有些经验的同学则会对差异代码进行二分或者逐段调试。这种定位问题的方式不仅耗时耗力，而且还不具有通用性，当遇到其他类似的性能问题时，需要重复踩坑、填坑，那么如何避免这种情况呢？\n俗语有云：“工欲善其事，必先利其器。”个人认为，程序员定位性能问题也需要一件“利器”。 如同医生给病人看病，需要依靠专业的医学工具（比如 X 光片、听诊器等）进行诊断，最后依据医学工具的检验结果快速精准地定位出病因所在。性能调优工具（比如 perf / gprof 等）之于性能调优就像 X 光之于病人一样，它可以一针见血地指出程序的性能瓶颈。\n但是常用的性能调优工具 perf 等，在呈现内容上只能单一地列出调用栈或者非层次化的时间分布，不够直观。这里我推荐大家配合使用火焰图，它将 perf 等工具采集的数据呈现得更为直观。\n初识火焰图 火焰图（Flame Graph）是由 Linux 性能优化大师 Brendan Gregg 发明的，和所有其他的 profiling 方法不同的是，火焰图以一个全局的视野来看待时间分布，它从底部往顶部，列出所有可能导致性能瓶颈的调用栈。\n火焰图整个图形看起来就像一个跳动的火焰，这就是它名字的由来。\n火焰图有以下特征（这里以 on-cpu 火焰图为例）：\n每一列代表一个调用栈，每一个格子代表一个函数； 纵轴展示了栈的深度，按照调用关系从下到上排列，最顶上格子代表采样时，正在占用 cpu 的函数； 横轴的意义是指：火焰图将采集的多个调用栈信息，通过按字母横向排序的方式将众多信息聚合在一起。需要注意的是它并不代表时间； 横轴格子的宽度代表其在采样中出现频率，所以一个格子的宽度越大，说明它是瓶颈原因的可能性就越大； 火焰图格子的颜色是随机的暖色调，方便区分各个调用信息； 其他的采样方式也可以使用火焰图， on-cpu 火焰图横轴是指 cpu 占用时间，off-cpu 火焰图横轴则代表阻塞时间； 采样可以是单线程、多线程、多进程甚至是多 host，进阶用法可以参考附录 进阶阅读； 火焰图类型 常见的火焰图类型有 On-CPU，Off-CPU，还有 Memory，Hot/Cold，Differential 等等。他们分别适合处理什么样的问题呢？\n这里笔者主要使用到的是 On-CPU、Off-CPU 以及 Memory 火焰图，所以这里仅仅对这三种火焰图作比较，也欢迎大家补充和斧正。\n火焰图分析技巧 纵轴代表调用栈的深度（栈桢数），用于表示函数间调用关系：下面的函数是上面函数的父函数； 横轴代表调用频次，一个格子的宽度越大，越说明其可能是瓶颈原因； 不同类型火焰图适合优化的场景不同，比如 on-cpu 火焰图适合分析 cpu 占用高的问题函数，off-cpu 火焰图适合解决阻塞和锁抢占问题； 无意义的事情：横向先后顺序是为了聚合，跟函数间依赖或调用关系无关；火焰图各种颜色是为方便区分，本身不具有特殊含义； 多练习：进行性能优化有意识的使用火焰图的方式进行性能调优（如果时间充裕）； 如何绘制火焰图？ 要生成火焰图，必须要有一个顺手的动态追踪工具，如果操作系统是 Linux 的话，那么通常通常是 perf 或者 systemtap 中的一种。其中 perf 相对更常用，多数 Linux 都包含了 perf 这个工具，可以直接使用；SystemTap 则功能更为强大，监控也更为灵活。网上关于如何使用 perf 绘制火焰图的文章非常多而且丰富，所以本文将以 SystemTap 为例。\nSystemTap 是动态追踪工具，它通过探针机制，来采集内核或者应用程序的运行信息，从而可以不用修改内核和应用程序的代码，就获得丰富的信息，帮你分析、定位想要排查的问题。SystemTap 定义了一种类似的 DSL 脚本语言，方便用户根据需要自由扩展。不过，不同于动态追踪的鼻祖 DTrace ，SystemTap 并没有常驻内核的运行时，它需要先把脚本编译为内核模块，然后再插入到内核中执行。这也导致 SystemTap 启动比较缓慢，并且依赖于完整的调试符号表。\n使用 SystemTap 绘制火焰图的主要流程如下：\n安装 SystemTap 以及 操作系统符号调试表 根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本 生成内核模块 运行 SystemTap 或者运行生成的内核模块统计数据 将统计数据转换成火焰图 本文演示步骤将会基于操作系统 Tlinux 2.2 ( Linux 内核版本 3.10.107)\n安装 SystemTap 以及 操作系统符号调试表 使用 yum 工具安装 systemtap:\n1 yum install systemtap systemtap-runtime 由于 systemtap 工具依赖于完整的调试符号表，而且生产环境不同机器的内核版本不同（虽然都是 Tlinux 2.2 版本，但是内核版本后面的小版本不一样，可以通过 uname -a 命令查看）所以我们还需要安装 kernel-debuginfo 包、 kernel-devel 包 我这里是安装了这两个依赖包\n1 2 kernel-devel-3.10.107-1-tlinux2-0046.x86_64 kernel-debuginfo-3.10.107-1-tlinux2-0046.x86_64 根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本 使用 SystemTap 统计相关数据往往需要自己依照它的语法，编写脚本，具有一定门槛。幸运的是，github 上春哥（agentzh）开源了两组他常用的 SystemTap 脚本：openresty-systemtap-toolkit 和 stapxx，这两个工具集能够覆盖大部分 C 进程、nginx 进程以及 Openresty 进程的性能问题场景。\n我们这里需要绘制 off-cpu 火焰图，所以使用 sample-bt-off-cpu 脚本即可\n生成内核模块 现在我们有了统计脚本，也安装好了 systemtap，正常来说就可以使用了，但由于 systemtap 是通过生成内核模块的方式统计相关探针的统计数据，而 tlinux 要求所有运行的内核模块需要先到 tlinux 平台签名才可以运行，所以：\n故需要先修改 off-cpu 脚本，让其先生成内核模块；之后对该内核模块作签名；最后使用 systemtap 命令手工运行该脚本，统计监控数据。\nSystemtap 执行流程如下：\nparse：分析脚本语法 elaborate：展开脚本 中定义的探针和连接预定义脚本库，分析内核和内核模块的调试信息 translate：. 将脚本编译成 c 语言内核模块文件放 在$HOME/xxx.c 缓存起来，避免同一脚本多次编译 build：将 c 语言模块文件编译成。ko 的内核模块，也缓存起来。 把模块交给 staprun，staprun 加载内核模块到内核空间，stapio 连接内核模块和用户空间，提供交互 IO 通道，采集数据。 所以我们这里修改下 off-cpu 的 stap 脚本，让其只运行完第四阶段，只生成一个内核模块\n1 2 3 // 在 stap 命令后增加 -p4 参数，告诉 systemtap，当前只需要执行到第四阶段 open my $in, \u0026#34;|stap -p4 --skip-badvars --all-modules -x $pid -d \u0026#39;$exec_path\u0026#39; --ldd $d_so_args $stap_args -\u0026#34; or die \u0026#34;Cannot run stap: $!\\n\u0026#34;; 修改好之后运行脚本，会生成一个内核模块\n1 2 3 // -p 8682 是需要监控的进程的进程号 // -t 30 是指会采样 30 秒 ./sample-bt-off-cpu -p 8692 -t 30 生成的内核模块名称形如 stap_xxxxx.ko模块名称 由于读者并不需要关心内核模块签名，故章节略过\n运行内核模块统计数据 内核模块签名完成后，便可以使用 staprun 命令手工运行相关内核模块了\n命令：\n1 2 // 注意：签名脚本会将生产的内核模块重命名，需要将名字改回去……（脚本 bug） staprun -x {进程号} {内核模块名} \u0026gt; demo.bt 值得注意的是，监控的进程要有一定负载 systemtap 才可以采集到相关数据，即在采集时，同时需要要有一定请求量（通常是自己构造请求，压测进程）\n将统计数据转换成火焰图 获得了统计数据 demo.bt 后，便可以使用火焰图工具绘制火焰图了\n下载 FlameGraph，链接：https://github.com/brendangregg/FlameGraph\n命令：\n1 2 ./stackcollapse-stap.pl demo.bt \u0026gt; demo.folded ./flamegraph.pl demo.folded \u0026gt; demo.svg 这样便获得了 off-cpu 火焰图：\n看图说话 趁热打铁，通过几张火焰图熟悉下如何使用火焰图\n图片源于春哥微博或者本人近期绘制的性能火焰图\non-cpu 火焰图 Apache APISIX QPS 急剧下降问题 Apache APISIX 是一个开源国产的高性能 API 网关，之前在进行选型压测时，发现当 Route 匹配不中场景下， QPS 急剧下降，在其 CPU （四十八核）占用率几乎达到 100%的情况下只有几千 QPS，通过绘制火焰图发现，其主要耗时在一个 table 插入阶段 (lj_cf_table_insert)，分析代码发现是该 table 一直没有释放，每次匹配不中时，路由会向一张用于统计的表中插入一条数据，导致该表越来越大，后续插入耗时过长导致 QPS 下降。\noff-cpu 火焰图 nginx 互斥锁问题 这是一张 nginx 的 off-cpu 火焰图，我们可以很快锁定到 ngx_common_set_cache_fs_size -\u0026gt; ngx_shmtx_lock -\u0026gt; sem_wait 这段逻辑使用到了互斥锁，它让 nginx 进程绝大部分阻塞等待时间花费在获取该锁。\nagent 监控上报断点问题 这是一张 agent 的 off-cpu 火焰图，它是一个多线程异步事件模型，主线程处理各个消息，多个线程分别负责配置下发或者监控上报。当前问题出现在监控上报性能差，无法在周期（一分钟）内完成监控数据上报，导致监控断点，通过 off-cpu 火焰图我们可以分析出，该上报线程花费了大量的时间使用 curl_easy_perform 接口收发 http 监控数据消息。\n依据火焰图将发送 http 消息的逻辑改为异步非阻塞后，该问题解决。\n附录 进阶阅读 谷歌搜索演讲：Blazing Performance with Flame Graphs 演讲 ppt：https://www.slideshare.net/brendangregg/blazing-performance-with-flame-graphs 《SystemTap 新手指南》：https://spacewander.gitbooks.io/systemtapbeginnersguide_zh/content/index.html 极客时间《Linux 性能优化实战》\u0026ndash;倪朋飞 FAQ 使用 perf 或者 systemtap 的方式采集数据，会对后台服务有性能影响吗？\n有，但是很小，可以基本忽略不计。\n它们使用系统的探针或者使用一些自定义的动态探针进行数据采集，第一对代码无侵入性，它既不需要停止服务，也不需要修改应用程序的代码；第二，它们是以内核模块/内核原生的方式跟踪用户态和内核态的所有事件，并通过一系列优化措施，进行采样统计，对目标服务性能影响极小，大概在 5%左右或者更低的性能损耗。相较于将进程运行在沙箱的 valgrind 工具或静态调试工具 gdb 来说，动态追踪 perf 或者 systemtap 或者 ebpf 的性能损耗基本可以忽略不计。\n目标进程重启后，systemtap 是否需要重新生成内核模块？\n不需要。甚至同一个 linux 内核版本下的同一个二进制进程（md5 值一致），在安装 kernel 调试符号表后，便可以在生成采集指标的内核模块，并且可以多次使用。\n当 linux 内核版本不一致，符号表有变化，需要重新生成内核模块；当目标进程二进制文件重新编译后，也需要重新生成统计用的 systemtap 内核模块。\n如何在容器中绘制火焰图？\n如果是 on-cpu 火焰图可以直接使用perf record命令绘制即可\n如果是 off-cpu 之类的火焰图，则需要另外分析\n若系统/容器支持 ebpf 可以使用 bcc 工具集，使用如下命令绘制 off-cpu 火焰图\n1 /usr/share/bcc/tools/offcputime -df -p `pgrep -nx mysqld` 30 \u0026gt; out.stacks ","permalink":"http://localhost:1313/posts/flame/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文主要分享火焰图使用技巧，介绍 systemtap 的原理机制，如何使用火焰图快速定位性能问题原因，同时加深对 systemtap 的理解。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e让我们回想一下，曾经作为编程新手的我们是如何调优程序的？通常是在没有数据的情况下依靠主观臆断来瞎蒙，稍微有些经验的同学则会对差异代码进行二分或者逐段调试。这种定位问题的方式不仅耗时耗力，而且还不具有通用性，当遇到其他类似的性能问题时，需要重复踩坑、填坑，那么如何避免这种情况呢？\u003c/p\u003e\n\u003cp\u003e俗语有云：“工欲善其事，必先利其器。”个人认为，程序员定位性能问题也需要一件“利器”。 如同医生给病人看病，需要依靠专业的医学工具（比如 X 光片、听诊器等）进行诊断，最后依据医学工具的检验结果快速精准地定位出病因所在。性能调优工具（比如 perf / gprof 等）之于性能调优就像 X 光之于病人一样，它可以一针见血地指出程序的性能瓶颈。\u003c/p\u003e\n\u003cp\u003e但是常用的性能调优工具 perf 等，在呈现内容上只能单一地列出调用栈或者非层次化的时间分布，不够直观。这里我推荐大家配合使用火焰图，它将 perf 等工具采集的数据呈现得更为直观。\u003c/p\u003e\n\u003ch2 id=\"初识火焰图\"\u003e\u003cstrong\u003e初识火焰图\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e火焰图（Flame Graph）是由 Linux 性能优化大师 Brendan Gregg 发明的，和所有其他的 profiling 方法不同的是，火焰图以一个全局的视野来看待时间分布，它从底部往顶部，列出所有可能导致性能瓶颈的调用栈。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20201125024338.png\"\u003e\u003c/p\u003e\n\u003cp\u003e火焰图整个图形看起来就像一个跳动的火焰，这就是它名字的由来。\u003c/p\u003e\n\u003cp\u003e火焰图有以下特征（这里以 on-cpu 火焰图为例）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每一列代表一个调用栈，每一个格子代表一个函数；\u003c/li\u003e\n\u003cli\u003e纵轴展示了栈的深度，按照调用关系从下到上排列，最顶上格子代表采样时，正在占用 cpu 的函数；\u003c/li\u003e\n\u003cli\u003e横轴的意义是指：火焰图将采集的多个调用栈信息，通过按字母横向排序的方式将众多信息聚合在一起。需要注意的是它并不代表时间；\u003c/li\u003e\n\u003cli\u003e横轴格子的宽度代表其在采样中出现频率，所以一个格子的宽度越大，说明它是瓶颈原因的可能性就越大；\u003c/li\u003e\n\u003cli\u003e火焰图格子的颜色是随机的暖色调，方便区分各个调用信息；\u003c/li\u003e\n\u003cli\u003e其他的采样方式也可以使用火焰图， on-cpu 火焰图横轴是指 cpu 占用时间，off-cpu 火焰图横轴则代表阻塞时间；\u003c/li\u003e\n\u003cli\u003e采样可以是单线程、多线程、多进程甚至是多 host，进阶用法可以参考附录 \u003ca href=\"/posts/flame/#%e8%bf%9b%e9%98%b6%e9%98%85%e8%af%bb\"\u003e进阶阅读\u003c/a\u003e；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"火焰图类型\"\u003e\u003cstrong\u003e火焰图类型\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e常见的火焰图类型有 On-CPU，Off-CPU，还有 Memory，Hot/Cold，Differential 等等。他们分别适合处理什么样的问题呢？\u003c/p\u003e\n\u003cp\u003e这里笔者主要使用到的是 On-CPU、Off-CPU 以及 Memory 火焰图，所以这里仅仅对这三种火焰图作比较，也欢迎大家补充和斧正。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/flame2.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"火焰图分析技巧\"\u003e\u003cstrong\u003e火焰图分析技巧\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e纵轴代表调用栈的深度（栈桢数），用于表示函数间调用关系：下面的函数是上面函数的父函数；\u003c/li\u003e\n\u003cli\u003e横轴代表调用频次，一个格子的宽度越大，越说明其可能是瓶颈原因；\u003c/li\u003e\n\u003cli\u003e不同类型火焰图适合优化的场景不同，比如 on-cpu 火焰图适合分析 cpu 占用高的问题函数，off-cpu 火焰图适合解决阻塞和锁抢占问题；\u003c/li\u003e\n\u003cli\u003e无意义的事情：横向先后顺序是为了聚合，跟函数间依赖或调用关系无关；火焰图各种颜色是为方便区分，本身不具有特殊含义；\u003c/li\u003e\n\u003cli\u003e多练习：进行性能优化有意识的使用火焰图的方式进行性能调优（如果时间充裕）；\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"如何绘制火焰图\"\u003e\u003cstrong\u003e如何绘制火焰图？\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e要生成火焰图，必须要有一个顺手的动态追踪工具，如果操作系统是 Linux 的话，那么通常通常是 perf 或者 systemtap 中的一种。其中 perf 相对更常用，多数 Linux 都包含了 perf 这个工具，可以直接使用；SystemTap 则功能更为强大，监控也更为灵活。网上关于如何使用 perf 绘制火焰图的文章非常多而且丰富，所以本文将以 SystemTap 为例。\u003c/p\u003e","title":"性能调优利器--火焰图"},{"content":"十一假期宅家无事，发现自己过去写了很多文章，却没有一个自己的博客，系统得管理自己的文章，所以准备将自己过去以及未来的文章都放到博客，以饷读者。另一方面，经过对 Serverless 博客、TCB 建站、虚拟机建站等一系列建站方式对比后，个人认为基于 Github Pages 最适合搭建个人技术博客，最重要的当然是免费，其次网上教程众多，可以快速建站，第三则是所有的博客直接托管在 github，也更符合个人习惯，最后则是自建个人博客可玩性和可扩展性好。\n当然，这个方案并不是完美无缺，缺点也比较明显，比如需要考虑到安全信息泄漏问题（比如可能会泄露公司内的机密信息或者秘钥到 Github，所以需要准备安全扫描方案，这个我们会在另一篇文章谈）；另一方面，读者需要能够翻墙才可以访问 Github Pages；最后，则是没有 CDN 加速，如果访问者众多或者网站图片众多，加载速度很慢。\n为什么要写技术文章？ 其实，个人写文章最初是兴趣使然以及工作需要。众所周知，IT 是一个技术革新很快的行业，新的概念、新的语言、新的框架层出不穷，程序员需要持续学习，我有对每一个新的知识有做笔记的习惯，笔记攒多了便需要回顾总结整理，便形成了一篇篇的文章。\n以前笔记的图找不到了，差不多在习惯使用电子笔记之前有十几本笔记，后来我习惯性使用思维导图 processon 等一系列工具记录笔记，比如这张图便是我做的思维导图笔记的冰山一角：\n那么，写技术文章有何价值？个人认为写技术文章的价值主要有三方面：个人价值、企业价值和社会价值、企业价值。从个人角度来说，技术写作是树立个人技术影响力，提升自我价值的最快路径，没有之一；从公司角度，坚持长线的写作，对于公司的技术品牌，技术文化，有着巨大的推动作用；从更高的维度来说，技术写作也是提升整个社会技术水平，推动技术不断进步的源动力。\nhugo 初探 hugo 是什么？ Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\nhugo 中文官方文档\nhugo 英文官方文档\n安装 hugo 在 windows 下，你可以在此处下载\nwindows 版本下载链接\n如果你是 mac 系统，则可以通过如下命令安装（需要先安装 homebrew）\n1 brew install hugo 确认 hugo 安装是否成功 通过检查版本号的方式，确认 hugo 安装是否成功\n1 2 hugo version Hugo Static Site Generator v0.73.0/extended darwin/amd64 BuildDate: unknown # 输出结果 初始化网站目录 安装好之后，便可以初始化一个 hugo 项目，\n1 hugo new site demosite # 命令格式，hugo new site \u0026lt;项目名称\u0026gt; 下载一个 hugo 主题 hugo 主题可以理解为是一种网站样式，你可以在该页面选择自己心仪的 hugo 主题。我当前使用的是 LoveIt 这个主题，集成了很多插件，很好用很方便的一个中文博客模板。\n进入该目录，初始化 git 项目，并下载 hugo 主题\n1 2 3 cd demosite git init #初始化 git 项目 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt #下载主题 博客会采用 git 项目方式管理，所以需要初始化 git 项目 采用 submodule 的方式管理主题库 theme，方便及时更新和管理 配置主题 使用 LoveIt 的标准配置文件模板\n1 cp themes/LoveIt/exampleSite/config.toml . 需要修改一下主题路径 themesDir 配置，将其注释掉\n创建文章 创建一篇空文章\n1 hugo new posts/demo.md 另外，需要将生成文章头部的draft=true修改为draft=false，否则并不会生成草稿页面 启动 hugo 服务器 启动 hugo 服务器，进入 http://localhost:1313/ 预览页面\n1 hugo server -D 页面预览如下 构建静态页面 若要将博客托管在 github 上，需要上传静态页面。所以，需要使用 hugo 构建静态页面，构建命令如下：\n1 hugo -D 使用 Github Pages 搭建个人博客 个人博客整体架构 一个静态博客数据有两部分，一部分是静态页面（体积小），另一部分是图片或者大文件（文件体积大），通常来讲一个网站整体结构是静态页面放在服务器上（比如可以使用虚拟机、自己的服务器、github pages 项目），而对于大文件或者图片则通常会使用对象存储服务（比如对象存储或者 github 项目），它们前端使用一个 CDN 进行加速（比如云厂商的 CDN 服务或者 cloudinary），当然，在 HTTPS 已经普及的时代，一个 HTTPS 服务也是必不可少的。\n整体架构图如下：\n经过综合考量，个人建站选用组件如下：\n静态网站服务器：Github Pages 图片上传工具：picgo 图片存储服务：Github 项目 + jsdelivr 加速 域名服务商/域名购买：NameCheap HTTPS/CDN 服务提供商：Cloudfare 腾讯云服务中的 TCB 一键建站也挺好用的。但是因为个人图省钱和喜欢折腾，还是选择自己建站自己选择组件，一方面免费，另一方面可以对网络有更加深刻的理解。\nGithub Pages 是什么？ GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 index.html、HTML、CSS 和 JavaScript 文件，也可以通过构建过程运行文件，然后发布网站。\nGitHub Pages 可以识别指定分支根目录或者/docs 目录下的静态站点，具体可以在个人站点的 setting 中配置。\nGithub Pages 建站有两种类型：\n个人/组织站点，其域名格式形如https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/ 项目站点，其域名格式形如https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/\u0026lt;PROJECT\u0026gt;/ 你需要看清楚你的 Github Pages 建站类型，不同的建站类型的建站方法也不同，具体可以参考 官方手册\n这里我们以个人站点（User Pages）为例\n创建 Github Pages 项目 创建一个新的 github 项目，项目名称需要是\u0026lt;username.github.io\u0026gt;格式，如下图样例\n配置 pages 项目 点击进入 setting，搜索 github pages 关键字，找到相关配置：当前 github 默认分支已经是 main 分支，需要调整下；配置好之后即可通过用户名。github.io最初的 github 页面。\nhugo 生成静态页面 生成静态页面之前需要修改 config.toml 文件中的 baseURL 配置，将其修改为个人站点，比如我的就是 miss-you.github.io\n前面我们知道hugo -D可以生成静态页面，但该命令会默认将静态页面生成到 public 目录下，而 Github Pages 仅支持根目录/或者/docs 目录，所以我们需要将静态页面生成到 docs 目录下\n1 hugo -d docs 上传 github pages 项目 静态页面生成完成后，便可以将整个静态页面以及本项目其他文件上传到 github 项目中。先使用git remote命令添加远端仓库，将文件提交（git add+git commit），最后推送到 Github Pages 项目中\n1 2 3 4 5 6 git remote add origin git@github.com:Miss-you/miss-you.github.io.git # 将本地 git 项目与 github 项目相关联 git fetch origin # 拉取 github 项目 git checkout main #切换到主分支 main git add . git commit -m \u0026#34;init github pages\u0026#34; git push origin 当然，这里也可以采用git clone \u0026lt;YOUR-PROJECT-URL\u0026gt; \u0026amp;\u0026amp; cd \u0026lt;YOUR-PROJECT\u0026gt;拉取项目、上传文件（git add/commit/push) 的方式，上传 github 项目，这里不作过多演示\n发布脚本 虽然我们已经打通了基于 Github Pages 搭建个人博客的流程，但每次博客有修改都需要执行多条命令才能将博客发布，重复劳动且浪费时间，而程序员的天性是追求效率，应当用自动化（脚本）解决重复的工作。\n如下是一个常用脚本，会自动构建静态页面，然后提交构建出来的 docs 静态页面目录，将其推送到对应 Github Pages 项目中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/bin/sh # If a command fails then the deploy stops set -e printf \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026#34; # Build the project. hugo -d docs # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;` # Add changes to git. git add docs # Commit changes. msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin main FAQ 常见操作 TODO\n文章插入图片 图片上传问题\n图片存储问题\nTODO\n修改模板 TODO\n创建友链 TODO\n创建联系方式 TODO\n常见问题 Github Pages 项目报错：The submodule registered for ./themes/xxx could not be cloned. 原因是 Github Pages 项目，若要使用 submodule 应用第三方主题，需要使用 https 的地址而不是 git 地址\n[TOC] 符号不生效 toc 是 markdown 的一种进阶语法，用于自动生成目录，但是 hugo 并没有支持该语法。目录建议采用主题自带的目录功能，比如本文示例中的 LoveIt 主题。\n使用 loveit 或者切换到 loveit 主题入门教程：\nLoveIt 入门教程\n找不到主题，Error: module \u0026ldquo;LoveIt\u0026rdquo; not found 原因是由于 LoveIt 示例主题中的 config.toml 文件，其主题路径为\u0026quot;../..\u0026quot;，该目录下并不会有 LoveIt 主题，将其注释掉即可，或者修改 LoveIt 主题所在的相对路径\ngithub 搜索不到 LoveIt 主题 LoveIt 英文小写是 loveit，不是 lovelt，因为不注意的话 I 和 l 难以区分，容易混淆\njsdelivr latest图片找不到问题 https://cdn.jsdelivr.net/gh/Miss-you/img/how-to-create-blog/20201020132241.png\nhttps://cdn.jsdelivr.net/gh/Miss-you/img@1.0/how-to-create-blog/20201020132241.png\n必须要带版本号才可以找得到\n为什么latest用不了？ github的bug，他们的latest默认会去找master分支的，而不是main分支的图片……\n参考链接 hugo 中文官方文档 hugo 英文官方文档 hugo 主题站 github pages 官方手册 hugo loveit 主题使用教程 cloudfare 配置教程 picgo 官方教程 ","permalink":"http://localhost:1313/posts/how-to-create-blog/","summary":"\u003cp\u003e十一假期宅家无事，发现自己过去写了很多文章，却没有一个自己的博客，系统得管理自己的文章，所以准备将自己过去以及未来的文章都放到博客，以饷读者。另一方面，经过对 Serverless 博客、TCB 建站、虚拟机建站等一系列建站方式对比后，个人认为基于 Github Pages 最适合搭建个人技术博客，最重要的当然是免费，其次网上教程众多，可以快速建站，第三则是所有的博客直接托管在 github，也更符合个人习惯，最后则是自建个人博客可玩性和可扩展性好。\u003c/p\u003e\n\u003cp\u003e当然，这个方案并不是完美无缺，缺点也比较明显，比如需要考虑到安全信息泄漏问题（比如可能会泄露公司内的机密信息或者秘钥到 Github，所以需要准备安全扫描方案，这个我们会在另一篇文章谈）；另一方面，读者需要能够翻墙才可以访问 Github Pages；最后，则是没有 CDN 加速，如果访问者众多或者网站图片众多，加载速度很慢。\u003c/p\u003e\n\u003ch2 id=\"为什么要写技术文章\"\u003e为什么要写技术文章？\u003c/h2\u003e\n\u003cp\u003e其实，个人写文章最初是兴趣使然以及工作需要。众所周知，IT 是一个技术革新很快的行业，新的概念、新的语言、新的框架层出不穷，程序员需要持续学习，我有对每一个新的知识有做笔记的习惯，笔记攒多了便需要回顾总结整理，便形成了一篇篇的文章。\u003c/p\u003e\n\u003cp\u003e以前笔记的图找不到了，差不多在习惯使用电子笔记之前有十几本笔记，后来我习惯性使用思维导图 processon 等一系列工具记录笔记，比如这张图便是我做的思维导图笔记的冰山一角：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"图片\" loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/how-to-create-blog/20201020131829.png\"\u003e\u003c/p\u003e\n\u003cp\u003e那么，写技术文章有何价值？个人认为写技术文章的价值主要有三方面：个人价值、企业价值和社会价值、企业价值。从个人角度来说，技术写作是树立个人技术影响力，提升自我价值的最快路径，没有之一；从公司角度，坚持长线的写作，对于公司的技术品牌，技术文化，有着巨大的推动作用；从更高的维度来说，技术写作也是提升整个社会技术水平，推动技术不断进步的源动力。\u003c/p\u003e\n\u003ch2 id=\"hugo-初探\"\u003ehugo 初探\u003c/h2\u003e\n\u003ch3 id=\"hugo-是什么\"\u003ehugo 是什么？\u003c/h3\u003e\n\u003cp\u003eHugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.gohugo.org/\"\u003ehugo 中文官方文档\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gohugo.io/documentation/\"\u003ehugo 英文官方文档\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"安装-hugo\"\u003e安装 hugo\u003c/h3\u003e\n\u003cp\u003e在 windows 下，你可以在此处下载\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/gohugoio/hugo/releases/download/v0.63.2/hugo_0.63.2_Windows-64bit.zip\"\u003ewindows 版本下载链接\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e如果你是 mac 系统，则可以通过如下命令安装（需要先安装 homebrew）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"确认-hugo-安装是否成功\"\u003e确认 hugo 安装是否成功\u003c/h3\u003e\n\u003cp\u003e通过检查版本号的方式，确认 hugo 安装是否成功\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-1-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eHugo Static Site Generator v0.73.0/extended darwin/amd64 BuildDate: unknown # 输出结果\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"初始化网站目录\"\u003e初始化网站目录\u003c/h3\u003e\n\u003cp\u003e安装好之后，便可以初始化一个 hugo 项目，\u003c/p\u003e","title":"使用 Github Pages 和 Hugo 搭建个人博客教程"},{"content":" 本文主要介绍如何使用 go 语言 database/sql 库从数据库中读取 null 值的问题，以及如何向数据库中插入 null 值。本文在这里使用的是 sql.NullString, sql.NullInt64, sql.NullFloat64 等结构体，为了方便书写，它们的泛指我会使用 sql.Null 来表示\n要点 从数据库读取可能为 null 值得值时，可以选择使用 sql.NULL 来读取；或者使用 IFNULL、COALESCE 等命令让数据库查询值返回不为\u0026quot;\u0026ldquo;或者 NULL 若需要往数据库中插入 null 值，则依然可以使用 sql.NULL 存储所需的值，然后进行插入 NULL 值 直接使用 sql.NULL 类型容易出现 valid 遗漏设置等问题，普通 int、string 与其转换时，请写几个简单的 get、set 函数 本 demo 使用的数据库表以及数据如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 mysql\u0026gt; desc person; +------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +------------+--------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | | first_name | varchar(100) | NO | | NULL | | | last_name | varchar(40) | YES | | NULL | | | age | int(11) | YES | | NULL | | +------------+--------------+------+-----+---------+----------------+ mysql\u0026gt; select * from person; +----+------------+-----------+------+ | id | first_name | last_name | age | +----+------------+-----------+------+ | 1 | yousa | NULL | NULL | +----+------------+-----------+------+ mysql\u0026gt; show create table person; +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | person | CREATE TABLE `person` ( `id` int(11) NOT NULL AUTO_INCREMENT, `first_name` varchar(100) NOT NULL, `last_name` varchar(40) DEFAULT NULL, `age` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 | +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.00 sec) 从数据库中读取 NULL 值 如果不作处理直接从数据库中读取 NULL 值到 string/int，会发生如下错误错误\n1 2 3 4 5 Scan NULL 值到 string 的报错 sql: Scan error on column index 1: unsupported Scan, storing driver.Value type \u0026lt;nil\u0026gt; into type *string Scan NULL 值到 int 的报错 sql: Scan error on column index 1: converting driver.Value type \u0026lt;nil\u0026gt; (\u0026#34;\u0026lt;nil\u0026gt;\u0026#34;) to a int: invalid syntax 使用如下的 struct 来读取数据库内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 type Person struct { firstName string lastName string age\tint } //由于只有一行，直接使用 QueryRow row := db.QueryRow(\u0026#34;SELECT first_name, last_name FROM person WHERE first_name=\u0026#39;yousa\u0026#39;\u0026#34;) err = row.Scan(\u0026amp;hello.firstName, \u0026amp;hello.lastName) if err != nil { fmt.Println(err) } fmt.Println(hello) row1 := db.QueryRow(\u0026#34;SELECT first_name, age FROM person WHERE first_name=\u0026#39;yousa\u0026#39;\u0026#34;) err = row1.Scan(\u0026amp;hello.firstName, \u0026amp;hello.age) if err != nil { fmt.Println(err) } fmt.Println(hello) 运行代码，可以通过日志看出来，错误来自 Scan 将 NULL 值赋值给 int 或者 string 时，报错；解决这个问题可以使用 sql 原生结构体 sql.Null 来解决\n使用 sqlNull sql.Null 在 sql 库中声明如下，在读取时，（比如读取的值存储到 NullInt64），假如发现存储的值是 NULL，则会将 NullInt64 的 valid 设置为 false，然后不会将值存储到 Int64 中，Int64 值默认为 0，如果是 NullString 则 String 值时 nil；如果是正常值，则会将 Valid 赋值为 true，将值存储到 Int64 中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 type NullInt64 struct { Int64 int64 Valid bool // Valid is true if Int64 is not NULL } func (n *NullInt64) Scan(value interface{}) error func (n NullInt64) Value() (driver.Value, error) type NullString struct { String string Valid bool // Valid is true if String is not NULL } func (ns *NullString) Scan(value interface{}) error func (ns NullString) Value() (driver.Value, error) 代码修改为如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 type Person struct { firstName string lastNullName sql.NullString nullAge sql.NullInt64 } rowNull := db.QueryRow(\u0026#34;SELECT first_name, last_name FROM person WHERE first_name=\u0026#39;yousa\u0026#39;\u0026#34;) err = rowNull.Scan(\u0026amp;hello.firstName, \u0026amp;hello.lastNullName) if err != nil { fmt.Println(err) } fmt.Println(hello) rowNull1 := db.QueryRow(\u0026#34;SELECT first_name, age FROM person WHERE first_name=\u0026#39;yousa\u0026#39;\u0026#34;) err = rowNull1.Scan(\u0026amp;hello.firstName, \u0026amp;hello.nullAge) if err != nil { fmt.Println(err) } fmt.Println(hello) 输出结果\n1 {yousa 0 { false} {0 false}} 使用 IFNULL 或者 COALESCE coalesce() 解释：返回参数中的第一个非空表达式（从左向右依次类推）\nIFNULL(expr1,expr2): 如果 expr1 不是 NULL，IFNULL() 返回 expr1，否则它返回 expr2。IFNULL() 返回一个数字或字符串值，取决于它被使用的上下文环境。\n查询语句使用一个默认值来替换 NULL 即可\n1 2 SELECT first_name, COALESCE(age, 0) FROM person;// SELECT first_name, IFNULL(age, 0) FROM person;// 往数据库中插入 NULL 值 前面我们对 SELECT 语句使用了 sql.Null 类型，同理，INSERT、UPDATE 语句也可以通过使用这种类型来插入 nil 值\n代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 hello := Person { firstName: \u0026#34;\u0026#34;, lastName: \u0026#34;\u0026#34;, age: 0, lastNullName: sql.NullString{String:\u0026#34;\u0026#34;, Valid:false}, nullAge: sql.NullInt64{Int64:0, Valid:false}} _, err = db.Exec( \u0026#34;INSERT INTO person (first_name, last_name) VALUES (?, ?)\u0026#34;, \u0026#34;yousa1\u0026#34;, hello.lastName) if err != nil { fmt.Println(err) } _, err = db.Exec( \u0026#34;INSERT INTO person (first_name, last_name) VALUES (?, ?)\u0026#34;, \u0026#34;yousa2\u0026#34;, hello.lastNullName) if err != nil { fmt.Println(err) } //数据库插入结果 mysql\u0026gt; select * from person; +----+------------+-----------+------+ | id | first_name | last_name | age | +----+------------+-----------+------+ | 1 | yousa | NULL | NULL | | 2 | yousa1 | | NULL | | 3 | yousa2 | NULL | NULL | +----+------------+-----------+------+ 解释下 db.Exec 操作 hello.lastNullName 的过程：\n首先它会调用 hello.lastNullName 的 Value 方法，获取到 driver.Value，然后检验 Valid 值是 true 还是 false，如果是 false 则会返回一个 nil 值（nil 值传给 sql driver 会被认为是 NULL 值），如果是 true 则会将 hello.lastNullName.String 的值传过去。\nPS: 为了保证你所插入的值能如你所期望是 NULL 值，一定记得要将 sql.Null 中 Valid 值置为 false\n使用 NULL 还是有很多危害的，再回顾下数据库中使用 NULL 值的危害\n为什么不建议使用 NULL 所有使用 NULL 值的情况，都可以通过一个有意义的值的表示，这样有利于代码的可读性和可维护性，并能从约束上增强业务数据的规范性。 NULL 值在 timestamp 类型下容易出问题，特别是没有启用参数 explicit_defaults_for_timestamp NOT IN、!= 等负向条件查询在有 NULL 值的情况下返回永远为空结果，查询容易出错 Null 列需要更多的存储空间：需要一个额外字节作为判断是否为 NULL 的标志位 NULL 值到非 NULL 的更新无法做到原地更新，更容易发生索引分裂，从而影响性能。 PS：但把 NULL 列改为 NOT NULL 带来的性能提示很小，除非确定它带来了问题，否则不要把它当成优先的优化措施，最重要的是使用的列的类型的适当性。\n当然有些情况是不得不使用 NULL 值进行存储，或者在查询时由于 left/right join 等导致 NULL 值，但总体来说，能少用就少用。\nhelper func（提升效率/减少错误） 如果使用 sql.NULL 的话，由于其有两个字段，如果直接手动赋值的话还是很容易遗漏，所以还是需要简单的转换函数，这里给了两个简单的 helper fuc，分别是将 int64 转换成 NullInt64 和将 string 转换成 NullString\n1 2 3 4 5 6 7 8 9 10 //ToNullString invalidates a sql.NullString if empty, validates if not empty func ToNullString(s string) sql.NullString { return sql.NullString{String : s, Valid : s != \u0026#34;\u0026#34;} } //ToNullInt64 validates a sql.NullInt64 if incoming string evaluates to an integer, invalidates if it does not func ToNullInt64(s string) sql.NullInt64 { i, err := strconv.Atoi(s) return sql.NullInt64{Int64 : int64(i), Valid : err == nil} } 参考博客 https://github.com/go-sql-driver/mysql/issues/34 https://github.com/guregu/null https://gocn.io/question/243 https://godoc.org/database/sql http://url.cn/5cFTz4W 一千个不用 Null 的理由 ","permalink":"http://localhost:1313/posts/go-mysql-null/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文主要介绍如何使用 go 语言 database/sql 库从数据库中读取 null 值的问题，以及如何向数据库中插入 null 值。本文在这里使用的是 sql.NullString, sql.NullInt64, sql.NullFloat64 等结构体，为了方便书写，它们的泛指我会使用 sql.Null 来表示\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"要点\"\u003e要点\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e从数据库读取可能为 null 值得值时，可以选择使用 sql.NULL 来读取；或者使用 IFNULL、COALESCE 等命令让数据库查询值返回不为\u0026quot;\u0026ldquo;或者 NULL\u003c/li\u003e\n\u003cli\u003e若需要往数据库中插入 null 值，则依然可以使用 sql.NULL 存储所需的值，然后进行插入 NULL 值\u003c/li\u003e\n\u003cli\u003e直接使用 sql.NULL 类型容易出现 valid 遗漏设置等问题，普通 int、string 与其转换时，请写几个简单的 get、set 函数\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e本 demo 使用的数据库表以及数据如下\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-30\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-30\"\u003e30\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-mysql\" data-lang=\"mysql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003edesc\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+------------+--------------+------+-----+---------+----------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eField\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eType\u003c/span\u003e\u003cspan class=\"w\"\u003e         \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eKey\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eExtra\u003c/span\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+------------+--------------+------+-----+---------+----------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e         \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePRI\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eauto_increment\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast_name\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eYES\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eYES\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+------------+--------------+------+-----+---------+----------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+----+------------+-----------+------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+----+------------+-----------+------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eyousa\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+----+------------+-----------+------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eshow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ecreate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003etable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTable\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCreate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTable\u003c/span\u003e\u003cspan class=\"w\"\u003e                                                                                                                                                                                                                                           \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNOT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eAUTO_INCREMENT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003efirst_name\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNOT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003elast_name\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eKEY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eENGINE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eInnoDB\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eAUTO_INCREMENT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eCHARSET\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"从数据库中读取-null-值\"\u003e从数据库中读取 NULL 值\u003c/h2\u003e\n\u003cp\u003e如果不作处理直接从数据库中读取 NULL 值到 string/int，会发生如下错误错误\u003c/p\u003e","title":"Go 语言：解决数据库中 null 值的问题"},{"content":"1️⃣ 设定写作目标与受众 要素 提问 Claude Code 的示例 目标 “我想写一篇面向中级后端开发者的文章，帮助他们理解 Event Sourcing 的核心概念并快速上手。” 受众痛点 “这些读者通常困惑于日志增长、回放性能和一致性验证，请给我一份简要需求清单。” 技巧：把“读者画像 + 阅读后应会什么”一次性告诉模型，可显著提升后续输出的精准度。\n2️⃣ 生成并迭代大纲 让 Claude Code 先给出 3～5 种不同结构的大纲。\n选一个你喜欢的版本，再让它展开到二级、三级标题。\n1 请保留标题层级，列出每节要点（每点 1 行），并提示需要的示例代码或图示。 亲手微调顺序、合并重复部分，再贴回去让 Claude Code “对比前后差异，输出精炼后的最终大纲”。\n3️⃣ 草拟正文 \u0026amp; 示例代码 分段推进：一次只投喂 1 节标题，让模型输出 ≤300 字文字 + 对应代码片段。\n“按照最终大纲的 第 2.1 节，写一段 250 字的介绍，并生成一个最小可运行的 Python 示例（含注释）。”\n自动验码：在 Code 模式里直接执行示例，若报错，把 traceback 和你的预期反馈给模型，让它修正。\n交叉追问：\n“这段话里面有哪些概念需要链接到官方文档？请给出 URL 列表。” “帮我把示例改成 JavaScript 版本，并标注与 Python 版的区别。” 4️⃣ 质量把关循环 维度 提示词 技术准确性 “请充当审核员，指出上文可能误导读者的地方并给出改进方案。” 读者体验 “从阅读流畅度和信息量平衡角度，给本节打分并解释原因。” SEO / 可搜索性 “基于关键字 event sourcing implementation，检查标题与小节是否覆盖这些搜索词。” 1 → 接受／拒绝修改 → 重新生成 → 再审 5️⃣ 统一风格与排版 段落长度：\n1 把全篇控制在每段 3–5 句，避免超过 120 字。 术语一致：\n1 把 “事件回放” 一律改成 “Event Replay”，并保持英文斜体。 代码高亮：让模型直接输出带语言标识的 Markdown 块：\n1 2 ```python # code here 可视化（选）：\n1 用 Mermaid 画出 Event Store 与 Read Model 的交互时序图。 6️⃣ 最终审校 \u0026amp; 发布前清单 通读全文，确保逻辑流畅、示例能跑、链接有效。 跑一次拼写/语法检查（可让 Claude Code 批量校对）。 版权合规：确认引用、图片、代码 license。 版式预览：在目标发布平台（博客、公众号、Dev.to 等）粘贴草稿，看渲染是否正常。 快速提示卡（可收藏） 1 2 3 4 5 🔹 大纲起草：「请给出三种不同角度的大纲，并说明各适用读者」 🔹 深挖小节：「用类比解释 XXX，控制在 150 字以内」 🔹 代码校正：「下面的报错说明了什么？请修复并解释修改点」 🔹 可视化：「用 Mermaid 绘制流程，显示 X→Y→Z 三步」 🔹 审稿人模式：「作为技术编辑，点评上一段的准确性和可读性」 ","permalink":"http://localhost:1313/posts/how-to-control-claude-to-write/","summary":"\u003ch3 id=\"1-设定写作目标与受众\"\u003e1️⃣ 设定写作目标与受众\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e要素\u003c/th\u003e\n          \u003cth\u003e提问 Claude Code 的示例\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e目标\u003c/td\u003e\n          \u003ctd\u003e“我想写一篇面向中级后端开发者的文章，帮助他们理解 \u003cstrong\u003eEvent Sourcing\u003c/strong\u003e 的核心概念并快速上手。”\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e受众痛点\u003c/td\u003e\n          \u003ctd\u003e“这些读者通常困惑于日志增长、回放性能和一致性验证，请给我一份简要需求清单。”\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e技巧\u003c/strong\u003e：把“读者画像 + 阅读后应会什么”一次性告诉模型，可显著提升后续输出的精准度。\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch3 id=\"2-生成并迭代大纲\"\u003e2️⃣ 生成并迭代\u003cstrong\u003e大纲\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e让 Claude Code 先给出 3～5 种不同结构的大纲。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e选一个你喜欢的版本，再让它展开到二级、三级标题。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e请保留标题层级，列出每节要点（每点 1 行），并提示需要的示例代码或图示。\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e亲手微调顺序、合并重复部分，再贴回去让 Claude Code “对比前后差异，输出精炼后的最终大纲”。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"3-草拟正文--示例代码\"\u003e3️⃣ 草拟正文 \u0026amp; 示例代码\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e分段推进\u003c/strong\u003e：一次只投喂 1 节标题，让模型输出 ≤300 字文字 + 对应代码片段。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“按照最终大纲的 \u003cem\u003e第 2.1 节\u003c/em\u003e，写一段 250 字的介绍，并生成一个最小可运行的 Python 示例（含注释）。”\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e自动验码\u003c/strong\u003e：在 Code 模式里直接执行示例，若报错，把 traceback 和你的预期反馈给模型，让它修正。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e交叉追问\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“这段话里面有哪些概念需要链接到官方文档？请给出 URL 列表。”\u003c/li\u003e\n\u003cli\u003e“帮我把示例改成 JavaScript 版本，并标注与 Python 版的区别。”\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"4-质量把关循环\"\u003e4️⃣ 质量把关循环\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e维度\u003c/th\u003e\n          \u003cth\u003e提示词\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e技术准确性\u003c/td\u003e\n          \u003ctd\u003e“请充当审核员，指出上文可能误导读者的地方并给出改进方案。”\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e读者体验\u003c/td\u003e\n          \u003ctd\u003e“从阅读流畅度和信息量平衡角度，给本节打分并解释原因。”\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSEO / 可搜索性\u003c/td\u003e\n          \u003ctd\u003e“基于关键字 \u003cem\u003eevent sourcing implementation\u003c/em\u003e，检查标题与小节是否覆盖这些搜索词。”\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e→ 接受／拒绝修改 → 重新生成 → 再审\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"5-统一风格与排版\"\u003e5️⃣ 统一风格与排版\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e段落长度\u003c/strong\u003e：\u003c/p\u003e","title":""}]