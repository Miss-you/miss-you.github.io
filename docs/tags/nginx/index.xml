<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>nginx - Tag - LoveIt</title>
        <link>http://miss-you.github.io/tags/nginx/</link>
        <description>nginx - Tag - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 28 Dec 2020 01:23:35 &#43;0800</lastBuildDate><atom:link href="http://miss-you.github.io/tags/nginx/" rel="self" type="application/rss+xml" /><item>
    <title>从 nginx 热更新聊一聊 Golang 中的热更新</title>
    <link>http://miss-you.github.io/server-hot-update/</link>
    <pubDate>Mon, 28 Dec 2020 01:23:35 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://miss-you.github.io/server-hot-update/</guid>
    <description><![CDATA[从 nginx 热更新聊一聊 Golang 中的热更新  静态语言在服务器编程时都会遇到这样的问题：如何保证已有的连接服务不中断同时又升级版本？ 最近花了点时间看了下 nginx 热更新代码流程，想了下结合之前的经验一并总结下热更新
 热更新是什么？ 举个例子，你现在在坐卡车，卡车开到了 150KM/H
然后，有个轮胎，爆了
然后，司机说，你就直接换吧，我不停车。你小心点换
嗯。就这个意思
网关中的热更新 服务程序热更新这个问题在层 7 网关中尤其严重，网关中承载着大量的请求，包括 HTTP/HTTPS 短连接、HTTP/HTTPS 长连接、甚至是 websocket 这种超长连接（websocket 通常连接时间会很长，十几分钟到几天不等）。服务进程热更新是非常有必要的。
网关作为一个基础组件，需要保证高可用，是很难将其先停下来再更新的；
有人说可以使用负载均衡将需要更新的组件先隔离，再停机更新，但是如果是一个很小的集群没有负载均衡呢，又或者这样手动一台一台升级也着实麻烦，部分情况下就算隔离了也不过是不会有新的连接过来，旧的连接/请求依旧需要处理完成，否则就会造成部分服务不可用
 不过实际上线上操作是集群隔离加热更新一起操作
 nginx 热更新 (Upgrading Executable on the Fly) nginx [engine x] 是 Igor Sysoev 编写的一个 HTTP 和反向代理服务器，另外它也可以作为邮件代理服务器。 它已经在众多流量很大的俄罗斯网站上使用了很长时间，这些网站包括 Yandex、Mail.Ru、VKontakte，以及 Rambler。据 Netcraft 统计，在 2012 年 8 月份，世界上最繁忙的网站中有 11.48%使用 Nginx 作为其服务器或者代理服务器。
 NginX 采用 Master/Worker 的多进程模型，Master 进程负责整个 NginX 进程的管理。Nginx 的模块化、热更新、Http 处理流程、日志等机制都非常经典。这里将会简要介绍一下热更新的机制]]></description>
</item></channel>
</rss>
