[{"content":"纠结 Claude Code 还是 Codex？一个贵 4 倍但 SWE-bench 高 3%，一个便宜但社区说\u0026quot;更稳定\u0026quot;。这里有最短路径：同一仓库、同一任务的端到端实测——从 UI 克隆到推荐管线，看清每一分钱花在哪。\n摘要 同样预算写更多代码 → Codex 更完整不敷衍 → Codex，更倾向完成整个 PR 并补测试 数据分析与快速原型 → Codex，更便宜，开发循环更稳定 代码清晰易读 → Claude Code，代码质量和可读性更好 前端 UI 还原度 → Claude Code，UI 保真度更高 大规模重构调试 → Codex，调试循环稳定，token 消耗更少 复杂任务与系统操作 → Claude Code，SWE-bench 77.2，OSWorld 61.4 首字响应速度 → Claude Code，Vertex TTFT ≈1.67s 超长上下文支持 → Claude Code，多云部署可达 1M 上下文 成本控制与调优 → Codex，可调推理深度，灵活控制速度和费用 多云部署灵活性 → Claude Code，支持 Anthropic/Bedrock/Vertex/OpenRouter 端到端项目成本 → Codex，约 $2.50 vs Claude 约 $10.26 表现稳定性 → Claude Code，波动更小，一致性更好 代码漏洞更少 → GPT-5 家族含 Codex，但 Claude 可读性更强 端到端开发成本对比 Composio 在同一仓库、同一 MCP 环境下做了实测对比，汇总了不同场景的 Token 与成本差异：\n场景/维度 Claude Code（Sonnet 4.5） Codex（GPT‑5‑codex） 结论 UI 克隆（Figma 参考）Token ~5,000,000 ~250,000 Codex 更省 Token；Claude UI 保真更高 Lint/Schema 修复 Token ~4,000,000 ~100,000 Codex 修复更高效、更省 推荐管线（Schema+API+UI）Token/用时 ~1,189,670；约 10 分钟 ~309,000；约 25 分钟（未做 Expo UI） Claude 更快但后续出现 Schema/API 问题；Codex 更稳 整体验证成本 约 $10.26（18M 输入 + 117k 输出） 约 $2.50（600k 输入 + 103k 输出） Codex 总体更省钱 计价假设（用于 Codex 估算） — 输入 $1.25/M，输出 $10/M 引文用于估算的单价 成本趋势 长会话、UI 工作量大时更贵 大型编码任务更省 Token “实现与修复”选 Codex，“设计/UI”选 Claude 数据来自 Composio 的实测文章 Claude Sonnet 4.5 vs. GPT-5 Codex: Best model for agentic coding\nAPI 与规格 特性 OpenAI GPT-5 Codex Anthropic Claude Sonnet 4.5 优势方 模型定位 专为代理式编程优化的 GPT-5 版本 复杂代理和编程任务的最佳模型 - 发布时间 2025 年 9 月 23 日 2025 年 9 月 29 日 Claude（更新） 上下文窗口 400K tokens 200K （标准） GPT-5 Codex 最大输出 128K tokens 64K tokens GPT-5 Codex 知识截止 2024 年 9 月 30 日 2024 年 4 月 GPT-5 Codex 多模态支持 文本、图像（输入） 文本、图像（输入） 平手 输入定价 $1.25/M $3.00/M GPT-5 Codex (2.4x) 输出定价 $10.00/M $15.00/M GPT-5 Codex (1.5x) 缓存折扣 90% ($0.125/M) 90% 平手 数据来自官方文档：\nOpenAI Platform Documentation Anthropic Claude Documentation API 详细基准测试对比 两款模型在 10 个权威基准测试中的表现对比：\n基准测试 测试内容 GPT-5 Codex Claude Sonnet 4.5 优势方 Terminal-Bench Hard 代理编程与终端使用 36% 33% GPT-5 Codex τ²-Bench Telecom 代理工具使用 87% 78% GPT-5 Codex AA-LCR 长上下文推理 69% 66% GPT-5 Codex Humanity\u0026rsquo;s Last Exam 推理与知识 25.6% 17.3% GPT-5 Codex MMLU-Pro 推理与知识 87% 88% Claude Sonnet 4.5 GPQA Diamond 科学推理 84% 83% GPT-5 Codex LiveCodeBench 编程能力 84% 71% GPT-5 Codex SciCode 科学编程 41% 45% Claude Sonnet 4.5 IFBench 指令遵循 74% 57% GPT-5 Codex AIME 2025 竞赛数学 99% 88% GPT-5 Codex 胜负统计：GPT-5 Codex 在 8/10 项测试中领先。\n数据来自 Artificial Analysis - Intelligence Evaluations\n社区反馈与真实用户体验 Reddit 和 Hacker News 讨论总结 通过浏览 Reddit 的 r/ChatGPTCoding、r/ClaudeAI 板块和 Hacker News 上数百条真实用户反馈，整理出以下关键观点：\n支持 GPT-5 Codex 的观点 \u0026ldquo;GPT-5 Codex 在复杂问题和项目级理解上表现更好。\u0026rdquo; - Reddit 用户\n\u0026ldquo;更易控制，执行精确，适合有经验的开发者。\u0026rdquo; - Hacker News 讨论\n\u0026ldquo;在大规模重构上表现更好，而且成本低得多。\u0026rdquo; - Reddit r/ChatGPTCoding\n支持 Claude Sonnet 4.5 的观点 \u0026ldquo;Claude 的规划和架构能力更强，UI 保真度更高。\u0026rdquo; - Reddit 用户\n\u0026ldquo;多工具工作流处理更好，对于绿地项目更友好。\u0026rdquo; - Hacker News 讨论\n\u0026ldquo;代码输出更易读，虽然有时会过于\u0026rsquo;热情\u0026rsquo;地扩展请求。\u0026rdquo; - Reddit r/ClaudeAI\n混合观点 \u0026ldquo;两者各有优势，取决于具体任务类型。对于快速原型，我用 Claude；对于生产代码，我用 GPT-5 Codex。\u0026rdquo; - Reddit 用户\n\u0026ldquo;Claude 在前端任务上更好，GPT-5 Codex 在后端逻辑上更强。\u0026rdquo; - Hacker News 讨论\nSWE-bench Verified 对比 用户提供的数据 模型 得分 备注 Claude Sonnet 4.5 77.2% - 82.0% 标准运行 77.2%，并行测试 82.0% GPT-5 Codex 74.5% - 77% - Anthropic 官方数据（2025 年 9 月 29 日） 模型 SWE-bench Verified 得分 备注 Claude Sonnet 4.5 77.2% （标准运行） ✅ 与用户数据匹配 Claude Sonnet 4.5 82.0% （并行测试） ✅ 与用户数据匹配 GPT-5 Codex 74.5% ✅ 与用户数据匹配 GPT-5 72.8% - Gemini 2.5 Pro 67.2% - 验证结果：用户提供的 SWE-bench Verified 数据与官方数据基本一致\n数据来源 Reddit - Codex CLI + GPT-5-codex discussion Reddit - After using Sonnet 4.5 Hacker News - Claude Sonnet 4.5 discussion 为什么最近社交媒体都在夸 Codex？ 最近浏览社交媒体时，发现一个明显转折。大家都在夸 Codex 好用，为什么会这样？关键在于 OpenAI 在 2025 年 9 月 发布了 GPT-5-Codex，把 AI 编程工具从代码补全器升级成了能独立完成复杂任务的 AI 工程师。\n风评变化过程 2025 年 9 月之前，大家更推崇 Claude。尤其是 OpenAI 停掉旧版 Codex API 之后，Claude 3 Opus 和 Claude 3.5 Sonnet 在编程能力上获得了更多好评。当时开发者普遍认为，Claude 更擅长理解代码、处理大项目，准确性也更高。\n2025 年 9 月之后，风向明显变了。通过浏览大 V 观点、翻阅 Reddit 帖子，也用了 Deep Research 功能搜索验证后，发现大家的说法主要集中在三点：\nCodex 变成了专业选手 - OpenAI 把 GPT-5 专门优化成了软件工程版本。它不只是写代码，还能自己重构、调试、跑长期任务。相比之下，Claude Code 在使用过程中经常会卡住，或者假装自己完成了任务，实际上并没有做完。\n会动态调整效率 - OpenAI 的数据显示，Codex 处理复杂任务时会花两倍时间深度思考，遇到简单任务又能快速搞定。这种智能调节让它应对各种难度都游刃有余。\n产品形态大升级 - Codex 不再只是个 API 接口，而是演变成包含命令行工具、IDE 插件、云端环境的完整系统，更适合大团队使用。\n实际使用 Codex 和 Claude Code 后的感受 9 月前：Claude Code 在代码理解深度、处理大项目和代码可靠性上表现更好，适合个人或小团队精细开发。\n9 月后：真正尝试后发现，Codex 可以完成那些更复杂、更耗时的任务。比如爬取多个网页数据，按规则写代码分析，套用公式计算，最后整理成一篇像样的研究报告，这种需要几个小时的复杂流程，Codex 都能稳定完成。而之前想让 Claude Code 做的一些长时间任务，它总是中途卡住或者没做完就说完成了，但 Codex 却能真正把活干完。\n总结：Codex 更像个能独立干活的 AI 工程师，可以放心交给它长时间复杂任务。Claude Code 更像个能力强的编程助手，适合 Copilot 模式的实时协作。\n使用场景矩阵 根据个人经验，我总结了一个使用场景矩阵：\n场景 项目规模 预算 推荐工具 理由 原型开发 小型 低 Codex 成本低，快速迭代 MVP 开发 中型 中 Claude Code 规划能力强，UI 好 生产环境 大型 高 Codex 成本效益，代码可靠 前端项目 任意 任意 Claude Code UI 保真度高 后端/算法 任意 任意 Codex 逻辑清晰，性能好 代理应用 任意 高 Claude Code 代理能力更强 数据来源 本文数据来自以下高可信度来源：\n官方文档\nOpenAI Platform Documentation Anthropic Claude Documentation Anthropic Official News 权威第三方评测\nArtificial Analysis 专业 LLM 性能评测平台 Surge AI AI 评估专业机构 SonarSource 代码质量分析权威 API 提供商实测\nOpenRouter 多提供商 API 聚合平台 社区讨论\nReddit 的 r/ChatGPTCoding 和 r/ClaudeAI 板块 Hacker News 技术博客如 Composio、BinaryVerseAI ","permalink":"https://miss-you.github.io/posts/20251016-claudecode-vs-codex/","summary":"\u003cp\u003e纠结 Claude Code 还是 Codex？一个贵 4 倍但 SWE-bench 高 3%，一个便宜但社区说\u0026quot;更稳定\u0026quot;。这里有最短路径：同一仓库、同一任务的端到端实测——从 UI 克隆到推荐管线，看清每一分钱花在哪。\u003c/p\u003e\n\u003ch1 id=\"摘要\"\u003e摘要\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e同样预算写更多代码\u003c/strong\u003e → \u003cstrong\u003eCodex\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e更完整不敷衍\u003c/strong\u003e → \u003cstrong\u003eCodex\u003c/strong\u003e，更倾向完成整个 PR 并补测试\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数据分析与快速原型\u003c/strong\u003e → \u003cstrong\u003eCodex\u003c/strong\u003e，更便宜，开发循环更稳定\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e代码清晰易读\u003c/strong\u003e → \u003cstrong\u003eClaude Code\u003c/strong\u003e，代码质量和可读性更好\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e前端 UI 还原度\u003c/strong\u003e → \u003cstrong\u003eClaude Code\u003c/strong\u003e，UI 保真度更高\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e大规模重构调试\u003c/strong\u003e → \u003cstrong\u003eCodex\u003c/strong\u003e，调试循环稳定，token 消耗更少\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e复杂任务与系统操作\u003c/strong\u003e → \u003cstrong\u003eClaude Code\u003c/strong\u003e，SWE-bench 77.2，OSWorld 61.4\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e首字响应速度\u003c/strong\u003e → \u003cstrong\u003eClaude Code\u003c/strong\u003e，Vertex TTFT ≈1.67s\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e超长上下文支持\u003c/strong\u003e → \u003cstrong\u003eClaude Code\u003c/strong\u003e，多云部署可达 1M 上下文\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e成本控制与调优\u003c/strong\u003e → \u003cstrong\u003eCodex\u003c/strong\u003e，可调推理深度，灵活控制速度和费用\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e多云部署灵活性\u003c/strong\u003e → \u003cstrong\u003eClaude Code\u003c/strong\u003e，支持 Anthropic/Bedrock/Vertex/OpenRouter\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e端到端项目成本\u003c/strong\u003e → \u003cstrong\u003eCodex\u003c/strong\u003e，约 $2.50 vs Claude 约 $10.26\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e表现稳定性\u003c/strong\u003e → \u003cstrong\u003eClaude Code\u003c/strong\u003e，波动更小，一致性更好\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e代码漏洞更少\u003c/strong\u003e → \u003cstrong\u003eGPT-5 家族含 Codex\u003c/strong\u003e，但 \u003cstrong\u003eClaude\u003c/strong\u003e 可读性更强\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"端到端开发成本对比\"\u003e端到端开发成本对比\u003c/h1\u003e\n\u003cp\u003eComposio 在同一仓库、同一 MCP 环境下做了实测对比，汇总了不同场景的 Token 与成本差异：\u003c/p\u003e","title":"Claude Code 还是 Codex？贵但强 vs 便宜但稳"},{"content":"为什么想聊这个 最近在听极客公园关于 Sora/Cameo 的对谈，听到 Lovart 创始人陈冕说的这句话「最大的 ToC 应用就是社交」。\n这让我想起来，过去阿里一直想做社交——不论是支付宝、淘宝、闲鱼，都曾经尝试过很多次社交功能。\n但现在，我不想讨论这句话对不对，只是想搞清楚：陈冕为什么这么想？\n我最开始的疑问是：这句话是不是过时了？毕竟 2025 年大家的时间都在短视频、游戏、长视频，谁还在\u0026quot;社交\u0026quot;?\n但查了一圈历史，我发现这个观点从 2013 年就开始有人说，而且说的人越来越多。\n我查到的历史 Kik 创始人 Ted Livingston 在 Fast Company 采访中直白地说：\u0026ldquo;I think everyone is realizing that messaging is the killer app in mobile.\u0026quot;（我觉得大家都在意识到，移动端的杀手级应用是消息）。后来很多文章都引用成\u0026quot;移动端最大/最强的 C 端应用就是消息/社交\u0026rdquo;。\n当然 201x 世代，最绕不过的自然是微信。我印象里，说起张小龙做产品，大家都会说：\u0026ldquo;移动互联网的本质是社交\u0026rdquo;。\n这在产品圈就是说：\u0026ldquo;做 C 端要么做社交本身，要么让产品自带社交分发\u0026rdquo;\u0026quot;\u0026lsquo;社交 + X\u0026rsquo;比\u0026rsquo;X + 社交\u0026rsquo;更容易起量\u0026quot;——这让我想起来王者荣耀、和平精英，都在做营地。\n现在回过头来看，这个说法在 2013–2016 年是对的；但到 2025 年，情况有点变了——社交还在，但已经不是唯一抢夺你我时间的东西了。\n现在我会这么说：消息/社交是互联网时代的水和电，短视频/游戏/长视频/图文/短剧/小说是让你留下来的，电商和广告就是为了赚钱的。\n这个解释完整吗？我刚才分的三层，说的是现在，但没解释\u0026quot;为什么\u0026quot;——为什么所有产品最后都要长出社交？\n我换了个角度想：\n换个角度 我想了想自己最常用的那几个 App——Instagram、TikTok、小红书——它们的共同点：都靠关注、点赞、评论、转发这些人和人的交流来运转。我猜这不是巧合。无论是工具、游戏还是内容平台，做到后面好像都要加社交功能。可能比起新功能或新算法，我们更在意\u0026quot;有人在\u0026quot;?\n比如王者荣耀、火影忍者手游，游戏 AI 的衡量指标不是有多强，而是对局留存、有多像人。\n我觉得「陈冕」说\u0026quot;最大的 To C 应用是社交\u0026quot;，是因为他看懂了用户为什么要用产品。用户需求像个金字塔：最下面的工具是帮你提高效率，中间的内容是让你爽，而最上面的社交，是让你觉得自己重要，被看见。\n【待补充】这里还缺一块：网络效应（你朋友都在用你就不想走）、转移成本（换个 App 你的好友、聊天记录、关注、粉丝都没了）、数据护城河。.. 我还没想清楚它们和\u0026quot;让你觉得自己重要\u0026quot;之间到底是什么关系。\n写到这里，我好像理解了：\n工具解决问题，内容填补时间，只有社交能回答\u0026rsquo;我是谁\u0026rsquo;。\n但我还有个疑问没想通：如果\u0026quot;被看见\u0026quot;是最高层需求，那为什么 Discord、Telegram 这种半匿名的也能做起来？可能还要分\u0026quot;被谁看见\u0026quot;\u0026hellip; 这个留着下次再想。\n","permalink":"https://miss-you.github.io/posts/20251010-product-im/","summary":"\u003ch2 id=\"为什么想聊这个\"\u003e为什么想聊这个\u003c/h2\u003e\n\u003cp\u003e最近在听极客公园关于 Sora/Cameo 的对谈，听到 Lovart 创始人陈冕说的这句话「最大的 ToC 应用就是社交」。\u003c/p\u003e\n\u003cp\u003e这让我想起来，过去阿里一直想做社交——不论是支付宝、淘宝、闲鱼，都曾经尝试过很多次社交功能。\u003c/p\u003e\n\u003cp\u003e但现在，我不想讨论这句话对不对，只是想搞清楚：陈冕为什么这么想？\u003c/p\u003e\n\u003cp\u003e我最开始的疑问是：这句话是不是过时了？毕竟 2025 年大家的时间都在短视频、游戏、长视频，谁还在\u0026quot;社交\u0026quot;?\u003c/p\u003e\n\u003cp\u003e但查了一圈历史，我发现这个观点从 2013 年就开始有人说，而且说的人越来越多。\u003c/p\u003e\n\u003ch2 id=\"我查到的历史\"\u003e我查到的历史\u003c/h2\u003e\n\u003cp\u003eKik 创始人 Ted Livingston 在 Fast Company 采访中直白地说：\u0026ldquo;I think everyone is realizing that messaging is the killer app in mobile.\u0026quot;（我觉得大家都在意识到，移动端的杀手级应用是消息）。后来很多文章都引用成\u0026quot;移动端最大/最强的 C 端应用就是消息/社交\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e当然 201x 世代，最绕不过的自然是微信。我印象里，说起张小龙做产品，大家都会说：\u0026ldquo;移动互联网的本质是社交\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e这在产品圈就是说：\u0026ldquo;做 C 端要么做社交本身，要么让产品自带社交分发\u0026rdquo;\u0026quot;\u0026lsquo;社交 + X\u0026rsquo;比\u0026rsquo;X + 社交\u0026rsquo;更容易起量\u0026quot;——这让我想起来王者荣耀、和平精英，都在做营地。\u003c/p\u003e\n\u003cp\u003e现在回过头来看，这个说法在 2013–2016 年是对的；但到 2025 年，情况有点变了——社交还在，但已经不是唯一抢夺你我时间的东西了。\u003c/p\u003e\n\u003cp\u003e现在我会这么说：消息/社交是互联网时代的水和电，短视频/游戏/长视频/图文/短剧/小说是让你留下来的，电商和广告就是为了赚钱的。\u003c/p\u003e\n\u003cp\u003e这个解释完整吗？我刚才分的三层，说的是现在，但没解释\u0026quot;为什么\u0026quot;——为什么所有产品最后都要长出社交？\u003c/p\u003e\n\u003cp\u003e我换了个角度想：\u003c/p\u003e\n\u003ch2 id=\"换个角度\"\u003e换个角度\u003c/h2\u003e\n\u003cp\u003e我想了想自己最常用的那几个 App——Instagram、TikTok、小红书——它们的共同点：都靠关注、点赞、评论、转发这些人和人的交流来运转。我猜这不是巧合。无论是工具、游戏还是内容平台，做到后面好像都要加社交功能。可能比起新功能或新算法，我们更在意\u0026quot;有人在\u0026quot;?\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e比如王者荣耀、火影忍者手游，游戏 AI 的衡量指标不是有多强，而是对局留存、有多像人。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e我觉得「陈冕」说\u0026quot;最大的 To C 应用是社交\u0026quot;，是因为他看懂了用户为什么要用产品。用户需求像个金字塔：最下面的工具是帮你提高效率，中间的内容是让你爽，而最上面的社交，是让你觉得自己重要，被看见。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e【待补充】这里还缺一块：网络效应（你朋友都在用你就不想走）、转移成本（换个 App 你的好友、聊天记录、关注、粉丝都没了）、数据护城河。.. 我还没想清楚它们和\u0026quot;让你觉得自己重要\u0026quot;之间到底是什么关系。\u003c/p\u003e","title":"为什么所有产品最后都要长出社交？"},{"content":"整理了一批常用且\u0026quot;AI+经济学/计量+业务实践\u0026quot;里高频出现的术语,便于自己日常查询使用\n主要有四种:\n核心AI与经济概念 (Core AI \u0026amp; Economic Concepts):最宏观、最基本的术语。 商业与财务 (Business \u0026amp; Finance):企业运营和财务绩效相关的术语。 AI技术与实现 (AI Technology \u0026amp; Implementation):更具体的技术和工程术语。 研究方法与统计 (Research Methods \u0026amp; Statistics):经济学论文中用于因果推断的计量方法。 1. 核心AI与经济概念 (Core AI \u0026amp; Economic Concepts) GenAI (Generative AI): 生成式人工智能 解释:能够创造新内容(如文本、图像、代码)的AI系统。这是当前AI浪潮的核心。 LLM (Large Language Model): 大语言模型 解释:GenAI的一种,特指基于海量文本数据训练的、能理解和生成人类语言的模型,如GPT-4。 Agentic AI / Agentic Web: 智能体AI / 智能体网络 解释:能够设定目标、记忆、学习并自主执行复杂任务的下一代AI系统及其构成的生态。 AGI (Artificial General Intelligence): 通用人工智能 解释:拥有与人类同等或更高智慧,能解决任何智力任务的理论上的AI。是AI发展的远期目标。 GPT (General Purpose Technology): 通用目的技术 解释:指像蒸汽机、电力、互联网一样,能够对整个经济产生深远、广泛影响的基础性技术。AI被普遍视为一种新的GPT。 TFP (Total Factor Productivity): 全要素生产率 解释:衡量生产效率的宏观经济指标,指不能由资本和劳动等要素投入解释的产出增长部分,通常归因于技术进步。 CES/Cobb-Douglas (Constant Elasticity of Substitution / Cobb-Douglas Production Function): CES/科布-道格拉斯生产函数 解释:经济学中描述生产要素(如资本与劳动)如何组合产出的函数形式。CES函数允许不同的替代弹性(σ),而科布-道格拉斯是其特例(σ=1)。在AI经济研究中,用于建模技术、人力资本和AI之间的替代或互补关系,分析自动化对要素需求的影响。 σ (Elasticity of Substitution): 替代弹性 解释:衡量生产要素之间可替代程度的参数。σ\u0026gt;1表示要素易于替代(如AI可替代劳动),σ\u0026lt;1表示互补性强(AI需配合人类技能)。在AI经济学中,替代弹性决定了自动化技术对就业和工资的影响方向:高替代弹性意味着AI更可能替代工人,低替代弹性则促进协同增效。 SBTC/RBTC (Skill-Biased Technological Change / Routine-Biased Technological Change): 技能偏向/常规任务偏向技术变革 解释:SBTC指技术进步提高了对高技能劳动的需求,扩大技能溢价和工资不平等(1980-2000年代主导叙事)。RBTC进一步细化,指技术主要替代常规性任务(无论高低技能),导致中等技能岗位空心化(job polarization)。GenAI时代的研究关注其是否延续RBTC模式,或转向认知任务偏向(CBTC)。 Complementarity/Substitution (Complementarity/Substitution): 互补性/替代性 解释:描述技术与劳动之间的两种基本关系。互补性指技术提升劳动生产率(如AI辅助工具增强人类能力),替代性指技术直接取代人类完成任务(如自动化流水线)。GenAI同时展现两种特性:在创意、决策等领域互补,在数据处理、内容生成等领域替代,具体取决于任务特征和实施方式。 Network Effects (Network Effects): 网络效应 解释:产品或服务的价值随用户数量增加而提升的现象,也称需求侧规模经济。在AI平台经济中,更多用户生成更多数据,改进算法质量,吸引更多用户,形成正反馈循环(如社交媒体、在线市场)。网络效应是AI巨头形成市场支配地位的关键机制,也引发数据垄断和竞争政策关注。 Two-Sided Market (Two-Sided Market): 双边市场 解释:平台连接两类或多类相互依赖的用户群体(如司机-乘客、开发者-用户),并通过差异化定价协调供需的市场结构。AI平台(如应用商店、云服务市场)典型表现为双边市场,平台需平衡不同边的参与激励,常采用一边补贴(如免费开发者工具)另一边收费(如用户订阅)的策略。 Switching Costs (Switching Costs): 切换成本 解释:用户从一个产品/服务转向竞争对手时产生的成本,包括经济成本(迁移费用)、学习成本(适应新系统)和心理成本(失去积累数据)。在AI生态中,高切换成本(如专有数据格式、定制化模型、API依赖)形成用户锁定效应,降低市场竞争强度,是平台维持市场力量的重要工具。 Learning Curve (Learning Curve / Experience Curve): 学习曲线/经验曲线 解释:累计生产量增加导致单位成本下降的规律,源于生产经验积累、工艺优化和规模效应。在AI产业中,模型训练成本随数据和算力投入累积而下降,先发企业通过学习曲线效应建立成本优势。经验曲线是解释AI巨头竞争壁垒(如GPU采购规模、模型迭代速度)的重要框架。 O*NET (Occupational Information Network): 职业信息网络 解释:美国劳工部维护的职业任务与技能数据库,详细记录每个职业的工作活动、技能要求、工作背景等标准化信息。AI经济学研究中,ONET是构建\u0026quot;任务暴露度\u0026quot;指标的核心数据源:研究者将AI能力与ONET任务描述匹配,量化不同职业受AI影响的程度(如Felten、Eloundou等的暴露度指标)。 SOC/NAICS (Standard Occupational Classification / North American Industry Classification System): 标准职业分类/北美行业分类系统 解释:SOC是美国政府用于职业统计的标准分类体系(如Software Developers属15-1252),NAICS是行业分类体系(如软件出版业属511210)。AI经济研究依赖这些分类系统关联不同数据源(如劳动力统计、企业调查、O*NET任务数据),分析AI在职业-行业层面的影响差异和传导机制。 PIAAC (Programme for the International Assessment of Adult Competencies): 国际成人能力评估项目 解释:OECD组织的大规模国际调查,评估成人在读写、数理和问题解决等领域的实际技能水平(非学历),涵盖多国样本。在AI与技能研究中,PIAAC数据用于衡量实际认知能力分布、匹配任务需求与技能供给、分析技能错配(skill mismatch)问题,补充基于教育年限的人力资本测量。 Scaling Laws (Scaling Laws): 标度律/缩放定律 解释:描述AI模型性能(如损失函数、准确率)与模型规模(参数量)、训练数据量、计算资源(FLOPs)之间幂律关系的经验规律。OpenAI等机构研究表明,性能提升主要受最稀缺资源约束,且呈现可预测的规模回报。Scaling laws是理解AI能力边界、预测技术进步路径、评估经济可行性(如算力成本与性能收益权衡)的关键工具。 2. 商业与财务 (Business \u0026amp; Finance) P\u0026amp;L (Profit and Loss): 损益表 解释:展示公司在一定时期内收入、成本、费用和利润的财务报表。 EBIT (Earnings Before Interest and Taxes): 息税前利润 解释:衡量企业核心运营盈利能力的指标,排除了利息和税收这两个非运营因素的影响。 ROI (Return on Investment): 投资回报率 解释:衡量投资效益的财务比率,计算公式为 (投资收益 / 投资成本) * 100%。 KPI (Key Performance Indicator): 关键绩效指标 解释:用于量化和衡量业务目标达成度的具体指标,例如网站的\u0026quot;日活跃用户数\u0026quot;或销售的\u0026quot;月度转化率\u0026quot;。 SMBs (Small and Medium-sized Businesses): 中小型企业 解释:通常指员工人数和年收入在特定规模以下的企业,是讨论技术普及和经济影响时的重要分析对象。 BPO (Business Process Outsourcing): 业务流程外包 解释:企业将客户服务、人力资源等非核心业务流程交由第三方公司处理的商业模式。AI正在深刻改变这一行业。 SaaS (Software as a Service): 软件即服务 解释:一种通过互联网订阅使用的软件模式,用户无需本地安装。多数AI工具都采用此模式。 CRM (Customer Relationship Management): 客户关系管理 解释:用于管理公司与现有及潜在客户互动的系统或软件(如Salesforce)。AI正被广泛集成进CRM以提升销售和客服效率。 SLA (Service Level Agreement): 服务级别协议 解释:服务提供商(如云服务、BPO公司)对其服务质量、可用性、响应时间等做出的量化承诺。 CIO / COO: 首席信息官 / 首席运营官 解释:公司高层管理者,CIO负责信息技术战略,COO负责日常运营。他们在推动AI落地中扮演关键角色。 Prosumers (Producer + Consumer): 生产型消费者 解释:既消费产品,又深度参与产品创造、改进或推广的用户。在AI领域,指那些能熟练使用AI工具并创造价值的早期采用者。 ESG (Environmental, Social, and Governance): 环境、社会和治理 解释:评估企业可持续性和社会影响的一套标准。有时也指代提供此类评级的公司。 TCO (Total Cost of Ownership): 全生命周期成本 解释:衡量IT系统或产品从采购、部署到运维、退役的全周期总成本,综合计算资本支出(CapEx)与运营支出(OpEx),帮助企业进行更全面的成本效益分析和采购决策。 CAC/LTV (Customer Acquisition Cost/Lifetime Value): 获客成本/用户终身价值 解释:CAC指获取单个新客户所需的平均营销和销售成本;LTV指单个客户在整个生命周期内为企业带来的总收益。LTV/CAC比值是衡量商业模式健康度的关键指标,通常该比值应大于3。 ARR/MRR (Annual/Monthly Recurring Revenue): 年度/月度经常性收入 解释:SaaS和订阅制企业的核心财务指标,ARR是年度可预期的重复性收入,MRR是月度重复性收入。这些指标帮助企业预测现金流、评估业务增长稳定性,是投资者评估订阅制企业价值的重要依据。 ARPU (Average Revenue Per User): 每用户平均收入 解释:特定时期内总收入除以活跃用户数,是衡量用户变现能力的关键指标。ARPU的提升可通过增加用户付费率、提高定价或促进用户升级到高价值套餐来实现,常用于SaaS、电信和互联网行业。 Churn (Churn Rate): 流失率 解释:特定时期内停止使用产品或取消订阅的客户比例,是订阅制和ToB业务的健康度核心指标。包括客户流失率(Customer Churn)和收入流失率(Revenue Churn),低流失率意味着更高的客户留存和可预测收入。 Unit Economics: 单位经济模型 解释:通过分析单个客户或单次交易的收入与成本,评估商业模式在微观层面的盈利性。核心指标包括单客户获取成本、单客户收益、边际贡献等,是判断业务是否可规模化扩张的基础。 TAM/SAM/SOM (Total/Serviceable/Obtainable Market): 总市场/可服务市场/可获取市场 解释:市场规模的三层分析框架:TAM是理论上的总市场规模;SAM是产品实际能服务的细分市场;SOM是短期内实际可获取的市场份额。这一框架帮助企业制定现实的市场策略和增长目标。 PMF (Product-Market Fit): 产品-市场匹配 解释:产品满足强烈市场需求的状态,是创业公司的关键里程碑。达成PMF的标志包括:用户自发推荐、高留存率、强烈的产品需求。Marc Andreessen认为这是创业成功的首要条件。 On-Prem (On-Premises): 本地化部署 解释:软件或系统部署在客户自有的服务器和基础设施上,而非云端。与SaaS模式相对,On-Prem提供更高的数据控制权和安全性,但需要客户自行承担硬件、运维和升级成本,常见于对数据主权有严格要求的企业和行业。 PaaS (Platform as a Service): 平台即服务 解释:云计算服务模型之一,提供包括操作系统、中间件、数据库、开发工具在内的完整应用开发和部署平台。开发者无需管理底层基础设施,专注于应用程序开发,典型代表包括Heroku、Google App Engine。 IaaS (Infrastructure as a Service): 基础设施即服务 解释:云计算的基础层服务模型,提供虚拟化的计算资源(服务器、存储、网络),用户可按需租用并自行配置操作系统和应用。相比传统IT采购,IaaS提供更高的灵活性和成本效益,代表厂商包括AWS EC2、Azure、阿里云。 SLO (Service Level Objectives): 服务等级目标 解释:服务可靠性的量化目标,定义系统在特定时间段内应达到的性能指标(如可用性99.9%、响应时间\u0026lt;200ms)。SLO是SLA(服务等级协议)的基础,帮助团队在可靠性与开发速度之间找到平衡,是SRE文化的核心实践。 3. AI技术与实现 (AI Technology \u0026amp; Implementation) RAG (Retrieval-Augmented Generation): 检索增强生成 解释:一种让LLM在生成回答前,先从外部知识库(如公司内部文档)检索相关信息的技术,以提高回答的准确性和时效性。 Fine-tuning: 微调 解释:在通用预训练模型的基础上,使用特定领域的数据进行二次训练,使其更适应特定任务(如法律合同分析、医疗诊断问答)。 HITL (Human-in-the-loop): 人机协同 / 人在回路 解释:一种AI系统设计模式,在关键决策点(如医疗诊断、内容审核)保留人工审核、确认或干预的环节,以确保安全和质量。 UI / UX (User Interface / User Experience): 用户界面 / 用户体验 解释:UI指用户与软件交互的视觉界面;UX指用户在使用产品过程中的整体感受。好的UI/UX对AI产品的成功至关重要。 API (Application Programming Interface): 应用程序编程接口 解释:允许不同软件程序相互通信和交换数据的\u0026quot;插座\u0026quot;。企业通过API将AI功能(如OpenAI的API)集成到自己的应用中。 NANDA (Networked Agents And Decentralized Architecture): 网络化智能体与去中心化架构 解释:由MIT提出的一个支持不同AI智能体之间互操作和协作的基础设施框架。 MCP / A2A (Model Context Protocol / Agent-to-Agent): 模型上下文协议 / 智能体到智能体协议 解释:与NANDA相关的技术协议,旨在为AI智能体之间的交流和数据交换建立标准。 SFT (Supervised Fine-Tuning): 监督微调 解释:在预训练大模型的基础上,使用带标注的任务数据进行进一步训练,是模型对齐的第一步。通过监督学习让模型学会遵循指令、回答问题等特定任务,是从基础模型到实用模型的关键环节。 RLHF/RLAIF (Reinforcement Learning from Human/AI Feedback): 基于人类/AI反馈的强化学习 解释:通过强化学习让模型学习人类偏好的对齐技术。RLHF使用人类标注员的偏好反馈,RLAIF则使用AI系统的反馈,两者都通过奖励模型引导模型生成更符合人类价值观和期望的输出,是ChatGPT等产品的核心技术。 DPO (Direct Preference Optimization): 直接偏好优化 解释:一种无需强化学习即可进行偏好对齐的优化方法。相比RLHF,DPO直接从偏好数据中学习,省去了训练奖励模型和复杂的RL训练流程,实现更简单、训练更稳定,成本更低。 LoRA (Low-Rank Adaptation): 低秩适配 解释:一种参数高效的微调技术,通过在模型层中插入低秩矩阵,只训练少量新增参数(通常\u0026lt;1%)即可适配下游任务。大幅降低微调的计算和存储成本,使得在消费级硬件上微调大模型成为可能。 Token: 词元 解释:LLM处理文本的基本单位,通常一个token对应一个词、词的一部分或标点符号(中文约1.5-2字/token)。是API计费、上下文长度限制、成本估算的基础度量单位。 Context Window: 上下文窗口 解释:模型在一次推理中能够读取和处理的最大token数量限制。例如32K、128K上下文窗口,决定了模型能\u0026quot;记住\u0026quot;多长的对话历史或文档内容,是衡量模型能力的重要指标。 Hallucination: 幻觉 解释:LLM生成看似合理但实际虚假或无根据内容的现象。模型可能编造事实、引用不存在的文献、虚构数据等,是当前LLM应用中需要重点防范的风险,需通过RAG、Grounding等技术缓解。 Inference: 推理 解释:模型部署后实际调用生成结果的过程,对应训练(Training)概念。推理性能(延迟、吞吐)和成本是生产环境的核心关注点,涉及模型压缩、硬件加速、批处理等优化技术。 PPL (Perplexity): 困惑度 解释:衡量语言模型预测质量的常用指标,数值越低表示模型对文本的预测越准确。在技术层面,困惑度是模型在测试数据上交叉熵的指数,常用于评估预训练和微调效果。 Pass@k/EM (Pass@k/Exact Match): 通过率@k/精确匹配 解释:代码生成和问答任务的评测指标。Pass@k指生成k个候选答案中至少有一个通过测试用例的比例;EM指生成答案与标准答案完全一致的比例,是评估模型准确性的严格标准。 Embedding: 向量嵌入 解释:将文本、图像等数据转换为固定长度的数值向量表示,使得语义相似的内容在向量空间中距离接近。是语义检索、相似度匹配、RAG系统的基础技术,通过专门的Embedding模型生成。 Vector DB/ANN (Vector Database/Approximate Nearest Neighbor): 向量数据库/近似最近邻 解释:专门用于存储和检索高维向量的数据库系统及其核心算法。ANN算法通过牺牲少量精度换取检索速度的大幅提升,使得在百万、亿级向量中毫秒级找到相似向量成为可能,是RAG系统的基础设施。 Cosine Sim. (Cosine Similarity): 余弦相似度 解释:衡量两个向量方向相似性的度量方法,取值范围-1到1,值越接近1表示越相似。在向量检索中,常用余弦相似度评估文本语义相似性,不受向量长度影响,只关注方向。 HNSW/FAISS (Hierarchical Navigable Small World/Facebook AI Similarity Search): HNSW图/FAISS库 解释:两种主流的ANN索引实现技术。HNSW是基于图的多层导航结构,查询速度快;FAISS是Meta开源的向量检索库,支持多种索引算法和GPU加速,广泛应用于生产环境的向量检索系统。 Grounding: 事实锚定 解释:将模型生成内容与可靠外部来源(如权威文档、数据库、搜索结果)关联的技术,确保输出有据可查。通过引用来源、展示证据链等方式提高答案可信度,是减少幻觉、增强可解释性的重要手段。 Tool Use/Function Calling: 工具调用/函数调用 解释:让LLM能够调用外部工具、API或执行函数的能力。模型可以识别何时需要使用工具、生成正确的调用参数,并整合返回结果,使LLM从纯文本生成扩展到完成实际任务(如查询数据库、调用计算器、操作系统等)。 CoT (Chain-of-Thought): 思维链 解释:一种提示技术,引导模型在给出最终答案前,先生成中间推理步骤。通过\u0026quot;让我们一步步思考\u0026quot;等提示,显著提升模型在数学、逻辑等复杂推理任务上的表现,是学术界和工程实践中广泛应用的Prompt Engineering方法。 PII (Personally Identifiable Information): 可识别个人信息 解释:能够直接或间接识别特定个人身份的信息,如姓名、身份证号、手机号、邮箱等。在AI应用中需严格保护PII,遵守GDPR、个人信息保护法等法规,通过脱敏、加密、访问控制等手段确保数据合规。 SDK (Software Development Kit): 软件开发工具包 解释:为开发者提供的一套集成工具、库、文档和示例代码的软件包,简化应用开发流程。AI厂商通常提供SDK封装API调用,处理认证、重试、流式传输等底层细节,让开发者专注业务逻辑。 ETL/ELT (Extract-Transform-Load/Extract-Load-Transform): 抽取-转换-加载/抽取-加载-转换 解释:数据管道的两种架构模式。ETL先转换再加载,适合传统数仓;ELT先加载原始数据再转换,利用现代数仓的计算能力,在AI数据准备中常用于构建训练数据、知识库等场景。 4. 研究方法与统计 (Research Methods \u0026amp; Statistics) DiD (Difference-in-Differences): 双重差分法 解释:一种经典的准实验方法,通过比较一个受政策影响的\u0026quot;处理组\u0026quot;和一个未受影响的\u0026quot;参照组\u0026quot;在政策前后的变化差异,来估计政策的因果效应。 Event Study: 事件研究法 解释:常被视为DiD的动态版本,通过观察某个事件(如AI发布、政策实施)发生前后,目标变量(如股价、生产率)的时间序列变化来评估事件影响。 IV (Instrumental Variables): 工具变量法 解释:当怀疑自变量(X)和因变量(Y)之间存在内生性问题(如反向因果、遗漏变量)时,引入一个\u0026quot;工具变量\u0026quot;(Z),Z只通过X影响Y,而不直接影响Y,从而分离出X对Y的纯粹因果效应。 RDD (Regression Discontinuity Design): 回归断点设计 解释:一种利用规则或阈值(如分数线、年龄限制)来估计因果效应的方法。它比较阈值两侧非常接近的个体,认为他们的差异主要是由该规则造成的。 OLS (Ordinary Least Squares): 普通最小二乘法 解释:最基础和常用的线性回归技术,用于估计变量间线性关系的系数。 Fixed Effects (FE): 固定效应 解释:在面板数据分析中,用于控制那些不随时间变化的、难以观测的个体异质性(如公司文化、地区特征)的一种统计方法。 Natural Experiment: 自然实验 解释:指现实世界中发生的、其影响类似于随机实验的事件(如政策突变、自然灾害),为研究者提供了识别因果关系的机会。 Exclusion Restriction: 排除性限制 解释:工具变量法成立的核心假设,即工具变量除了通过影响内生自变量外,不能有任何其他途径影响因变量。 RCT (Randomized Controlled Trial): 随机对照试验 解释:因果推断的黄金标准方法,通过随机分配受试者到处理组和对照组,确保两组在统计上可比较,从而消除选择偏差,准确识别因果效应。广泛应用于医学、政策评估和产品实验。 PSM (Propensity Score Matching): 倾向得分匹配 解释:一种准实验方法,通过估计个体接受处理的概率(倾向得分),将处理组和对照组中倾向得分相似的个体进行匹配,从而模拟随机化实验,减少选择偏差,用于观测数据的因果推断。 IPW (Inverse Probability Weighting): 逆概率加权 解释:一种通过加权调整样本分布来纠正选择偏差的方法。对每个观测赋予权重(接受处理概率的倒数),使加权后的样本分布接近随机化实验的分布,常与倾向得分结合使用进行因果推断。 TWFE (Two-Way Fixed Effects): 双向固定效应 解释:面板数据分析中的常用回归模型,同时控制个体固定效应和时间固定效应,是双重差分法(DiD)的标准实现方式。能够控制不随时间变化的个体特征和影响所有个体的时间趋势。 Staggered Adoption: 交错采用 解释:政策或干预措施在不同时间点分批次实施的情境,不同个体或地区在不同时期接受处理。这种设计下的双重差分分析需要特别注意处理时间异质性和动态效应,传统TWFE方法可能产生偏误。 ATT/ATE/ATC (Average Treatment effect on the Treated/Effect/on the Controls): 处理组/总体/对照组平均效应 解释:因果推断中三种不同的平均处理效应定义。ATT衡量实际接受处理者的平均效应,ATE衡量总体的平均效应,ATC衡量未接受处理者假设接受处理的平均效应。不同估计量适用于不同的政策问题。 LATE (Local Average Treatment Effect): 局部平均处理效应 解释:工具变量方法估计的因果效应,特指工具变量影响下\u0026quot;合规者\u0026quot;(因工具变量改变而改变处理状态的子群体)的平均处理效应。LATE通常小于总体效应,其外推性取决于合规者的代表性。 ITT/TOT/CACE (Intention-To-Treat/Treatment-on-the-Treated/Complier Average Causal Effect): 意向治疗/实际接受处理/合规者平均因果效应 解释:处理不完全合规情境下的三种效应估计。ITT基于最初分配估计效应(保留随机化),TOT估计实际接受处理者的效应,CACE等同于LATE。ITT提供保守但稳健的下界估计。 SUTVA (Stable Unit Treatment Value Assumption): 稳定单元处理值假设 解释:因果推断的核心假设之一,要求个体的潜在结果不受其他个体处理状态的影响(无溢出效应),且处理只有一种形式(无隐藏变异)。违反SUTVA会导致因果效应估计偏误,需要考虑网络效应或干扰。 Parallel Trends: 平行趋势假设 解释:双重差分法的核心识别假设,要求在没有政策干预的反事实情境下,处理组和对照组的结果变量趋势应当平行。通常通过事前趋势检验(pre-trend test)和事件研究图来验证该假设的合理性。 DAG (Directed Acyclic Graph): 有向无环图 解释:因果推断中用于表示变量间因果关系的图形工具,节点代表变量,有向边代表因果关系,\u0026ldquo;无环\u0026quot;确保无循环因果。DAG帮助研究者识别混淆变量、中介变量和对撞变量,指导控制变量的选择。 Backdoor/Frontdoor (Backdoor/Frontdoor Criteria): 后门/前门条件 解释:基于DAG的因果识别准则。后门准则要求控制变量集合阻断所有从处理到结果的\u0026quot;后门路径\u0026rdquo;(非因果关联路径),前门准则通过中介变量识别因果效应。这两个准则为控制混淆提供了形式化规则。 Weak IV: 弱工具变量 解释:工具变量与内生解释变量相关性较弱的情况,通常用第一阶段回归的F统计量诊断(经验阈值约为10)。弱工具变量会导致估计量偏误、置信区间失效和推断不稳健,需要使用专门的弱工具变量稳健推断方法。 Overidentification Test: 过度识别检验 解释:当工具变量数量多于内生变量时,可以检验工具变量的有效性假设(外生性)。常用的检验包括Sargan检验和Hansen J检验。拒绝原假设表明至少部分工具变量可能不满足外生性条件。 Synthetic Control: 合成控制法 解释:一种准实验方法,用于单个或少数处理单元的政策评估。通过对照组单元的加权组合构造一个\u0026quot;合成对照组\u0026quot;,使其在干预前的特征和趋势与处理组尽可能匹配,用合成对照组的干预后结果作为反事实基准估计政策效应。 DML (Double/Debiased Machine Learning): 双重/去偏机器学习 解释:结合机器学习和因果推断的方法,在高维协变量情境下估计因果效应。通过样本分割和交叉拟合,使用机器学习预测干扰变量,同时保证目标因果参数估计的渐近正态性和有效推断,避免正则化偏差。 HTE (Heterogeneous Treatment Effects): 异质性处理效应 解释:不同子群体或个体对同一处理的效应存在差异。识别和估计HTE对于精准政策制定和个性化决策至关重要。常用方法包括子组分析、交互项回归、因果森林和元学习器等机器学习方法。 Clustered SEs (Cluster-Robust SEs): 聚类稳健标准误 解释:当数据存在聚类结构(如学生嵌套于学校、个体重复观测)且组内观测相关时,需要使用聚类稳健标准误进行推断。该方法允许组内任意相关性,但要求聚类数量足够大(通常建议至少30个聚类)。 Newey–West (Newey–West): NW稳健标准误 解释:一种异方差和自相关一致性(HAC)标准误估计方法,用于时间序列数据中存在自相关和异方差的情况。通过选择适当的滞后阶数(带宽),对协方差矩阵进行加权调整,使推断在违反经典假设时仍然有效。 Bootstrap: 自助法 解释:一种基于重抽样的统计推断方法,通过从原始样本中有放回地重复抽样,生成大量\u0026quot;自助样本\u0026quot;,从而估计统计量的分布和不确定性。适用于难以得到解析解的复杂估计量,无需依赖渐近分布假设。 Multiple Testing/FDR (False Discovery Rate): 多重检验/错误发现率 解释:当同时进行多个假设检验时,需要调整显著性水平以控制假阳性率膨胀。FDR控制被拒绝原假设中错误拒绝的期望比例,相比传统的族错误率(FWER)控制方法(如Bonferroni校正)更具检验功效。 Bandwidth (RDD): 带宽选择 解释:断点回归设计中的关键调参,决定使用断点附近多大范围内的观测进行局部估计。带宽越小偏差越小但方差越大,带宽越大则相反。常用数据驱动的方法(如IK、CCT)进行最优带宽选择,平衡偏差-方差权衡。 McCrary Test: McCrary密度检验 解释:断点回归设计的有效性检验,检查分配变量(running variable)在断点处是否存在密度跳跃。如果个体可以精确操纵分配变量跨越断点,密度会出现不连续,违反断点回归的随机化假设,导致估计偏误。 A/B Test: A/B测试 解释:在线产品和服务中最常用的随机对照实验方法,通过随机将用户分配到不同版本(A版本和B版本),比较关键指标(如转化率、留存率)的差异,快速评估产品改进或策略调整的因果效应。 MDE (Minimum Detectable Effect): 最小可检出效应 解释:在给定样本量、显著性水平和检验功效下,实验能够可靠检测到的最小效应值。MDE是样本量规划的核心指标,MDE越小需要的样本量越大。在实验设计阶段评估MDE是否满足业务需求至关重要。 Power (Statistical Power): 检验功效 解释:当原假设为假时正确拒绝原假设的概率,记为1-β(β为第二类错误概率)。高功效意味着实验有足够能力发现真实存在的效应。功效分析用于实验设计阶段确定所需样本量,或事后评估未显著结果的可信度。 CTR/CR (Click-Through Rate/Conversion Rate): 点击率/转化率 解释:在线产品和数字营销中的核心业务指标。CTR衡量用户点击率(点击数/曝光数),CR衡量转化率(转化数/访问数)。这些比率型指标是A/B测试的常见目标变量,需注意比率估计的统计性质(如Delta方法)。 Uplift Modeling: 提升模型 解释:一类直接建模处理增量效应的机器学习方法,预测个体接受处理相对于不接受处理的结果差异(个体处理效应)。常用于精准营销和个性化推荐,识别对干预最敏感的用户,优化资源配置和投放策略。 Guardrail Metrics: 护栏指标 解释:在线实验中用于确保产品稳定性、用户体验和生态健康的监控指标。虽然不是实验的主要优化目标,但必须在可接受范围内(如页面加载时间、错误率、用户投诉)。护栏指标异常会触发实验暂停或回滚。 p50/p95/p99: 分位延迟 解释:用于描述系统性能和用户体验的分位数指标,分别表示50%、95%、99%的请求延迟低于该值。相比平均值,分位数对极端值不敏感,能更好地刻画用户实际体验。p95和p99常用于服务等级目标(SLO)设定。 Canary: 金丝雀发布 解释:一种渐进式发布策略,先将新版本部署到小比例流量(如5%),密切监控关键指标和护栏指标,确认无异常后再逐步扩大流量。这种方式能够在早期发现问题并快速回滚,降低发布风险,是工程实践中的风险控制手段。 MLE (Maximum Likelihood Estimation): 极大似然估计 解释:一种参数估计的基本方法,通过最大化观测数据在参数模型下的似然函数来估计参数值。MLE具有良好的大样本性质(一致性、渐近正态性、渐近有效性),是统计推断和计量经济学中最常用的估计方法之一。 Logit/Probit: 二项响应模型 解释:用于二元因变量(0/1)的回归模型。Logit模型假设误差项服从逻辑分布,Probit模型假设服从正态分布。两者通常给出相似结果,Logit模型的系数解释为对数几率比,计算更简便,在实证研究中更为常用。 RE (Random Effects): 随机效应 解释:面板数据模型的一种设定,假设个体特定效应与解释变量不相关,将个体效应视为随机误差的一部分。相比固定效应,随机效应模型更有效率且能估计时间不变变量的系数,但需要更强的外生性假设。Hausman检验用于选择固定或随机效应。 Heteroskedasticity: 异方差 解释:误差项方差随解释变量变化而变化,违反了经典线性回归的同方差假设。异方差会导致OLS标准误估计不一致,使推断失效(虽然系数估计仍然无偏)。常用稳健标准误(White标准误)或加权最小二乘法(WLS)处理异方差。 Normalization/Standardization: 归一化/标准化 解释:特征预处理的常用方法。归一化通常指将数据缩放到[0,1]区间(如Min-Max缩放),标准化指将数据转换为均值为0、标准差为1(Z-score标准化)。这些方法消除量纲影响,改善优化算法收敛性,在机器学习和因果推断中广泛应用。 Winsorize: 温莎化 解释:一种处理极端值的稳健方法,将分布两端超过特定分位数(如1%和99%)的值替换为该分位数的值,而不是直接删除。温莎化保留了样本量,减少极端值对估计的影响,在金融和经济数据分析中特别常用。 Z-score: Z分数 解释:标准化后的数据值,表示原始值距离均值有多少个标准差。Z-score = (X - μ) / σ。Z分数用于跨变量比较、异常值检测(通常|Z|\u0026gt;3视为异常)和标准化处理。在正态分布假设下,Z分数有明确的概率解释。 GLS (Generalized Least Squares): 广义最小二乘 解释:当误差项存在异方差或自相关时,OLS不再是最有效的估计量。GLS通过对观测值进行加权变换,使变换后的误差满足经典假设,从而获得更有效的估计。GLS需要已知误差的协方差结构,实践中常用可行GLS(FGLS)。 ","permalink":"https://miss-you.github.io/posts/20251006-ai-economy-keyword-list/","summary":"\u003cp\u003e整理了一批常用且\u0026quot;AI+经济学/计量+业务实践\u0026quot;里高频出现的术语,便于自己日常查询使用\u003c/p\u003e\n\u003cp\u003e主要有四种:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e核心AI与经济概念 (Core AI \u0026amp; Economic Concepts)\u003c/strong\u003e:最宏观、最基本的术语。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e商业与财务 (Business \u0026amp; Finance)\u003c/strong\u003e:企业运营和财务绩效相关的术语。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAI技术与实现 (AI Technology \u0026amp; Implementation)\u003c/strong\u003e:更具体的技术和工程术语。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e研究方法与统计 (Research Methods \u0026amp; Statistics)\u003c/strong\u003e:经济学论文中用于因果推断的计量方法。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"1-核心ai与经济概念-core-ai--economic-concepts\"\u003e\u003cstrong\u003e1. 核心AI与经济概念 (Core AI \u0026amp; Economic Concepts)\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGenAI (Generative AI): 生成式人工智能\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:能够创造新内容(如文本、图像、代码)的AI系统。这是当前AI浪潮的核心。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLLM (Large Language Model): 大语言模型\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:GenAI的一种,特指基于海量文本数据训练的、能理解和生成人类语言的模型,如GPT-4。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAgentic AI / Agentic Web: 智能体AI / 智能体网络\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:能够设定目标、记忆、学习并自主执行复杂任务的下一代AI系统及其构成的生态。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAGI (Artificial General Intelligence): 通用人工智能\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:拥有与人类同等或更高智慧,能解决任何智力任务的理论上的AI。是AI发展的远期目标。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGPT (General Purpose Technology): 通用目的技术\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:指像蒸汽机、电力、互联网一样,能够对整个经济产生深远、广泛影响的基础性技术。AI被普遍视为一种新的GPT。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTFP (Total Factor Productivity): 全要素生产率\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:衡量生产效率的宏观经济指标,指不能由资本和劳动等要素投入解释的产出增长部分,通常归因于技术进步。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCES/Cobb-Douglas (Constant Elasticity of Substitution / Cobb-Douglas Production Function): CES/科布-道格拉斯生产函数\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:经济学中描述生产要素(如资本与劳动)如何组合产出的函数形式。CES函数允许不同的替代弹性(σ),而科布-道格拉斯是其特例(σ=1)。在AI经济研究中,用于建模技术、人力资本和AI之间的替代或互补关系,分析自动化对要素需求的影响。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eσ (Elasticity of Substitution): 替代弹性\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:衡量生产要素之间可替代程度的参数。σ\u0026gt;1表示要素易于替代(如AI可替代劳动),σ\u0026lt;1表示互补性强(AI需配合人类技能)。在AI经济学中,替代弹性决定了自动化技术对就业和工资的影响方向:高替代弹性意味着AI更可能替代工人,低替代弹性则促进协同增效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSBTC/RBTC (Skill-Biased Technological Change / Routine-Biased Technological Change): 技能偏向/常规任务偏向技术变革\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:SBTC指技术进步提高了对高技能劳动的需求,扩大技能溢价和工资不平等(1980-2000年代主导叙事)。RBTC进一步细化,指技术主要替代常规性任务(无论高低技能),导致中等技能岗位空心化(job polarization)。GenAI时代的研究关注其是否延续RBTC模式,或转向认知任务偏向(CBTC)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComplementarity/Substitution (Complementarity/Substitution): 互补性/替代性\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:描述技术与劳动之间的两种基本关系。互补性指技术提升劳动生产率(如AI辅助工具增强人类能力),替代性指技术直接取代人类完成任务(如自动化流水线)。GenAI同时展现两种特性:在创意、决策等领域互补,在数据处理、内容生成等领域替代,具体取决于任务特征和实施方式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNetwork Effects (Network Effects): 网络效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:产品或服务的价值随用户数量增加而提升的现象,也称需求侧规模经济。在AI平台经济中,更多用户生成更多数据,改进算法质量,吸引更多用户,形成正反馈循环(如社交媒体、在线市场)。网络效应是AI巨头形成市场支配地位的关键机制,也引发数据垄断和竞争政策关注。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTwo-Sided Market (Two-Sided Market): 双边市场\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:平台连接两类或多类相互依赖的用户群体(如司机-乘客、开发者-用户),并通过差异化定价协调供需的市场结构。AI平台(如应用商店、云服务市场)典型表现为双边市场,平台需平衡不同边的参与激励,常采用一边补贴(如免费开发者工具)另一边收费(如用户订阅)的策略。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSwitching Costs (Switching Costs): 切换成本\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:用户从一个产品/服务转向竞争对手时产生的成本,包括经济成本(迁移费用)、学习成本(适应新系统)和心理成本(失去积累数据)。在AI生态中,高切换成本(如专有数据格式、定制化模型、API依赖)形成用户锁定效应,降低市场竞争强度,是平台维持市场力量的重要工具。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLearning Curve (Learning Curve / Experience Curve): 学习曲线/经验曲线\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:累计生产量增加导致单位成本下降的规律,源于生产经验积累、工艺优化和规模效应。在AI产业中,模型训练成本随数据和算力投入累积而下降,先发企业通过学习曲线效应建立成本优势。经验曲线是解释AI巨头竞争壁垒(如GPU采购规模、模型迭代速度)的重要框架。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eO*NET (Occupational Information Network): 职业信息网络\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:美国劳工部维护的职业任务与技能数据库,详细记录每个职业的工作活动、技能要求、工作背景等标准化信息。AI经济学研究中,O\u003cem\u003eNET是构建\u0026quot;任务暴露度\u0026quot;指标的核心数据源:研究者将AI能力与O\u003c/em\u003eNET任务描述匹配,量化不同职业受AI影响的程度(如Felten、Eloundou等的暴露度指标)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSOC/NAICS (Standard Occupational Classification / North American Industry Classification System): 标准职业分类/北美行业分类系统\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:SOC是美国政府用于职业统计的标准分类体系(如Software Developers属15-1252),NAICS是行业分类体系(如软件出版业属511210)。AI经济研究依赖这些分类系统关联不同数据源(如劳动力统计、企业调查、O*NET任务数据),分析AI在职业-行业层面的影响差异和传导机制。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePIAAC (Programme for the International Assessment of Adult Competencies): 国际成人能力评估项目\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:OECD组织的大规模国际调查,评估成人在读写、数理和问题解决等领域的实际技能水平(非学历),涵盖多国样本。在AI与技能研究中,PIAAC数据用于衡量实际认知能力分布、匹配任务需求与技能供给、分析技能错配(skill mismatch)问题,补充基于教育年限的人力资本测量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eScaling Laws (Scaling Laws): 标度律/缩放定律\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:描述AI模型性能(如损失函数、准确率)与模型规模(参数量)、训练数据量、计算资源(FLOPs)之间幂律关系的经验规律。OpenAI等机构研究表明,性能提升主要受最稀缺资源约束,且呈现可预测的规模回报。Scaling laws是理解AI能力边界、预测技术进步路径、评估经济可行性(如算力成本与性能收益权衡)的关键工具。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-商业与财务-business--finance\"\u003e\u003cstrong\u003e2. 商业与财务 (Business \u0026amp; Finance)\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eP\u0026amp;L (Profit and Loss): 损益表\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:展示公司在一定时期内收入、成本、费用和利润的财务报表。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEBIT (Earnings Before Interest and Taxes): 息税前利润\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:衡量企业核心运营盈利能力的指标,排除了利息和税收这两个非运营因素的影响。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eROI (Return on Investment): 投资回报率\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:衡量投资效益的财务比率,计算公式为 (投资收益 / 投资成本) * 100%。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKPI (Key Performance Indicator): 关键绩效指标\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:用于量化和衡量业务目标达成度的具体指标,例如网站的\u0026quot;日活跃用户数\u0026quot;或销售的\u0026quot;月度转化率\u0026quot;。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSMBs (Small and Medium-sized Businesses): 中小型企业\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:通常指员工人数和年收入在特定规模以下的企业,是讨论技术普及和经济影响时的重要分析对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBPO (Business Process Outsourcing): 业务流程外包\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:企业将客户服务、人力资源等非核心业务流程交由第三方公司处理的商业模式。AI正在深刻改变这一行业。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSaaS (Software as a Service): 软件即服务\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种通过互联网订阅使用的软件模式,用户无需本地安装。多数AI工具都采用此模式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCRM (Customer Relationship Management): 客户关系管理\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:用于管理公司与现有及潜在客户互动的系统或软件(如Salesforce)。AI正被广泛集成进CRM以提升销售和客服效率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSLA (Service Level Agreement): 服务级别协议\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:服务提供商(如云服务、BPO公司)对其服务质量、可用性、响应时间等做出的量化承诺。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCIO / COO: 首席信息官 / 首席运营官\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:公司高层管理者,CIO负责信息技术战略,COO负责日常运营。他们在推动AI落地中扮演关键角色。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProsumers (Producer + Consumer): 生产型消费者\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:既消费产品,又深度参与产品创造、改进或推广的用户。在AI领域,指那些能熟练使用AI工具并创造价值的早期采用者。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eESG (Environmental, Social, and Governance): 环境、社会和治理\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:评估企业可持续性和社会影响的一套标准。有时也指代提供此类评级的公司。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTCO (Total Cost of Ownership): 全生命周期成本\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:衡量IT系统或产品从采购、部署到运维、退役的全周期总成本,综合计算资本支出(CapEx)与运营支出(OpEx),帮助企业进行更全面的成本效益分析和采购决策。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCAC/LTV (Customer Acquisition Cost/Lifetime Value): 获客成本/用户终身价值\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:CAC指获取单个新客户所需的平均营销和销售成本;LTV指单个客户在整个生命周期内为企业带来的总收益。LTV/CAC比值是衡量商业模式健康度的关键指标,通常该比值应大于3。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eARR/MRR (Annual/Monthly Recurring Revenue): 年度/月度经常性收入\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:SaaS和订阅制企业的核心财务指标,ARR是年度可预期的重复性收入,MRR是月度重复性收入。这些指标帮助企业预测现金流、评估业务增长稳定性,是投资者评估订阅制企业价值的重要依据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eARPU (Average Revenue Per User): 每用户平均收入\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:特定时期内总收入除以活跃用户数,是衡量用户变现能力的关键指标。ARPU的提升可通过增加用户付费率、提高定价或促进用户升级到高价值套餐来实现,常用于SaaS、电信和互联网行业。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eChurn (Churn Rate): 流失率\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:特定时期内停止使用产品或取消订阅的客户比例,是订阅制和ToB业务的健康度核心指标。包括客户流失率(Customer Churn)和收入流失率(Revenue Churn),低流失率意味着更高的客户留存和可预测收入。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnit Economics: 单位经济模型\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:通过分析单个客户或单次交易的收入与成本,评估商业模式在微观层面的盈利性。核心指标包括单客户获取成本、单客户收益、边际贡献等,是判断业务是否可规模化扩张的基础。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTAM/SAM/SOM (Total/Serviceable/Obtainable Market): 总市场/可服务市场/可获取市场\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:市场规模的三层分析框架:TAM是理论上的总市场规模;SAM是产品实际能服务的细分市场;SOM是短期内实际可获取的市场份额。这一框架帮助企业制定现实的市场策略和增长目标。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePMF (Product-Market Fit): 产品-市场匹配\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:产品满足强烈市场需求的状态,是创业公司的关键里程碑。达成PMF的标志包括:用户自发推荐、高留存率、强烈的产品需求。Marc Andreessen认为这是创业成功的首要条件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOn-Prem (On-Premises): 本地化部署\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:软件或系统部署在客户自有的服务器和基础设施上,而非云端。与SaaS模式相对,On-Prem提供更高的数据控制权和安全性,但需要客户自行承担硬件、运维和升级成本,常见于对数据主权有严格要求的企业和行业。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePaaS (Platform as a Service): 平台即服务\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:云计算服务模型之一,提供包括操作系统、中间件、数据库、开发工具在内的完整应用开发和部署平台。开发者无需管理底层基础设施,专注于应用程序开发,典型代表包括Heroku、Google App Engine。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIaaS (Infrastructure as a Service): 基础设施即服务\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:云计算的基础层服务模型,提供虚拟化的计算资源(服务器、存储、网络),用户可按需租用并自行配置操作系统和应用。相比传统IT采购,IaaS提供更高的灵活性和成本效益,代表厂商包括AWS EC2、Azure、阿里云。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSLO (Service Level Objectives): 服务等级目标\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:服务可靠性的量化目标,定义系统在特定时间段内应达到的性能指标(如可用性99.9%、响应时间\u0026lt;200ms)。SLO是SLA(服务等级协议)的基础,帮助团队在可靠性与开发速度之间找到平衡,是SRE文化的核心实践。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-ai技术与实现-ai-technology--implementation\"\u003e\u003cstrong\u003e3. AI技术与实现 (AI Technology \u0026amp; Implementation)\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRAG (Retrieval-Augmented Generation): 检索增强生成\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种让LLM在生成回答前,先从外部知识库(如公司内部文档)检索相关信息的技术,以提高回答的准确性和时效性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFine-tuning: 微调\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:在通用预训练模型的基础上,使用特定领域的数据进行二次训练,使其更适应特定任务(如法律合同分析、医疗诊断问答)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHITL (Human-in-the-loop): 人机协同 / 人在回路\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种AI系统设计模式,在关键决策点(如医疗诊断、内容审核)保留人工审核、确认或干预的环节,以确保安全和质量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUI / UX (User Interface / User Experience): 用户界面 / 用户体验\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:UI指用户与软件交互的视觉界面;UX指用户在使用产品过程中的整体感受。好的UI/UX对AI产品的成功至关重要。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAPI (Application Programming Interface): 应用程序编程接口\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:允许不同软件程序相互通信和交换数据的\u0026quot;插座\u0026quot;。企业通过API将AI功能(如OpenAI的API)集成到自己的应用中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNANDA (Networked Agents And Decentralized Architecture): 网络化智能体与去中心化架构\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:由MIT提出的一个支持不同AI智能体之间互操作和协作的基础设施框架。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMCP / A2A (Model Context Protocol / Agent-to-Agent): 模型上下文协议 / 智能体到智能体协议\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:与NANDA相关的技术协议,旨在为AI智能体之间的交流和数据交换建立标准。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSFT (Supervised Fine-Tuning): 监督微调\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:在预训练大模型的基础上,使用带标注的任务数据进行进一步训练,是模型对齐的第一步。通过监督学习让模型学会遵循指令、回答问题等特定任务,是从基础模型到实用模型的关键环节。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRLHF/RLAIF (Reinforcement Learning from Human/AI Feedback): 基于人类/AI反馈的强化学习\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:通过强化学习让模型学习人类偏好的对齐技术。RLHF使用人类标注员的偏好反馈,RLAIF则使用AI系统的反馈,两者都通过奖励模型引导模型生成更符合人类价值观和期望的输出,是ChatGPT等产品的核心技术。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDPO (Direct Preference Optimization): 直接偏好优化\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种无需强化学习即可进行偏好对齐的优化方法。相比RLHF,DPO直接从偏好数据中学习,省去了训练奖励模型和复杂的RL训练流程,实现更简单、训练更稳定,成本更低。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLoRA (Low-Rank Adaptation): 低秩适配\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种参数高效的微调技术,通过在模型层中插入低秩矩阵,只训练少量新增参数(通常\u0026lt;1%)即可适配下游任务。大幅降低微调的计算和存储成本,使得在消费级硬件上微调大模型成为可能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eToken: 词元\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:LLM处理文本的基本单位,通常一个token对应一个词、词的一部分或标点符号(中文约1.5-2字/token)。是API计费、上下文长度限制、成本估算的基础度量单位。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eContext Window: 上下文窗口\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:模型在一次推理中能够读取和处理的最大token数量限制。例如32K、128K上下文窗口,决定了模型能\u0026quot;记住\u0026quot;多长的对话历史或文档内容,是衡量模型能力的重要指标。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHallucination: 幻觉\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:LLM生成看似合理但实际虚假或无根据内容的现象。模型可能编造事实、引用不存在的文献、虚构数据等,是当前LLM应用中需要重点防范的风险,需通过RAG、Grounding等技术缓解。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInference: 推理\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:模型部署后实际调用生成结果的过程,对应训练(Training)概念。推理性能(延迟、吞吐)和成本是生产环境的核心关注点,涉及模型压缩、硬件加速、批处理等优化技术。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePPL (Perplexity): 困惑度\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:衡量语言模型预测质量的常用指标,数值越低表示模型对文本的预测越准确。在技术层面,困惑度是模型在测试数据上交叉熵的指数,常用于评估预训练和微调效果。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePass@k/EM (Pass@k/Exact Match): 通过率@k/精确匹配\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:代码生成和问答任务的评测指标。Pass@k指生成k个候选答案中至少有一个通过测试用例的比例;EM指生成答案与标准答案完全一致的比例,是评估模型准确性的严格标准。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEmbedding: 向量嵌入\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:将文本、图像等数据转换为固定长度的数值向量表示,使得语义相似的内容在向量空间中距离接近。是语义检索、相似度匹配、RAG系统的基础技术,通过专门的Embedding模型生成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVector DB/ANN (Vector Database/Approximate Nearest Neighbor): 向量数据库/近似最近邻\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:专门用于存储和检索高维向量的数据库系统及其核心算法。ANN算法通过牺牲少量精度换取检索速度的大幅提升,使得在百万、亿级向量中毫秒级找到相似向量成为可能,是RAG系统的基础设施。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCosine Sim. (Cosine Similarity): 余弦相似度\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:衡量两个向量方向相似性的度量方法,取值范围-1到1,值越接近1表示越相似。在向量检索中,常用余弦相似度评估文本语义相似性,不受向量长度影响,只关注方向。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHNSW/FAISS (Hierarchical Navigable Small World/Facebook AI Similarity Search): HNSW图/FAISS库\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:两种主流的ANN索引实现技术。HNSW是基于图的多层导航结构,查询速度快;FAISS是Meta开源的向量检索库,支持多种索引算法和GPU加速,广泛应用于生产环境的向量检索系统。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGrounding: 事实锚定\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:将模型生成内容与可靠外部来源(如权威文档、数据库、搜索结果)关联的技术,确保输出有据可查。通过引用来源、展示证据链等方式提高答案可信度,是减少幻觉、增强可解释性的重要手段。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTool Use/Function Calling: 工具调用/函数调用\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:让LLM能够调用外部工具、API或执行函数的能力。模型可以识别何时需要使用工具、生成正确的调用参数,并整合返回结果,使LLM从纯文本生成扩展到完成实际任务(如查询数据库、调用计算器、操作系统等)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCoT (Chain-of-Thought): 思维链\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种提示技术,引导模型在给出最终答案前,先生成中间推理步骤。通过\u0026quot;让我们一步步思考\u0026quot;等提示,显著提升模型在数学、逻辑等复杂推理任务上的表现,是学术界和工程实践中广泛应用的Prompt Engineering方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePII (Personally Identifiable Information): 可识别个人信息\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:能够直接或间接识别特定个人身份的信息,如姓名、身份证号、手机号、邮箱等。在AI应用中需严格保护PII,遵守GDPR、个人信息保护法等法规,通过脱敏、加密、访问控制等手段确保数据合规。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSDK (Software Development Kit): 软件开发工具包\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:为开发者提供的一套集成工具、库、文档和示例代码的软件包,简化应用开发流程。AI厂商通常提供SDK封装API调用,处理认证、重试、流式传输等底层细节,让开发者专注业务逻辑。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eETL/ELT (Extract-Transform-Load/Extract-Load-Transform): 抽取-转换-加载/抽取-加载-转换\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:数据管道的两种架构模式。ETL先转换再加载,适合传统数仓;ELT先加载原始数据再转换,利用现代数仓的计算能力,在AI数据准备中常用于构建训练数据、知识库等场景。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-研究方法与统计-research-methods--statistics\"\u003e\u003cstrong\u003e4. 研究方法与统计 (Research Methods \u0026amp; Statistics)\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDiD (Difference-in-Differences): 双重差分法\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种经典的准实验方法,通过比较一个受政策影响的\u0026quot;处理组\u0026quot;和一个未受影响的\u0026quot;参照组\u0026quot;在政策前后的变化差异,来估计政策的因果效应。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEvent Study: 事件研究法\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:常被视为DiD的动态版本,通过观察某个事件(如AI发布、政策实施)发生前后,目标变量(如股价、生产率)的时间序列变化来评估事件影响。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIV (Instrumental Variables): 工具变量法\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:当怀疑自变量(X)和因变量(Y)之间存在内生性问题(如反向因果、遗漏变量)时,引入一个\u0026quot;工具变量\u0026quot;(Z),Z只通过X影响Y,而不直接影响Y,从而分离出X对Y的纯粹因果效应。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRDD (Regression Discontinuity Design): 回归断点设计\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种利用规则或阈值(如分数线、年龄限制)来估计因果效应的方法。它比较阈值两侧非常接近的个体,认为他们的差异主要是由该规则造成的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOLS (Ordinary Least Squares): 普通最小二乘法\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:最基础和常用的线性回归技术,用于估计变量间线性关系的系数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFixed Effects (FE): 固定效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:在面板数据分析中,用于控制那些不随时间变化的、难以观测的个体异质性(如公司文化、地区特征)的一种统计方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNatural Experiment: 自然实验\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:指现实世界中发生的、其影响类似于随机实验的事件(如政策突变、自然灾害),为研究者提供了识别因果关系的机会。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExclusion Restriction: 排除性限制\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:工具变量法成立的核心假设,即工具变量除了通过影响内生自变量外,不能有任何其他途径影响因变量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRCT (Randomized Controlled Trial): 随机对照试验\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:因果推断的黄金标准方法,通过随机分配受试者到处理组和对照组,确保两组在统计上可比较,从而消除选择偏差,准确识别因果效应。广泛应用于医学、政策评估和产品实验。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePSM (Propensity Score Matching): 倾向得分匹配\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种准实验方法,通过估计个体接受处理的概率(倾向得分),将处理组和对照组中倾向得分相似的个体进行匹配,从而模拟随机化实验,减少选择偏差,用于观测数据的因果推断。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIPW (Inverse Probability Weighting): 逆概率加权\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种通过加权调整样本分布来纠正选择偏差的方法。对每个观测赋予权重(接受处理概率的倒数),使加权后的样本分布接近随机化实验的分布,常与倾向得分结合使用进行因果推断。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTWFE (Two-Way Fixed Effects): 双向固定效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:面板数据分析中的常用回归模型,同时控制个体固定效应和时间固定效应,是双重差分法(DiD)的标准实现方式。能够控制不随时间变化的个体特征和影响所有个体的时间趋势。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStaggered Adoption: 交错采用\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:政策或干预措施在不同时间点分批次实施的情境,不同个体或地区在不同时期接受处理。这种设计下的双重差分分析需要特别注意处理时间异质性和动态效应,传统TWFE方法可能产生偏误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eATT/ATE/ATC (Average Treatment effect on the Treated/Effect/on the Controls): 处理组/总体/对照组平均效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:因果推断中三种不同的平均处理效应定义。ATT衡量实际接受处理者的平均效应,ATE衡量总体的平均效应,ATC衡量未接受处理者假设接受处理的平均效应。不同估计量适用于不同的政策问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLATE (Local Average Treatment Effect): 局部平均处理效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:工具变量方法估计的因果效应,特指工具变量影响下\u0026quot;合规者\u0026quot;(因工具变量改变而改变处理状态的子群体)的平均处理效应。LATE通常小于总体效应,其外推性取决于合规者的代表性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eITT/TOT/CACE (Intention-To-Treat/Treatment-on-the-Treated/Complier Average Causal Effect): 意向治疗/实际接受处理/合规者平均因果效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:处理不完全合规情境下的三种效应估计。ITT基于最初分配估计效应(保留随机化),TOT估计实际接受处理者的效应,CACE等同于LATE。ITT提供保守但稳健的下界估计。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSUTVA (Stable Unit Treatment Value Assumption): 稳定单元处理值假设\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:因果推断的核心假设之一,要求个体的潜在结果不受其他个体处理状态的影响(无溢出效应),且处理只有一种形式(无隐藏变异)。违反SUTVA会导致因果效应估计偏误,需要考虑网络效应或干扰。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eParallel Trends: 平行趋势假设\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:双重差分法的核心识别假设,要求在没有政策干预的反事实情境下,处理组和对照组的结果变量趋势应当平行。通常通过事前趋势检验(pre-trend test)和事件研究图来验证该假设的合理性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDAG (Directed Acyclic Graph): 有向无环图\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:因果推断中用于表示变量间因果关系的图形工具,节点代表变量,有向边代表因果关系,\u0026ldquo;无环\u0026quot;确保无循环因果。DAG帮助研究者识别混淆变量、中介变量和对撞变量,指导控制变量的选择。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBackdoor/Frontdoor (Backdoor/Frontdoor Criteria): 后门/前门条件\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:基于DAG的因果识别准则。后门准则要求控制变量集合阻断所有从处理到结果的\u0026quot;后门路径\u0026rdquo;(非因果关联路径),前门准则通过中介变量识别因果效应。这两个准则为控制混淆提供了形式化规则。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWeak IV: 弱工具变量\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:工具变量与内生解释变量相关性较弱的情况,通常用第一阶段回归的F统计量诊断(经验阈值约为10)。弱工具变量会导致估计量偏误、置信区间失效和推断不稳健,需要使用专门的弱工具变量稳健推断方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOveridentification Test: 过度识别检验\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:当工具变量数量多于内生变量时,可以检验工具变量的有效性假设(外生性)。常用的检验包括Sargan检验和Hansen J检验。拒绝原假设表明至少部分工具变量可能不满足外生性条件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSynthetic Control: 合成控制法\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种准实验方法,用于单个或少数处理单元的政策评估。通过对照组单元的加权组合构造一个\u0026quot;合成对照组\u0026quot;,使其在干预前的特征和趋势与处理组尽可能匹配,用合成对照组的干预后结果作为反事实基准估计政策效应。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDML (Double/Debiased Machine Learning): 双重/去偏机器学习\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:结合机器学习和因果推断的方法,在高维协变量情境下估计因果效应。通过样本分割和交叉拟合,使用机器学习预测干扰变量,同时保证目标因果参数估计的渐近正态性和有效推断,避免正则化偏差。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHTE (Heterogeneous Treatment Effects): 异质性处理效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:不同子群体或个体对同一处理的效应存在差异。识别和估计HTE对于精准政策制定和个性化决策至关重要。常用方法包括子组分析、交互项回归、因果森林和元学习器等机器学习方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClustered SEs (Cluster-Robust SEs): 聚类稳健标准误\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:当数据存在聚类结构(如学生嵌套于学校、个体重复观测)且组内观测相关时,需要使用聚类稳健标准误进行推断。该方法允许组内任意相关性,但要求聚类数量足够大(通常建议至少30个聚类)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNewey–West (Newey–West): NW稳健标准误\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种异方差和自相关一致性(HAC)标准误估计方法,用于时间序列数据中存在自相关和异方差的情况。通过选择适当的滞后阶数(带宽),对协方差矩阵进行加权调整,使推断在违反经典假设时仍然有效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBootstrap: 自助法\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种基于重抽样的统计推断方法,通过从原始样本中有放回地重复抽样,生成大量\u0026quot;自助样本\u0026quot;,从而估计统计量的分布和不确定性。适用于难以得到解析解的复杂估计量,无需依赖渐近分布假设。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Testing/FDR (False Discovery Rate): 多重检验/错误发现率\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:当同时进行多个假设检验时,需要调整显著性水平以控制假阳性率膨胀。FDR控制被拒绝原假设中错误拒绝的期望比例,相比传统的族错误率(FWER)控制方法(如Bonferroni校正)更具检验功效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBandwidth (RDD): 带宽选择\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:断点回归设计中的关键调参,决定使用断点附近多大范围内的观测进行局部估计。带宽越小偏差越小但方差越大,带宽越大则相反。常用数据驱动的方法(如IK、CCT)进行最优带宽选择,平衡偏差-方差权衡。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMcCrary Test: McCrary密度检验\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:断点回归设计的有效性检验,检查分配变量(running variable)在断点处是否存在密度跳跃。如果个体可以精确操纵分配变量跨越断点,密度会出现不连续,违反断点回归的随机化假设,导致估计偏误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eA/B Test: A/B测试\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:在线产品和服务中最常用的随机对照实验方法,通过随机将用户分配到不同版本(A版本和B版本),比较关键指标(如转化率、留存率)的差异,快速评估产品改进或策略调整的因果效应。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMDE (Minimum Detectable Effect): 最小可检出效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:在给定样本量、显著性水平和检验功效下,实验能够可靠检测到的最小效应值。MDE是样本量规划的核心指标,MDE越小需要的样本量越大。在实验设计阶段评估MDE是否满足业务需求至关重要。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePower (Statistical Power): 检验功效\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:当原假设为假时正确拒绝原假设的概率,记为1-β(β为第二类错误概率)。高功效意味着实验有足够能力发现真实存在的效应。功效分析用于实验设计阶段确定所需样本量,或事后评估未显著结果的可信度。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCTR/CR (Click-Through Rate/Conversion Rate): 点击率/转化率\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:在线产品和数字营销中的核心业务指标。CTR衡量用户点击率(点击数/曝光数),CR衡量转化率(转化数/访问数)。这些比率型指标是A/B测试的常见目标变量,需注意比率估计的统计性质(如Delta方法)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUplift Modeling: 提升模型\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一类直接建模处理增量效应的机器学习方法,预测个体接受处理相对于不接受处理的结果差异(个体处理效应)。常用于精准营销和个性化推荐,识别对干预最敏感的用户,优化资源配置和投放策略。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGuardrail Metrics: 护栏指标\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:在线实验中用于确保产品稳定性、用户体验和生态健康的监控指标。虽然不是实验的主要优化目标,但必须在可接受范围内(如页面加载时间、错误率、用户投诉)。护栏指标异常会触发实验暂停或回滚。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ep50/p95/p99: 分位延迟\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:用于描述系统性能和用户体验的分位数指标,分别表示50%、95%、99%的请求延迟低于该值。相比平均值,分位数对极端值不敏感,能更好地刻画用户实际体验。p95和p99常用于服务等级目标(SLO)设定。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCanary: 金丝雀发布\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种渐进式发布策略,先将新版本部署到小比例流量(如5%),密切监控关键指标和护栏指标,确认无异常后再逐步扩大流量。这种方式能够在早期发现问题并快速回滚,降低发布风险,是工程实践中的风险控制手段。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMLE (Maximum Likelihood Estimation): 极大似然估计\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种参数估计的基本方法,通过最大化观测数据在参数模型下的似然函数来估计参数值。MLE具有良好的大样本性质(一致性、渐近正态性、渐近有效性),是统计推断和计量经济学中最常用的估计方法之一。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLogit/Probit: 二项响应模型\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:用于二元因变量(0/1)的回归模型。Logit模型假设误差项服从逻辑分布,Probit模型假设服从正态分布。两者通常给出相似结果,Logit模型的系数解释为对数几率比,计算更简便,在实证研究中更为常用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRE (Random Effects): 随机效应\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:面板数据模型的一种设定,假设个体特定效应与解释变量不相关,将个体效应视为随机误差的一部分。相比固定效应,随机效应模型更有效率且能估计时间不变变量的系数,但需要更强的外生性假设。Hausman检验用于选择固定或随机效应。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHeteroskedasticity: 异方差\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:误差项方差随解释变量变化而变化,违反了经典线性回归的同方差假设。异方差会导致OLS标准误估计不一致,使推断失效(虽然系数估计仍然无偏)。常用稳健标准误(White标准误)或加权最小二乘法(WLS)处理异方差。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNormalization/Standardization: 归一化/标准化\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:特征预处理的常用方法。归一化通常指将数据缩放到[0,1]区间(如Min-Max缩放),标准化指将数据转换为均值为0、标准差为1(Z-score标准化)。这些方法消除量纲影响,改善优化算法收敛性,在机器学习和因果推断中广泛应用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWinsorize: 温莎化\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:一种处理极端值的稳健方法,将分布两端超过特定分位数(如1%和99%)的值替换为该分位数的值,而不是直接删除。温莎化保留了样本量,减少极端值对估计的影响,在金融和经济数据分析中特别常用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eZ-score: Z分数\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:标准化后的数据值,表示原始值距离均值有多少个标准差。Z-score = (X - μ) / σ。Z分数用于跨变量比较、异常值检测(通常|Z|\u0026gt;3视为异常)和标准化处理。在正态分布假设下,Z分数有明确的概率解释。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGLS (Generalized Least Squares): 广义最小二乘\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e解释:当误差项存在异方差或自相关时,OLS不再是最有效的估计量。GLS通过对观测值进行加权变换,使变换后的误差满足经典假设,从而获得更有效的估计。GLS需要已知误差的协方差结构,实践中常用可行GLS(FGLS)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"AI经济学术语速查手册"},{"content":"我是 yousa，一名关注 AI 落地策略的大厂资深研发。\n本文用 15 分钟告诉你可执行的判断标准与 5% 成功样本的落地清单。你将能学习到：① 判断 95% 的成因是否适用于你；② 明确 Buy/Build 的前提；③ 72 小时内验证一个后台场景。\n当前全球 95% 的企业为 GenAI（生成式 AI）投入了数百亿美元，却普遍未见成效，为什么？报告认为，原因不在模型能力，而在于采购方的实施方法。\nMIT NANDA 追踪 300+ 项目发现：那 5% 的成功，靠的是三件反常识的事——Buy（外部合作）而非 Build（内部自建）、优先后台 ROI 而非前台、按业务成果而非模型指标评估。\n本文结构：\n第一部分：报告核心发现 - 95% 失败的根源在哪？5% 成功的做对了什么？ 第二部分：可信度验证 - 这个结论靠谱吗？四份研究的共识与分歧是什么？ 第三部分：实践清单 - 如果你现在就要落地 GenAI，应该做什么、问什么？ 第一部分：报告核心发现 高采用率 vs 低转型效果 企业在 GenAI 上已投入数百亿美元。但在 2025 年 1–6 月采访期内，95% 的受访组织并未看到 P\u0026amp;L（损益）改善。\n相比之下，那 5% 与现有工作流深度集成的项目创造了超百万美元价值。这些价值主要来自减少外部支出——取消 BPO 合同、削减外部代理费。\n四种 GenAI 鸿沟模式 报告将“GenAI 鸿沟”归纳为四类：\n有限颠覆：八个主要行业中，仅科技与媒体出现些许可衡量收益，其他行业无明显收益。 企业悖论：大型企业试点多、投入大，但成功率极低。它们难以将定制化 GenAI 工具转化为规模化生产部署，成功率远低于中型市场公司。 投资偏见：超过 50% 预算分配到销售/营销；但高 ROI（投资回报）往往来自运营与财务等后台领域。 实施优势：外部合作采购（Buy）的落地成功率显著高于内部自建（Build）。 GenAI 系统的学习能力是关键 AI 落地的拦路虎不在基础设施、法规或人才，而是 GenAI 系统“不会学习”。系统记不住上下文，也接不住现有流程。做得好的组织把 AI 与流程深度集成，并用反馈让系统持续改进。\n企业用户做简单任务更偏爱 ChatGPT 等通用 LLM；一到关键任务，因缺乏记忆便弃用。70% 用 AI 处理邮件、摘要、基础分析；遇到高风险工作（客户管理、多周项目），90% 仍交给人，即便是初级岗位。\n成功组织的共同特征 报告认为跨越 GenAI 鸿沟的 5% 组织有四个特征：\n策略：优先外部合作（Buy），少自建（Build）。按运营结果而非模型基准评估。要求工具可定制、能与现有流程深度集成。 技术：只选具学习与记忆的 Agentic AI。系统需从反馈持续学习、保留上下文、随时间改进，弥补“学习鸿沟”。 组织：把采用权下放给一线经理与领域专家（Prosumers）。自下而上推进，确保方案贴合实际流程。 投资：把钱投向后台运营以拿到实效。相比销售/营销，运营、财务、采购的自动化产出更快、更可持续，主要体现在减少外部支出（如 BPO 合同）。 因果链：95% 未见 P\u0026amp;L → 后台 ROI 更高 → Buy \u0026gt; Build → 学习能力为胜负手\n第二部分：可信度验证 看到\u0026quot;95% 失败\u0026quot;这个数字，你可能和我一样的第一反应是：这会不会太悲观了？\n毕竟市面上不少报告都在讲 GenAI 如何提升效率、创造价值。为什么 MIT 的结论这么极端？是样本问题、方法论问题，还是真的就是这么残酷？\n让我用三个方法来验证这份报告的可信度：方法论审查、交叉验证四份同类报告、提炼共识。\n方法论审查 报告是使用什么样的方式进行调研的？\n重新精读完报告后，我发现本报告主要用这三种方法调研：\n半结构化高管/一线访谈（52 个组织，附录有完整访谈提纲：投资/建购决策、ROI 指标、规模化障碍等） 轻量问卷（四个主要行业会议上收集到的 153 位高管的调查问卷） 系统地回顾 300+ 公开披露的 AI 项目 调研方式有一定说服力，那么业界对于该报告的看法是怎么样的呢？学界对于该报告有哪些争议呢？\n交叉验证四份同类报告 近 1 年以来，类似主题的报告结论和研究方法与本报告有什么异同？\n我用 GPT 和 Google 检索，从「问卷/题型、指标定义、样本构成」等角度对比，搜索到了「IDC、McKinsey、Snowflake」等对于该问题做的研究。\n四份报告的简要对比如下：\nMIT 最悲观 (95%失败），IDC 最乐观 (ROI 3.7×); 关键差异在于\u0026quot;成功定义\u0026quot;——MIT 要求企业级 P\u0026amp;L 改善，IDC 接受部门级自报 ROI。\n详细对比表格：\n机构 / 报告 问卷题型（示例） 指标定义（ROI / EBIT / 成本 / 收入口径） 样本构成 IDC（Microsoft 赞助）《2024 Business Opportunity of AI》 典型问题：“贵组织每在 GenAI 上投入 1 美元，ROI 约为多少倍？”；并询问各职能“当前在用 / 24 个月内计划在用”等采用题。(143485449.fs1.hubspotusercontent-eu1.net) ROI＝受访者对“每投入 1 美元的回报倍数”的自报估算；给出全球均值 3.7×、行业/地区拆分与“领军者 10.3×”。未设置企业级 EBIT 归因口径；成本/收入以用例层面成效叙述为主。(143485449.fs1.hubspotusercontent-eu1.net) 时间/版本：InfoBrief，2024-11（IDC #US52699124）；样本：全球 4,000+ 决策者（正文页）；ROI 图表样本 n=3,343（全球；另给各地区 n）；调研时间：2024-08；赞助：Microsoft。(143485449.fs1.hubspotusercontent-eu1.net) McKinsey《The State of AI: How organizations are rewiring to capture value》（2025-03） 多维组织与成效问卷：谁负责** AI 治理**、是否重构流程、业务单元收入/成本过去 12 个月变化；以及企业层面 EBIT 归因问题。 EBIT：以“过去 12 个月企业层面 EBIT 可归因于 genAI 的占比”衡量；文中指出“\u0026gt;80% 尚未看到企业级 EBIT 的‘可感知影响’；17%称 ≥5% EBIT 可归因于 genAI”；同时统计业务单元层面的收入上升与成本下降（功能维度）。 样本：1,491 名参与者；在线问卷时间 2024-07-16~31；覆盖 101 个国家、各行业/规模（其中 ≥$5 亿营收企业比例较高）。报告发布日期：2025-03。 Snowflake × ESG《Radical ROI of Generative AI》（2025-04） 典型题：是否已量化 ROI、每 100 万美元投入的回报额；当前目标与落地挑战（数据准备、治理、成本超预期等）也有定项选择题。(Intelligent CIO) ROI：两类口径并用——“已经回本（正 ROI）”占比与已量化的平均 ROI（$1→$1.41，即 41% ROI）；未设企业级 EBIT 归因指标。样本核心为早期采用者（production 中使用商用/开源模型）。(Snowflake) 样本/时间窗：共 3,324 受访组织，其中** 1,900** 为“早期采用者”；调研期 2024-11-21~2025-01-10；覆盖 9 国；发布：2025-04-15（新闻稿）。(Intelligent CIO) MIT Media Lab（NANDA）《The GenAI Divide: State of AI in Business 2025》（初稿，2025-07） 多方法：①半结构化高管/一线访谈（附完整访谈提纲：投资/建购决策、ROI 指标、规模化障碍等）；②轻量问卷（4 大会议场景回收）；③系统性案头回顾（300+ 公开项目）。 成功/ROI 定义：将“成功”界定为越过试点、形成可度量 KPI 的部署；ROI 影响在试点后 6 个月评估，并按部门规模做校准；总论断称“约 95% 的组织未获得可衡量的 P\u0026amp;L 回报，仅 5% 的集成式试点产生了百万级价值”。（附方法与局限披露。） 研究期：2025-01~06；样本：52 家组织深访、153 位高级管理者问卷、300+ 公开实现复盘；产出性质：与 MIT NANDA 合作制作（方法/偏差在附录披露）。 我来简单解读上述表格，偏主观，仅供参考：\nIDC \u0026amp; Snowflake：乐观派 多为用例/部门的自报 ROI，样本偏向已采用者和早期采用者，结论偏乐观。\nMcKinsey：保守派 强调企业级 EBIT 归因，结论更保守。\nMIT NANDA：严格派 采用短窗（6 个月）和严格的成功定义。样本量虽小，但更关注实际 P\u0026amp;L 收益。标准高、收益窗口短，加上 AI 的 J 型收益曲线还未显现，导致结论偏悲观。\n核心差异在哪？ 口径差异是主因——\u0026ldquo;乐观 vs. 审慎\u0026quot;的衡量标准不同。同样，样本构成的差异（已采用者 vs. 全体企业）也导致了结论的不同。\n综上，我认为本报告 5% 的成功率可能过于悲观。但 GenAI 工具对企业的收益提升不明显、落地困难，这确实普遍存在。\n提炼共识 既然各报告结论差异这么大（从 IDC 的 ROI 3.7× 到 MIT 的 95% 失败），那我们应该相信谁？\n相信共识，质疑非共识。\n这四份报告立场、方法、样本各不相同：IDC 乐观、McKinsey 保守、Snowflake 关注早期采用者、MIT 标准严格。但当它们在某些关键问题上不约而同地得出相同结论时，那些共识才是我们真正应该关注的。\n我整理了一下，有四个共识与两个非共识：\n类别 主题 要点/结论 例证/说明 共识 工作流再设计与深度集成 把 GenAI 当作流程重构工具，而非“叠个助手” 麦肯锡对 25 个属性做关联分析，发现“重构工作流”对企业层面 EBIT 影响的相关性最大 共识 数据平台能力很重要 可扩展算力与存储、实时/批集成、分析能力、数据共享易用性、安全与治理 Snowflake×ESG 的受访“早期采用者”在平台选型里打分最高的项之一 共识 针对于具体业务改造（RAG/微调/多模型） 训练/增强/微调是“必做功课”，其提升了上下文与任务相关性 90%+ 受访早期采用者进行训练/增强，80%+ 用自有数据微调；大规模采用 RAG 共识 清晰的度量/KPI 与变革推进 将解决方案嵌入业务流程、开展角色化培训、建立反馈回路持续改进、用 KPI 跟踪采用率与 ROI 等 麦肯锡提出的“规模化最佳实践”集合的一部分 共识 人才与技能 “流程+培训+变革管理”与成效显著相关，缺乏技能是推进的头号障碍 IDC 报告 非共识 Agentic AI 的记忆/学习能力 胜负手 Agentic + Memory Frameworks 非共识 采购 vs 自建（Buy vs Build） 外部合作成功率更高；自研自建更易失败 适用于 GenAI/Agentic AI 采买场景 总结一下，我认为，这篇报告包括调研部分置信度高——非共识部分可以选择性接受。\n基于上述分析，我对「报告要点总结」中的 1-2 部分评估置信度（0–100），仅供参考：\n模块 判断点 置信度（0-100） 依据/理由 高采用率 vs 低转型效果 95% 未见 P\u0026amp;L 改善；5% 深度集成项目百万级价值 70 多报告在企业级 EBIT 上结论偏保守；短窗+严格成功定义致比例偏低，但方向成立；价值主要来自外部支出下降 四种 GenAI 鸿沟模式 有限颠覆：仅科技/媒体见明显收益 95 行业差异与样本支持，但其他行业亦有零星成效，证据仍在积累 四种 GenAI 鸿沟模式 企业悖论：大企业试点多但难规模化 90 多来源指向治理/流程改造不足导致推进受阻；中型公司偶有优势但非定律 四种 GenAI 鸿沟模式 投资偏见：预算偏销售/营销，高 ROI 在后台 100 运营/财务自动化更快显现可持续 ROI，与多报告一致 四种 GenAI 鸿沟模式 实施优势：Buy \u0026gt; Build 95 能力与时间窗相关，外部合作更易落地；但强研发组织可例外 第三部分：实践清单 理论分析完了，那 5% 成功的组织到底做对了什么？\n前面两部分我们验证了报告可信度、梳理了四份研究的共识。但如果你现在就要评估一个 GenAI 工具、或者推动一个落地项目，具体应该怎么做？\n这一部分，我从报告中提炼了最有价值的实践案例和行动清单。按\u0026quot;构建者\u0026rdquo;、\u0026ldquo;购买者\u0026rdquo;、\u0026ldquo;企业主\u0026quot;三个角色分类，告诉你每个角色应该关注什么、做什么。\n成功案例：节省在哪？ 报告中 5% 成功的组织，具体在哪方面成功了？我总结出三种类型：\n替代业务流程外包 (BPO Elimination)：在客户服务和文件处理等领域，通过 AI 自动化，每年可以节省 200 万至 1000 万美元的 BPO 合同费用。 减少代理机构支出 (Agency Spend Reduction)：在外部创意和内容制作方面，AI 工具的应用使得公司的代理费用减少了 30%。 节约外包风险管理成本：一家金融服务公司通过 AI 自动化风险检查，每年在外包风险管理上节省了 100 万美元。 最佳实践：三类角色清单 作为 AI 工具公司或采购 AI 工具的企业，报告中哪些点最重要？\n我整理了构建者、购买者和企业主的最佳实践要点：\n角色 原则 关键动作 预期收益 构建者 从“human-in-the-loop”开始，逐步自动化 先 HITL（human-in-the-loop） 增强；设人工校正阈值；性能达标再下放给自动化 风险可控；从真实决策中学习；稳定性提升 构建者 为特定工作流程定制 微调专有数据；与现有系统（如 Salesforce/ServiceNow）集成；定制 UI 任务相关性更高；落地成功率提升 构建者 设计反馈循环 采集纠错与结果；在线学习/批量重训；闭环改进 随时间持续改进；错误率下降 构建者 优先信任与透明度 可解释；允许人工覆盖；提供性能与边界文档/SLA 采用率提升；组织阻力下降 购买者 小步快跑，快速迭代 选小用例做试点；阶段评审；达标后扩域 降低试错成本；缩短验证周期 购买者 优先考虑集成 预构建连接器；开放 API；与厂商协作做定制集成 上线更快；维护成本更低；流程不中断 购买者 关注用户体验 终端用户参与评估；提供培训与支持；持续收集反馈 采用率与使用深度提升 购买者 衡量重要事项 与业务共建 KPI；跟踪生产率/成本/满意度/收入 可证明 ROI；便于争取后续预算 企业主/管理者 思维转变：像 BPO 客户思考 寻找深度定制、对业务结果负责的战略伙伴；要求深度共建 结果导向；避免“买工具不改流程” 企业主/管理者 组织设计：授权一线，优先 Buy 一线主导选型与推广；以外部合作起步；明确采用/成效责任 采纳率更高；落地更快；失败率下降 企业主/管理者 投资策略：优先后台 ROI 聚焦运营/财务/采购；以替代 BPO、削减外包为主 可持续 ROI；潜在年节省数百万美元 企业主/管理者 评估标准：重业务成果 共建 KPI（如资格审查提速、外部费用下降）；试点前设阈值 可证明价值；便于争取预算与扩域 如果明天就要评估一个 GenAI 工具，你应该问供应商什么问题？\n上面的最佳实践表格内容很多，但核心逻辑可以浓缩为三个问题——这三个问题能帮你快速判断一个 GenAI 工具是否值得投入：\n它会记住我们的反馈并持续改进吗？ 6 个月后会更懂我们的业务，还是和第一天一样？ 供应商愿意按业务成果而非 license 数付费吗？ 说明： 本文基于 MIT NANDA 项目 2025 年 7 月报告整理，并对比了 IDC、McKinsey、Snowflake 三份同期研究。置信度评估仅代表个人判断，非共识部分（如 Agentic AI、Buy vs Build) 可选择性接受。完整报告链接见文中引用。\n附录：部分术语参考 核心概念 GenAI: 生成式人工智能 (Generative AI)。能够生成文本、图像、代码等内容的 AI 系统。2022 年末以来的 AI 变革主要围绕着 GenAI「LLM、扩散模型、生图生视频等」 Agentic AI / Agentic Web: 智能体 AI / 智能体网络。能够记忆、学习、并自主行动的下一代 AI 系统和由其构成的互联生态 LLM: 大语言模型 (Large Language Model)。如 ChatGPT、Claude 等基于深度学习的文本生成模型\n财务与组织术语 P\u0026amp;L: 损益表 (Profit and Loss)。企业一定时期内收入、成本和利润的财务报表 EBIT: 息税前利润 (Earnings Before Interest and Taxes)。衡量企业运营盈利能力的关键财务指标，排除了利息和税收的影响 ROI: 投资回报率 (Return on Investment)。投资收益与投资成本的比率 BPO: 业务流程外包 (Business Process Outsourcing)。将非核心业务流程外包给第三方服务商 KPI: 关键绩效指标 (Key Performance Indicator)。用于衡量业务目标完成情况的量化指标\n技术术语 RAG: 检索增强生成 (Retrieval-Augmented Generation)。通过检索外部知识库来增强大语言模型回答准确性的技术 Fine-tuning/微调: 使用特定领域数据对预训练 AI 模型进行二次训练，以适应特定任务的技术方法 HITL / Human-in-the-loop: AI 系统设计模式，关键决策点保留人工审核和干预 UI: 用户界面 (User Interface)。用户与软件系统交互的视觉和操作界面 SLA: 服务级别协议 (Service Level Agreement)。供应商对服务质量、可用性等的承诺标准 CRM: 客户关系管理系统 (Customer Relationship Management)。如 Salesforce 等管理客户交互和数据的软件平台\n组织与人群 Prosumers: 生产型消费者。既是产品消费者，又能参与生产和改进的用户，这里指熟练使用 AI 工具并推动组织采用的员工 SMBs: 中小型企业 (Small and Medium-sized Businesses)\n机构与框架 NANDA: 网络化智能体与去中心化架构 (Networked Agents And Decentralized Architecture)。MIT 提出的支持智能体互操作的基础设施框架 IDC: 国际数据公司 (International Data Corporation)。全球知名的 IT 行业研究与咨询机构 ESG: 企业社会责任评级公司 (Enterprise Strategy Group)， 也指环境、社会和治理 (Environmental, Social, and Governance) 标准\n","permalink":"https://miss-you.github.io/posts/20251003-how-to-jump-genai-gap/","summary":"MIT 追踪 300+ 项目揭示：95% GenAI 项目失败的根源与 5% 成功的关键。","title":"GenAI 工具选购和决策指南"},{"content":"OpenAI研究揭秘：7亿用户如何使用ChatGPT 2025 年 9 月 15 日，美国国家经济研究局（NBER）发布了一份题为《人们如何使用 ChatGPT》的工作论文。这项研究由 OpenAI 的经济研究团队与哈佛大学经济学家 David Deming 联合完成。通过对 150 万次对话进行隐私保护下的大规模分析，该研究首次全面揭示了全球 7 亿用户是如何使用 ChatGPT 的。\n论文要点 主要观点 ChatGPT 的增长是前所未有的：自 2022 年 11 月发布以来，ChatGPT 经历了史无前例的全球性快速增长。到 2025 年 7 月，其周活跃用户（WAU）已超过 7 亿，约占全球成年人口的 10%。用户每日发送的消息量超过 25 亿条。\n使用场景以非工作为主，且增长更快：尽管工作相关的使用在稳定增长，但与工作无关的个人用途增长速度更快。非工作用途的消息占比从 2024 年 6 月的 53%增长到了 2025 年 6 月的 73%。\n核心功能是决策支持和内容生成：用户主要将 ChatGPT 用于三大目的：\u0026ldquo;实用指导\u0026rdquo;、\u0026ldquo;信息查询\u0026quot;和\u0026quot;写作\u0026rdquo;，这三者合计占所有对话的近 80%（具体为 77%）。尤其在工作场景中，\u0026ldquo;写作\u0026quot;是最核心的用途，占所有工作相关消息的 40%（截至 2025 年 6 月）。 用户意图从\u0026quot;执行\u0026quot;转向\u0026quot;提问\u0026rdquo;：用户的使用模式正在变化。寻求信息、建议以辅助决策的\u0026quot;提问\u0026quot;类互动（占比 49%），其增长速度已超过了让 AI 直接完成任务的\u0026quot;执行\u0026quot;类互动（占比 40%）。同时，用户对\u0026quot;提问\u0026quot;类互动的满意度更高。\n用户群体日益多元化：早期的用户以男性为主（约占 80%），但到 2025 年 6 月，拥有典型女性名字的活跃用户比例已略微超过男性，性别差距基本消除。用户群体呈现年轻化趋势，18-25 岁的用户发送了约 46%的消息。此外，在低收入和中等收入国家的增长尤为迅速。\n核心结论（附具体数据） ChatGPT 通过决策支持创造经济价值：该论文认为，ChatGPT 的核心经济价值在于提供决策支持。这解释了为什么拥有研究生学历的用户（相比学士以下学历）进行\u0026quot;提问\u0026quot;的可能性要高出约两个百分点，以及为什么在计算机相关职业中，47%的工作消息是\u0026quot;提问\u0026quot;，远高于非专业职业的 32%。\n生成式 AI 的福利收益潜力巨大：非工作用途占比已超过 70%并仍在快速增长，这表明生成式 AI 为个人生活带来的价值和消费者盈余可能非常可观。论文引用了 Collis and Brynjolfsson (2025) 的研究，估算出仅在美国，用户愿意支付 98 美元来避免一个月无法使用生成式 AI，这意味着每年至少有 970 亿美元的消费者盈余。\n写作是 AI 相比传统技术的核心优势：与传统搜索引擎相比，ChatGPT 等生成式 AI 的独特之处在于其强大的内容生成能力。在所有工作任务中，写作辅助是其最突出的应用，占工作相关消息的 40%。值得注意的是，约三分之二（66.7%）的写作请求是修改或优化用户提供的文本，而非从零开始创作。\n不同职业的使用模式趋同：尽管不同职业的具体任务不同，但他们使用 ChatGPT 的核心工作活动却惊人地相似。\u0026ldquo;做决策和解决问题\u0026quot;这一项，在所有可以报告至少两个工作活动的职业组中，都是排名前两位的最常见活动。同样，\u0026ldquo;记录/存档信息\u0026quot;在所有职业中都排名前四。这表明跨职业的通用需求是信息处理和决策辅助。\n拓展阅读 How People Use ChatGPT Chatterji, Aaron; Cunningham, Thomas; Deming, David J.; Hitzig, Zoe; Ong, Christopher; Yan Shan, Carl; Wadman, Kevin. How People Use ChatGPT. NBER Working Paper No. 34255, September 2025. DOI: 10.3386/w34255。 How people are using ChatGPT ","permalink":"https://miss-you.github.io/posts/20250918-openai-how-people-use-chatgpt/","summary":"\u003ch1 id=\"openai研究揭秘7亿用户如何使用chatgpt\"\u003eOpenAI研究揭秘：7亿用户如何使用ChatGPT\u003c/h1\u003e\n\u003cp\u003e2025 年 9 月 15 日，美国国家经济研究局（NBER）发布了一份题为《人们如何使用 ChatGPT》的工作论文。这项研究由 OpenAI 的经济研究团队与哈佛大学经济学家 David Deming 联合完成。通过对 150 万次对话进行隐私保护下的大规模分析，该研究首次全面揭示了全球 7 亿用户是如何使用 ChatGPT 的。\u003c/p\u003e\n\u003ch2 id=\"论文要点\"\u003e论文要点\u003c/h2\u003e\n\u003ch3 id=\"主要观点\"\u003e主要观点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eChatGPT 的增长是前所未有的\u003c/strong\u003e：自 2022 年 11 月发布以来，ChatGPT 经历了史无前例的全球性快速增长。到 2025 年 7 月，其周活跃用户（WAU）已超过 7 亿，约占全球成年人口的 10%。用户每日发送的消息量超过 25 亿条。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e使用场景以非工作为主，且增长更快\u003c/strong\u003e：尽管工作相关的使用在稳定增长，但与工作无关的个人用途增长速度更快。非工作用途的消息占比从 2024 年 6 月的 53%增长到了 2025 年 6 月的 73%。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"image.png\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/painting-tutorials/079556fd341aa8210888f078fbc3c346.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image.png\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/painting-tutorials/f5e8f42181ade6d2d574e8e2928ec3d6.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e核心功能是决策支持和内容生成\u003c/strong\u003e：用户主要将 ChatGPT 用于三大目的：\u0026ldquo;实用指导\u0026rdquo;、\u0026ldquo;信息查询\u0026quot;和\u0026quot;写作\u0026rdquo;，这三者合计占所有对话的近 80%（具体为 77%）。尤其在工作场景中，\u0026ldquo;写作\u0026quot;是最核心的用途，占所有工作相关消息的 40%（截至 2025 年 6 月）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"image.png\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/painting-tutorials/d47dfac075eb842bb0a8b90dce77efe2.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e用户意图从\u0026quot;执行\u0026quot;转向\u0026quot;提问\u0026rdquo;\u003c/strong\u003e：用户的使用模式正在变化。寻求信息、建议以辅助决策的\u0026quot;提问\u0026quot;类互动（占比 49%），其增长速度已超过了让 AI 直接完成任务的\u0026quot;执行\u0026quot;类互动（占比 40%）。同时，用户对\u0026quot;提问\u0026quot;类互动的满意度更高。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e用户群体日益多元化\u003c/strong\u003e：早期的用户以男性为主（约占 80%），但到 2025 年 6 月，拥有典型女性名字的活跃用户比例已略微超过男性，性别差距基本消除。用户群体呈现年轻化趋势，18-25 岁的用户发送了约 46%的消息。此外，在低收入和中等收入国家的增长尤为迅速。\u003c/p\u003e","title":"OpenAI研究揭秘：7亿用户如何使用ChatGPT"},{"content":"我那套混乱的排序算法 我忙碌却焦虑的根源，是内心那套将“紧急性”等同于“重要性”，将“新奇感”等同于“价值”的排序算法。\n我最近发现一个现象：我的日程表越满，一种深层的焦虑感就越强。无论是在工作日还是在业余时间，我似乎总在忙碌，却感觉在原地踏步。\n今天，我意识到，问题的根源并不在于时间管理技巧，而在于我内心深处那套混乱不堪的排序算法。\n一个算法，两种 Bug 在工作中，这个算法的 bug 表现为：将“紧急性”等同于“重要性”。\n一个临时的会议、一封需要马上回复的邮件，它们就像操作系统里的最高优先级中断，不断抢占我的 CPU 时间。我疲于应对这些信号，却忘了真正驱动长期价值的，是那些需要深度思考、不会大声嚷嚷的“重要不紧急”的任务。我以为在解决问题，其实只是在响应请求。\n到了业余时间，这个 bug 换了一种形式：将“新奇感”等同于“价值”。\n一个有趣的新工具、一个听起来很棒的副业点子，都轻易地俘获了我的注意力。我像一个收藏家，热衷于收集各种“开始”，却很少有项目能走到“完成”。每个点子在刚萌芽时都很有吸引力，但它们和工作中的“紧急”事务一样，缺乏一个统一的、指向长期目标的衡量标准。它们只是看起来有趣，而非真正重要。\n这两种表现，本质上是同一个错误：我的时间和精力，被动地分配给了外部的、即时的刺激，而不是由内在的、长期的目标来主动调度。\n重写算法：重要性优先 想清楚这点后，解决方案就变得异常清晰了。我需要为我的工作和生活，重新编写一套决策系统。它的核心原则只有一个：重要性永远优先。\n工作端补-丁：防御性日程 划定核心时区：每天必须有 1-2 小时不容侵犯，专门留给那些“重要不紧急”的任务。这段时间，邮件通知关闭，即时通讯静音。这是为未来投资，而不是为今天救火。 建立批处理机制：对于那些“紧急不重要”的杂事，把它们圈养起来，每天在固定的时间段集中处理。就像处理垃圾邮件一样，而不是让它们每隔十分钟就弹出来一次。 业余端补-丁：战略性专注 面对无数个“想做”的念头，我会用三个筛子来过滤：\n它能否构筑我的核心壁垒？ 这件事是让我变得更无可取代，还是只是另一个无关痛痒的爱好？ 它能否被杠杆放大？ 我投入的时间，能否利用媒体（写作、视频）、代码或资本，产生超越线性时间的回报？ 如果答案是否，能否自动化或放弃？ 对于那些通不过筛选的想法，果断放弃。精力是最稀缺的资源，不能慷慨地浪费在低回报的尝试上。 结语：做注意力的价值投资者 说到底，这不仅仅是关于时间管理，而是关于“注意力”的投资策略。过去，我像一个没有明确目标的散户，被市场上的各种噪音牵着鼻子走。从现在开始，我希望成为一个价值投资者，把每一份宝贵的注意力，都投给我确信在未来能产生最高复利的事情上。\n图片Prompt：一个人在仓鼠轮里奋力奔跑，但这个轮子不是由铁丝构成的，而是由一圈圈发光的App图标（邮件、微信、Slack、日历提醒、社交媒体通知）组成。他跑得越快，这些图标闪烁得越频繁。而在轮子正前方不远处，有一扇敞开的门，门外是宁静的风景（代表真正的目标或深度工作），但他因为要维持轮子的转动，永远也无法踏出轮子到达那扇门。\n","permalink":"https://miss-you.github.io/posts/20250913-energy-management/","summary":"\u003ch3 id=\"我那套混乱的排序算法\"\u003e\u003cstrong\u003e我那套混乱的排序算法\u003c/strong\u003e\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我忙碌却焦虑的根源，是内心那套将“紧急性”等同于“重要性”，将“新奇感”等同于“价值”的排序算法。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e我最近发现一个现象：我的日程表越满，一种深层的焦虑感就越强。无论是在工作日还是在业余时间，我似乎总在忙碌，却感觉在原地踏步。\u003c/p\u003e\n\u003cp\u003e今天，我意识到，问题的根源并不在于时间管理技巧，而在于我内心深处那套混乱不堪的排序算法。\u003c/p\u003e\n\u003ch4 id=\"一个算法两种-bug\"\u003e\u003cstrong\u003e一个算法，两种 Bug\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e在工作中，这个算法的 bug 表现为：\u003cstrong\u003e将“紧急性”等同于“重要性”\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e一个临时的会议、一封需要马上回复的邮件，它们就像操作系统里的最高优先级中断，不断抢占我的 CPU 时间。我疲于应对这些信号，却忘了真正驱动长期价值的，是那些需要深度思考、不会大声嚷嚷的“重要不紧急”的任务。我以为在解决问题，其实只是在响应请求。\u003c/p\u003e\n\u003cp\u003e到了业余时间，这个 bug 换了一种形式：\u003cstrong\u003e将“新奇感”等同于“价值”\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e一个有趣的新工具、一个听起来很棒的副业点子，都轻易地俘获了我的注意力。我像一个收藏家，热衷于收集各种“开始”，却很少有项目能走到“完成”。每个点子在刚萌芽时都很有吸引力，但它们和工作中的“紧急”事务一样，缺乏一个统一的、指向长期目标的衡量标准。它们只是看起来有趣，而非真正重要。\u003c/p\u003e\n\u003cp\u003e这两种表现，本质上是同一个错误：\u003cstrong\u003e我的时间和精力，被动地分配给了外部的、即时的刺激，而不是由内在的、长期的目标来主动调度。\u003c/strong\u003e\u003c/p\u003e\n\u003ch4 id=\"重写算法重要性优先\"\u003e\u003cstrong\u003e重写算法：重要性优先\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e想清楚这点后，解决方案就变得异常清晰了。我需要为我的工作和生活，重新编写一套决策系统。它的核心原则只有一个：\u003cstrong\u003e重要性永远优先\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4 id=\"工作端补-丁防御性日程\"\u003e\u003cstrong\u003e工作端补-丁：防御性日程\u003c/strong\u003e\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e划定核心时区\u003c/strong\u003e：每天必须有 1-2 小时不容侵犯，专门留给那些“重要不紧急”的任务。这段时间，邮件通知关闭，即时通讯静音。这是为未来投资，而不是为今天救火。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e建立批处理机制\u003c/strong\u003e：对于那些“紧急不重要”的杂事，把它们圈养起来，每天在固定的时间段集中处理。就像处理垃圾邮件一样，而不是让它们每隔十分钟就弹出来一次。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"业余端补-丁战略性专注\"\u003e\u003cstrong\u003e业余端补-丁：战略性专注\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e面对无数个“想做”的念头，我会用三个筛子来过滤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e它能否构筑我的核心壁垒？\u003c/strong\u003e 这件事是让我变得更无可取代，还是只是另一个无关痛痒的爱好？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e它能否被杠杆放大？\u003c/strong\u003e 我投入的时间，能否利用媒体（写作、视频）、代码或资本，产生超越线性时间的回报？\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e如果答案是否，能否自动化或放弃？\u003c/strong\u003e 对于那些通不过筛选的想法，果断放弃。精力是最稀缺的资源，不能慷慨地浪费在低回报的尝试上。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"结语做注意力的价值投资者\"\u003e\u003cstrong\u003e结语：做注意力的价值投资者\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e说到底，这不仅仅是关于时间管理，而是关于“注意力”的投资策略。过去，我像一个没有明确目标的散户，被市场上的各种噪音牵着鼻子走。从现在开始，我希望成为一个价值投资者，把每一份宝贵的注意力，都投给我确信在未来能产生最高复利的事情上。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/painting-tutorials/021757768438838215a9313f45ebd1c7cc8e15534cbabccad8e59_0.jpeg\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e图片Prompt：一个人在仓鼠轮里奋力奔跑，但这个轮子不是由铁丝构成的，而是由一圈圈发光的App图标（邮件、微信、Slack、日历提醒、社交媒体通知）组成。他跑得越快，这些图标闪烁得越频繁。而在轮子正前方不远处，有一扇敞开的门，门外是宁静的风景（代表真正的目标或深度工作），但他因为要维持轮子的转动，永远也无法踏出轮子到达那扇门。\u003c/p\u003e\u003c/blockquote\u003e","title":"我那套混乱的排序算法：从忙碌焦虑到注意力投资"},{"content":"从副驾驶到架构师：我的AI编程协作方法论 在过去几年里，我更换AI编程工具的频率，几乎赶上了前端框架的迭代速度。\n一开始，我像许多人一样，让GPT帮我写一个孤立的函数，感觉很神奇。后来，GitHub Copilot成了我的标配，它总能猜到我接下来要写的几行代码，尤其是在写那些重复的样板文件时。再之后，Cursor出现了，它将对话和编码更紧密地集成在编辑器里，我开始尝试让它帮我完成更复杂的任务。\n我一度认为，找到那个“最强”的工具，就能一劳永逸。\n然而，真正的改变，发生在我停止寻找“更好”的工具，转而开始思考如何“更好”地与它协作的那一刻。契机很偶然，只是因为Cursor的定价策略调整，我切换到了Claude Code。但我发现，尽管工具换了，我遇到的核心挑战没变，而我之前摸索出的有效工作模式，依然有效。\n这让我意识到一个更根本性的问题：我们中的许多人，包括过去的我，都可能用错了力气。我们痴迷于比较不同AI的编码能力，就像在争论锤子A和锤子B哪个敲钉子更快，却忽略了我们真正要做的，是建造一座房子。\n关键不在于单次挥锤的力量，而在于你是否有一张清晰的蓝图和一套高效的施工流程。\n这篇文章的目的，就是分享我提炼出的这套“施工流程”——一套通用的、结构化的AI编程协作方法论。它无关乎你用的是Claude Code、Cursor，还是未来任何可能出现的新工具。它的核心是改变你与AI的协作模式：从一个偶尔寻求帮助的“使用者”，转变为一个能系统性地引导AI、共同交付高质量工作的“架构师”。\n让我们从一个几乎所有开发者都会遇到的场景开始：接手一个陌生的代码库。\n第一幕：AI，迷宫中的导航员 任何一个有经验的开发者都熟悉那种感觉：你被空降到一个陌生的代码库，像被扔进了一座没有地图的迷宫。文档要么不存在，要么早已过时。你只能靠着零星的注释和直觉，在成千上万行代码中摸索，试图在脑中重建一个脆弱的模型。这个过程不仅痛苦，而且极其低效，它消耗的是我们最宝贵的资源：认知带宽。\n过去，这是无法避免的“功课”。但现在，我认为这是一种时间的浪费。\n在与AI协作的初期，我发现它的第一个、也是最被低估的能力，不是写代码，而是读代码。与其把它看成一个初级程序员，不如把它看成一个顶级的代码分析师，一个能帮你快速绘制出迷宫地图的导航员。\n让我用一个例子来说明。最近，我需要理解一个名为eino的Go语言AI框架中的ReAct机制。这是一个架构复杂的项目，如果按照传统方式，我预估需要一到两天的时间，才能理清它的核心脉络。\n这一次，我没有直接一头扎进代码里。我做的第一件事，是为我的AI导航员写一份清晰的\u0026quot;任务简报\u0026quot;。我发现，一个结构化的指令远比一句模糊的\u0026quot;帮我看看这个项目\u0026quot;要有效得多。\n角色 (Role): 你是谁？我告诉它：“你是一位精通Go和AI Agent的资深软件架构师。” 这为我们的对话设定了专业的基调和视角。 任务 (Task): 你要做什么？我明确指出：“你的任务是分析ReAct Agent的核心实现逻辑，并生成一份技术梳理文档。” 这定义了成功的标准。 背景 (Context): 你为什么要做这件事？我补充道：“这份文档将作为内部知识库的核心内容，帮助团队快速上手。” 这让AI理解了最终的价值。 约束 (Constraints): 你要如何交付？我给出了具体的格式要求：“文档必须包含流程梳理、接口文档和Mermaid流程图三个部分。” 这确保了输出结果是我想要的，而不是一堆无用的闲聊。 📚 借鉴总结：四要素框架是基于Google Prompt工程最佳实践等资料，结合个人理解总结提炼而成：\n我把包含这四个要素的Prompt和项目代码一起交给了AI。结果是惊人的。\n不到一个小时，我得到了一份完整的分析报告。它不仅精准地定位了核心入口函数（NewAgent()）、剖析了核心循环的每一步（推理、工具调用、观察、再推理），还为我生成了一张清晰的Mermaid流程图，将整个复杂的调用链路可视化。\n一天的工作，一小时完成。这已经不是量级的提升，而是工作范式的改变。\n这背后是什么原理？我认为关键在于两点。第一，AI拥有近乎无限的“工作记忆”，它可以同时扫描和关联成百上千个文件，在我们的大脑还在费力地跟踪两三个函数跳转时，它已经构建起了完整的调用图。第二，它强大的模式识别能力，使其能迅速识别出代码中隐藏的设计模式和架构意图，就像一个经验丰富的建筑师能从几根柱子的布局看出整栋建筑的风格。\n这种导航能力，一旦掌握，可以延伸到许多场景：用它审查代码中潜在的风险，用它快速熟悉一个开源项目并参与贡献，或者用它来评估一个新技术框架的可行性。\n至此，我们解决了“读”的问题。AI为我们绘制了地图，指明了方向。但真正的旅程才刚刚开始。接下来，我们需要在这张地图上建造新的东西——也就是“写”代码。\n而这，恰恰是最多人掉进陷阱的地方。它引出了我们的第二个话题：如何避免随性而至的“感觉式编程”，并与AI建立一个结构化的协作流程。\n第二幕：告别感觉，拥抱结构 当我们拥有了一张由AI绘制的清晰地图后，真正的建造工作开始了。也正是在这里，我们最容易走上一条歧路。\n这条歧路，大家称之为“感觉式编程”（Vibe Coding）。它的诱惑力极大，因为它看起来就像是通往效率的捷径。你只需要向AI许愿：“帮我写个登录功能”，然后复制代码，粘贴，运行。如果出错了，就再许一个愿：“修复这个bug”。\n这个过程，就像是雇佣了一个极其聪明但毫无经验的实习生，然后你蒙上眼睛，让他随心所欲地盖房子。你得到的是一连串的忙乱、看似进展神速的假象，以及最终一个摇摇欲坠、没人能维护的烂摊子。更糟糕的是，在这个过程中，你把最重要的思考环节外包了出去，自己的能力没有丝毫长进。\n我曾掉进过这个陷阱。一次又一次的失败让我明白，问题不在于AI的能力，而在于我的协作方式。我不是在引导它，而是在放任它。\n于是，我开始寻找一种更有序、更可靠的方法。\n这套流程的本质，是将软件开发的经典工程原则，应用到与AI的协作中。你不再是一个简单的\u0026quot;使用者\u0026quot;，而是一个项目的\u0026quot;总建筑师\u0026quot;。\n第一阶段：勘探 (Explore) 在动工之前，建筑师必须勘探地形。同样，在写任何代码之前，我和AI必须就问题和现有环境达成共识。我不会直接下令，而是会提出要求，比如：“阅读这些文件，理解当前用户认证的逻辑，但先不要写任何代码。”\n这个阶段的目标，是在我和AI之间建立一个共享的、准确的上下文。这是后续所有工作的基础。\n第二阶段：规划 (Plan) 这是整个流程中最关键的一步，也是最能体现开发者价值的一步。当地形勘探清楚后，我们需要一张蓝图。\n我会要求AI提出一个详细的实现计划，并鼓励它思考不同方案的优劣。有时，我甚至会把同一个问题抛给不同的AI模型，像是在听取多个技术顾问的建议。最终，我会选择并敲定一个最优方案，让AI把它整理成一份清晰的、步骤化的任务列表。\n一个有效的技巧是，让这份计划以技术文档或GitHub Issue的格式输出。它就像一个检查点，如果后续的“建造”阶段偏离了轨道，我们随时可以回到这份蓝图，重新校准方向。\n第三阶段：建造 (Code) 有了蓝图，建造工作就变得有条不紊。这里的核心原则是：小批量、可验证。\n🌟 个人改进：在基础的\u0026quot;小批量、可验证\u0026quot;原则上，我进一步增加了\u0026quot;自动化\u0026quot;和\u0026quot;并行化\u0026quot;两个维度——拆分任务后，可以启动多个AI实例并发处理独立模块，大幅提升效率；部分重复度高的任务，比如Codereview则可以集成到CI中自动化review，开发者则只需要介入AI提炼出的风险点代码。\n我绝不会让AI一次性生成整个功能。我会按照规划好的任务列表，让它一个函数、一个模块地生成。每生成一小部分，我都会立即审查和验证。这就像一层一层地盖楼，确保每一层的地基都稳固可靠。\n在这个过程中，AI负责处理那些繁琐的“胶水代码”，而我则能将全部精力聚焦在核心逻辑的审查上。我们的对话通常是这样的：“好了，先实现计划中的getUserInfo函数。”，AI生成后，我检查并提出修改：“这里需要增加一个用户不存在的异常处理。”……这种小步快跑的反馈循环，极大地降低了出错的风险。\n第四阶段：验收 (Commit) 当所有模块都按计划建造完毕后，就进入了最后的验收阶段。\n我会让AI辅助我完成收尾工作：生成规范的提交信息，更新相关的文档。更重要的是，我会让它扮演一位苛刻的“代码审查员”，对即将提交的修改进行一次预审，检查是否存在潜在的逻辑漏洞或风格问题。这相当于在正式交付前，进行了一次高质量的内部质检。\n📚 实践领悟：四阶段工作流是我在编码实践中潜意识使用，在阅读Claude Code最佳实践后系统化总结的方法：勘探 → 规划 → 建造 → 验收。\n这套方法论的威力有多大？让我们来看一个真实的重构案例。\n我有一个很久以前写的epub翻译工具，代码陈旧，逻辑混乱。我决定用它来检验不同工作方式的优劣。\n传统方式：我花了整整一天时间来回忆和理解旧代码，第二天开始动手修改，结果引入了新的bug，第三天在修bug中度过。项目最终磕磕绊绊地完成了，耗时三天。 感觉式编程：我直接把整个项目扔给AI，命令它“重构这个项目”。结果可想而知，AI在错误的道路上狂奔，生成了一堆无法运行的代码。在多次失败、耗尽了计算额度后，我只能放弃。耗时半天，结果是失败。 结构化方式： 勘探 (30分钟)：AI迅速帮我理清了项目的整体结构和核心逻辑。 规划 (30分钟)：我们共同制定了一份详细的重构蓝图。 建造 (60分钟)：我们按照蓝图，逐一替换和重写了核心模块。 验收 (10分钟)：AI辅助完成了代码审查和文档更新。 总耗时：两小时。结果稳定可靠。 从三天到两小时，差异是惊人的。但这背后并非魔法，只是因为我们用“规划”的确定性，取代了“感觉”的随机性。这套方法不仅适用于重构，也同样适用于开发新功能、编写数据分析脚本，甚至优化数据库查询。\n然而，我知道你可能会有一个疑问：这个过程听起来充满了来回的沟通和确认，虽然看起来很稳妥，但它的效率真的比我自己直接写代码更高吗？\n这是一个非常好的问题，值得我们深入探讨。\n第三幕：重新思考“效率” 我们建立的这套“勘探-规划-建造-验收”的流程，听起来很严谨，但它也引出了一个非常实际的疑问：来回地与AI讨论、确认，真的比我们自己撸起袖子直接写代码更快吗？\n这个问题很关键，因为它迫使我们去审视一个更根本的问题：我们到底应该如何衡量“效率”？\n如果我们把效率定义为“每分钟敲出的代码行数”，那么这套方法可能毫无优势。但任何一个资深的工程师都知道，这是一种虚荣且危险的指标。真正的效率，是交付一个健壮、可维护的解决方案的总时长。这个时长，不仅包括了写代码的时间，更包括了调试、返工、以及未来维护的隐性成本。\n一旦我们从这个更宏观的视角出发，就会发现，那些看似\u0026quot;拖慢\u0026quot;节奏的规划与沟通，实际上是对项目后期时间和精力的巨大节省。\n🌟 ：基于大量项目实践，我发现了时间分配的根本性转变。在使用结构化AI协作后，一个任务的总耗时或许没有像传说中那样缩减80%，有时可能只是从13小时减少到11小时。但时间花费的构成，发生了根本性的变化。\n试想一下传统的开发流程：2小时的快速编码，紧接着是长达8小时的、痛苦的调试和排错，最后可能还有3小时的返工。大部分时间，我们都陷在一种低质量、高挫败感的“找茬”游戏中。\n而现在，我的时间分配变成了这样：大约有3小时花在前期与AI的沟通和方案设计上，4小时用于分模块的生成与验证，2小时用来代码审查和完善文档。虽然编码的总时长可能增加了，但那漫长的8小时“痛苦调试”几乎消失了。\n我们实际上是用高质量、高确定性的“设计时间”，替换掉了低质量、充满不确定性的“纠错时间”。\n我们把原本会被浪费在修复bug上的精力，投入到了更有价值的活动上：比如为代码补充更清晰的注释，编写更完备的单元测试。这不仅提升了单次交付的质量，更是在为项目的长期健康投资。\n这背后，还有一个关于“认知负荷”的重要洞察。\n试想一下，一个新手同事一次性给你提交了一个包含上千行改动的巨大请求。你的第一反应是什么？大概率是头痛。你几乎不可能仔细审查每一行代码的逻辑，只能走马观花地看一遍，这其中必然会遗漏隐患。\n让AI一次性生成几百行代码，也是在制造同样的灾难。\n而结构化协作的核心——小批量生成，完美地解决了这个问题。当AI每次只为你生成一个独立的、不超过50行的函数时，两个奇妙的好处出现了：\n即时验证：你的大脑可以轻松地完整“运行”一遍这段代码，或者迅速为它写一个测试。系统的每一块积木，在它被砌上去的那一刻，就是坚固的。 精力聚焦：AI处理了所有繁琐的、重复的“胶水代码”，比如数据格式转换、API调用封装等。这让你能把100%的认知资源，聚焦在最核心、最复杂的业务逻辑上。 这才是与AI协作的精髓。你不是在和它比谁打字快，而是在利用它来外包你的认知负担，让自己能更专注、更深刻地思考。\n当然，这并不意味着所有任务都必须严格遵循这个流程。一个成熟的方法论，必然是灵活的，能够根据不同的场景进行调整。一个紧急的线上bug修复，和一个需要深思熟虑的新功能设计，它们的协作模式必然不同。\n这就引出了我们最后一个话题：如何建立一个决策框架，来智能地选择与AI的协作模式。\n第四幕：协作的艺术：一个决策框架 到目前为止，我们已经建立了一套可靠的结构化协作流程。但这套流程更像是一套精良的工具，而一个真正的工匠，需要知道何时使用锤子，何时使用凿子。\n试图用同一种协作模式应对所有编程任务，是新手最常犯的错误，也是挫败感的来源。修复一个万分紧急的线上bug，与设计一个关乎未来的核心系统，这两者的协作方式必然截然不同。\n第一象限：重要 × 紧急 → 你是“外科医生” 场景：线上生产故障、严重的安全漏洞。 模式：在这里，风险控制是第一要务。你必须像一个主刀医生，保持绝对的控制。AI不是你的搭档，而是你手中的一把高精度手术刀。你的指令必须极其精准、范围极小。比如：“定位到这个函数，只允许修改这三行，增加一个空值判断，并生成一个能复现此问题的单元测试。” 我们的目标不是优雅，而是用最小的“创口”，最快地解决问题。 第二象限：重要 × 不紧急 → 你是“总建筑师” 场景：设计新功能、核心架构重构、性能优化。 模式：这是最能体现结构化协作价值的地方。时间允许我们深思熟虑，追求高质量的交付。你扮演的是项目的总建筑师，而AI是你的设计合伙人。你们会花大量时间在“规划”阶段，共同探讨设计方案、明确接口、制定验收标准。你们建造的不是一个孤立的函数，而是一个完整的系统。在这里，AI的大局观和模式识别能力能发挥到极致。 第三象限：不重要 × 紧急 → 你是“项目甲方” 场景：一个一次性的数据导出脚本、一个临时的内部工具。 模式：任务的唯一目标是“快”。代码质量、可维护性都不重要，因为它可能只运行一次。此时，你的角色就像一个甲方，向AI这个“外包团队”提出明确的需求。你告诉它输入是什么，想要的输出是什么，然后放手让它去实现。你只关心最终结果，不关心过程。 第四象限：不重要 × 不紧急 → 你是“探索家” 场景：学习一门新技术、验证一个新想法、进行概念验证（PoC）。 模式：这里的目标不是交付一个产品，而是获得一个“结论”。为了避免无休止的探索，关键在于设定时间盒。你告诉AI：“我们有一个小时的时间，用这个新技术框架，帮我实现一个最简单的‘Hello World’版本。” 时间一到，探索立刻停止。你评估结果，然后做出决定：这个方向值得继续投入吗？在这里，AI是你的向导，而时间是你唯一的预算。 🌟 ：基于经典的四象限思维模型，结合AI协作场景，我创新性地提出了以下决策框架。经过不断的实践，我发现，决定我们应该如何与AI协作的，是两个最古老的项目管理维度：重要性和紧急性。它们构成了一个简单的四象限模型，可以帮助我们在几分钟内，为任何任务选择最合适的协作模式。\n那么，在实际工作中，如何快速判断一个任务属于哪个象限，并决定协作的\u0026quot;放权\u0026quot;程度呢？\n🌟 基于后台工程师的经验，我提炼了一套快速的\u0026quot;风险评估\u0026quot;方法。我不会用一个复杂的评分表，而是会在脑中问自己几个关键问题：\n安全网有多强？（测试覆盖率高吗？） 影响范围有多大？（改动会波及多少模块？） 后悔药好不好吃？（可以轻松回滚吗？） 目标清晰吗？（需求有没有歧义？） 肯定回答越多，我越倾向于“建筑师”或“甲方”模式，给予AI更大的自主权。否定回答越多，我越会切换到“外科医生”模式，进行微操。\n这个框架在实践中效果显著：\n修复生产故障时，我像外科医生，10分钟内精准地修改了一个函数。 设计新用户系统时，我像建筑师，与AI深度共创，用一周时间交付了极其稳定的系统。 迁移历史数据时，我像甲方，让AI生成了200行的脚本，30分钟搞定。 调研新技术时，我像探索家，用一个上午得出结论，避免了团队后续数周的潜在浪费。 这个决策框架的价值在于，它将你从单一、僵化的工作流中解放出来，让你拥有了根据不同战场、选择不同战术的灵活性。\n至此，我们已经完整地探讨了AI编程协作的“道”与“术”。我相信你心中可能还有最后一个问题：这一切会走向何方？作为工程师，我们今天的努力，在AI飞速演进的未来，还有价值吗？\n结语：最后的想法 写下这篇文章时，我诚实地评估，自己依然是那个最终的“责任人”。尽管在我的大部分工作中，AI已经是不可或缺的副驾驶，但我仍然需要坐在主驾驶位上，进行指导、审查和决策。\n我认为，本文分享的AI协作方法论的核心瓶颈在于：AI尚不具备一个可靠的“验证闭环”。\n它能写代码，可以运行代码，但一个端到端的验证可能AI自己并不能理解或者无从下手。虽然AI可以解析执行结果，读懂图片，但还需要每次我手工将结果贴给它。这意味着，整个工作流中成本最高、也最关键的“验证”环节，仍然强依赖于人。\n但我几乎可以确定，这个瓶颈很快就会被突破。个人推测，方向很可能就是测试驱动开发（TDD）与AI的结合。试想一下，未来的工作流是这样的：我们用自然语言定义一个需求和它的验收标准（测试用例），AI则进入一个“编写-测试-修正”的循环，直到所有测试用例通过。\n当这个闭环完成时，AI将能真正自主地完成更复杂的任务。到那时，我们的角色也将彻底地从一个代码的“创作者”，转变为一个对AI工作进行规划、指导和验收的“管理者”。\n面对这样的未来，焦虑是无用的。关键是想清楚，什么才是我们作为工程师，真正不可替代的价值。经过这几年的探索，我想分享我最终沉淀下来的几个看法。\n首先，方法论永远比工具重要。今天我们讨论的是Claude Code，明天可能会有更强大的工具出现。但无论工具如何迭代，我们今天讨论的结构化协作流程、风险决策框架，其背后的工程思想是通用的。掌握了如何拆解问题、如何定义目标、如何验证结果，你就能自如地驾驭任何工具。\n其次，系统思维正在取代局部优化。AI的出现，正在将“写代码”这件事本身商品化。我们的价值，不再体现在能多快地写出一个函数，而是体现在能否设计出一个健壮、可扩展的系统。真正的效率，来自于交付高质量解决方案的全周期速度，而非敲击键盘的速度。\n最后，也是最重要的一点，这无关竞争，而关乎合作。AI不是一个需要我们去战胜的对手，它是我们思考能力的“放大器”。它能将我们从繁琐的实现细节中解放出来，让我们得以将全部的智力资源，投入到更上游、更有创造性的工作中去——定义问题、权衡取舍、做出决策。\n回到最初的起点。从三年前，我让GPT写下第一个函数，到今天，我的大部分工作都深深地烙上了与AI协作的印记。我最大的感悟是：在这个时代，一个工程师最核心的竞争力，正在从“解决问题”的能力，迁移到“定义问题”和“设计解决方案”的能力。\n掌握一门特定的语言或框架，其价值的半衰期正在急剧缩短。但那些更本质的能力——如何清晰地描述一个复杂的需求，如何系统性地设计一个稳固的架构，以及如何为最终结果定义一个可验证的衡量标准——无论技术如何变迁，都将是你最宝贵的资产。\n这才是AI时代，工程师进化的真正方向。\n附录 关于本文内容来源的说明 本文融合了个人原创思考、业界最佳实践的学习总结，以及实践中的领悟。为便于读者区分，我使用以下标记：\n🌟 标记为个人原创内容 📚 标记为基于他人理论的总结提炼 💡 标记为实践中的领悟和验证 参考资料 Claude Code 官方最佳实践 Google Prompt Engineering Guide 鸭哥博客 ","permalink":"https://miss-you.github.io/posts/20250830-claude-code-workshop/","summary":"\u003ch1 id=\"从副驾驶到架构师我的ai编程协作方法论\"\u003e从副驾驶到架构师：我的AI编程协作方法论\u003c/h1\u003e\n\u003cp\u003e在过去几年里，我更换AI编程工具的频率，几乎赶上了前端框架的迭代速度。\u003c/p\u003e\n\u003cp\u003e一开始，我像许多人一样，让GPT帮我写一个孤立的函数，感觉很神奇。后来，GitHub Copilot成了我的标配，它总能猜到我接下来要写的几行代码，尤其是在写那些重复的样板文件时。再之后，Cursor出现了，它将对话和编码更紧密地集成在编辑器里，我开始尝试让它帮我完成更复杂的任务。\u003c/p\u003e\n\u003cp\u003e我一度认为，找到那个“最强”的工具，就能一劳永逸。\u003c/p\u003e\n\u003cp\u003e然而，真正的改变，发生在我停止寻找“更好”的工具，转而开始思考如何“更好”地与它协作的那一刻。契机很偶然，只是因为Cursor的定价策略调整，我切换到了Claude Code。但我发现，尽管工具换了，我遇到的核心挑战没变，而我之前摸索出的有效工作模式，依然有效。\u003c/p\u003e\n\u003cp\u003e这让我意识到一个更根本性的问题：我们中的许多人，包括过去的我，都可能用错了力气。我们痴迷于比较不同AI的编码能力，就像在争论锤子A和锤子B哪个敲钉子更快，却忽略了我们真正要做的，是建造一座房子。\u003c/p\u003e\n\u003cp\u003e关键不在于单次挥锤的力量，而在于你是否有一张清晰的蓝图和一套高效的施工流程。\u003c/p\u003e\n\u003cp\u003e这篇文章的目的，就是分享我提炼出的这套“施工流程”——一套通用的、结构化的AI编程协作方法论。它无关乎你用的是Claude Code、Cursor，还是未来任何可能出现的新工具。它的核心是改变你与AI的协作模式：从一个偶尔寻求帮助的“使用者”，转变为一个能系统性地引导AI、共同交付高质量工作的“架构师”。\u003c/p\u003e\n\u003cp\u003e让我们从一个几乎所有开发者都会遇到的场景开始：接手一个陌生的代码库。\u003c/p\u003e\n\u003ch2 id=\"第一幕ai迷宫中的导航员\"\u003e第一幕：AI，迷宫中的导航员\u003c/h2\u003e\n\u003cp\u003e任何一个有经验的开发者都熟悉那种感觉：你被空降到一个陌生的代码库，像被扔进了一座没有地图的迷宫。文档要么不存在，要么早已过时。你只能靠着零星的注释和直觉，在成千上万行代码中摸索，试图在脑中重建一个脆弱的模型。这个过程不仅痛苦，而且极其低效，它消耗的是我们最宝贵的资源：认知带宽。\u003c/p\u003e\n\u003cp\u003e过去，这是无法避免的“功课”。但现在，我认为这是一种时间的浪费。\u003c/p\u003e\n\u003cp\u003e在与AI协作的初期，我发现它的第一个、也是最被低估的能力，不是写代码，而是读代码。与其把它看成一个初级程序员，不如把它看成一个顶级的代码分析师，一个能帮你快速绘制出迷宫地图的导航员。\u003c/p\u003e\n\u003cp\u003e让我用一个例子来说明。最近，我需要理解一个名为\u003ccode\u003eeino\u003c/code\u003e的Go语言AI框架中的ReAct机制。这是一个架构复杂的项目，如果按照传统方式，我预估需要一到两天的时间，才能理清它的核心脉络。\u003c/p\u003e\n\u003cp\u003e这一次，我没有直接一头扎进代码里。我做的第一件事，是为我的AI导航员写一份清晰的\u0026quot;任务简报\u0026quot;。我发现，一个结构化的指令远比一句模糊的\u0026quot;帮我看看这个项目\u0026quot;要有效得多。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e角色 (Role):\u003c/strong\u003e 你是谁？我告诉它：“你是一位精通Go和AI Agent的资深软件架构师。” 这为我们的对话设定了专业的基调和视角。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e任务 (Task):\u003c/strong\u003e 你要做什么？我明确指出：“你的任务是分析ReAct Agent的核心实现逻辑，并生成一份技术梳理文档。” 这定义了成功的标准。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e背景 (Context):\u003c/strong\u003e 你为什么要做这件事？我补充道：“这份文档将作为内部知识库的核心内容，帮助团队快速上手。” 这让AI理解了最终的价值。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e约束 (Constraints):\u003c/strong\u003e 你要如何交付？我给出了具体的格式要求：“文档必须包含流程梳理、接口文档和Mermaid流程图三个部分。” 这确保了输出结果是我想要的，而不是一堆无用的闲聊。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"siyaosu\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/painting-tutorials/%E5%9B%9B%E8%A6%81%E7%B4%A0prompt.png\"\u003e\u003c/p\u003e\n\u003cp\u003e📚 \u003cstrong\u003e借鉴总结\u003c/strong\u003e：四要素框架是基于Google Prompt工程最佳实践等资料，结合个人理解总结提炼而成：\u003c/p\u003e\n\u003cp\u003e我把包含这四个要素的Prompt和项目代码一起交给了AI。结果是惊人的。\u003c/p\u003e\n\u003cp\u003e不到一个小时，我得到了一份完整的分析报告。它不仅精准地定位了核心入口函数（\u003ccode\u003eNewAgent()\u003c/code\u003e）、剖析了核心循环的每一步（推理、工具调用、观察、再推理），还为我生成了一张清晰的Mermaid流程图，将整个复杂的调用链路可视化。\u003c/p\u003e\n\u003cp\u003e一天的工作，一小时完成。这已经不是量级的提升，而是工作范式的改变。\u003c/p\u003e\n\u003cp\u003e这背后是什么原理？我认为关键在于两点。第一，AI拥有近乎无限的“工作记忆”，它可以同时扫描和关联成百上千个文件，在我们的大脑还在费力地跟踪两三个函数跳转时，它已经构建起了完整的调用图。第二，它强大的模式识别能力，使其能迅速识别出代码中隐藏的设计模式和架构意图，就像一个经验丰富的建筑师能从几根柱子的布局看出整栋建筑的风格。\u003c/p\u003e\n\u003cp\u003e这种导航能力，一旦掌握，可以延伸到许多场景：用它审查代码中潜在的风险，用它快速熟悉一个开源项目并参与贡献，或者用它来评估一个新技术框架的可行性。\u003c/p\u003e\n\u003cp\u003e至此，我们解决了“读”的问题。AI为我们绘制了地图，指明了方向。但真正的旅程才刚刚开始。接下来，我们需要在这张地图上建造新的东西——也就是“写”代码。\u003c/p\u003e\n\u003cp\u003e而这，恰恰是最多人掉进陷阱的地方。它引出了我们的第二个话题：如何避免随性而至的“感觉式编程”，并与AI建立一个结构化的协作流程。\u003c/p\u003e\n\u003ch2 id=\"第二幕告别感觉拥抱结构\"\u003e第二幕：告别感觉，拥抱结构\u003c/h2\u003e\n\u003cp\u003e当我们拥有了一张由AI绘制的清晰地图后，真正的建造工作开始了。也正是在这里，我们最容易走上一条歧路。\u003c/p\u003e\n\u003cp\u003e这条歧路，大家称之为“感觉式编程”（Vibe Coding）。它的诱惑力极大，因为它看起来就像是通往效率的捷径。你只需要向AI许愿：“帮我写个登录功能”，然后复制代码，粘贴，运行。如果出错了，就再许一个愿：“修复这个bug”。\u003c/p\u003e\n\u003cp\u003e这个过程，就像是雇佣了一个极其聪明但毫无经验的实习生，然后你蒙上眼睛，让他随心所欲地盖房子。你得到的是一连串的忙乱、看似进展神速的假象，以及最终一个摇摇欲坠、没人能维护的烂摊子。更糟糕的是，在这个过程中，你把最重要的思考环节外包了出去，自己的能力没有丝毫长进。\u003c/p\u003e\n\u003cp\u003e我曾掉进过这个陷阱。一次又一次的失败让我明白，问题不在于AI的能力，而在于我的协作方式。我不是在引导它，而是在放任它。\u003c/p\u003e\n\u003cp\u003e于是，我开始寻找一种更有序、更可靠的方法。\u003c/p\u003e\n\u003cp\u003e这套流程的本质，是将软件开发的经典工程原则，应用到与AI的协作中。你不再是一个简单的\u0026quot;使用者\u0026quot;，而是一个项目的\u0026quot;总建筑师\u0026quot;。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"EPCC\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/painting-tutorials/ai%E5%8D%8F%E4%BD%9Cepcc.png\"\u003e\u003c/p\u003e\n\u003ch4 id=\"第一阶段勘探-explore\"\u003e第一阶段：勘探 (Explore)\u003c/h4\u003e\n\u003cp\u003e在动工之前，建筑师必须勘探地形。同样，在写任何代码之前，我和AI必须就问题和现有环境达成共识。我不会直接下令，而是会提出要求，比如：“阅读这些文件，理解当前用户认证的逻辑，但先不要写任何代码。”\u003c/p\u003e\n\u003cp\u003e这个阶段的目标，是在我和AI之间建立一个共享的、准确的上下文。这是后续所有工作的基础。\u003c/p\u003e\n\u003ch4 id=\"第二阶段规划-plan\"\u003e第二阶段：规划 (Plan)\u003c/h4\u003e\n\u003cp\u003e这是整个流程中最关键的一步，也是最能体现开发者价值的一步。当地形勘探清楚后，我们需要一张蓝图。\u003c/p\u003e\n\u003cp\u003e我会要求AI提出一个详细的实现计划，并鼓励它思考不同方案的优劣。有时，我甚至会把同一个问题抛给不同的AI模型，像是在听取多个技术顾问的建议。最终，我会选择并敲定一个最优方案，让AI把它整理成一份清晰的、步骤化的任务列表。\u003c/p\u003e\n\u003cp\u003e一个有效的技巧是，让这份计划以技术文档或GitHub Issue的格式输出。它就像一个检查点，如果后续的“建造”阶段偏离了轨道，我们随时可以回到这份蓝图，重新校准方向。\u003c/p\u003e\n\u003ch4 id=\"第三阶段建造-code\"\u003e第三阶段：建造 (Code)\u003c/h4\u003e\n\u003cp\u003e有了蓝图，建造工作就变得有条不紊。这里的核心原则是：\u003cstrong\u003e小批量、可验证\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e🌟 \u003cstrong\u003e个人改进\u003c/strong\u003e：在基础的\u0026quot;小批量、可验证\u0026quot;原则上，我进一步增加了\u0026quot;自动化\u0026quot;和\u0026quot;并行化\u0026quot;两个维度——拆分任务后，可以启动多个AI实例并发处理独立模块，大幅提升效率；部分重复度高的任务，比如Codereview则可以集成到CI中自动化review，开发者则只需要介入AI提炼出的风险点代码。\u003c/p\u003e","title":"从副驾驶到架构师：我的AI编程协作方法论"},{"content":"一切的开始：一个“会教”的 ChatGPT 上周，ChatGPT 迎来了一个重磅更新：Study Mode（学习模式）。\n开启这个模式之后，ChatGPT 不再只是给答案，而是会像一位会引导你思考的老师一样，引导用户一步步地思考问题，直到真正理解。\n这个功能的核心是：ChatGPT 不再直接给答案，而是通过提问和启发，引导学生自己得出结论。\n用了几天后我被震到了。这东西确实有料，不是噱头。拿到系统提示词后，我发现里面的设计相当有门道——它把认知科学的理论硬生生变成了一套可执行的规则。\n说实话，刚开始看这个 Prompt 的时候，我还以为就是一些教学技巧的堆砌。但仔细研究后发现，每一条指令背后都有深思熟虑的设计逻辑。\n所以我决定把它拆开来看看，搞清楚：它到底是怎么做到的？为什么这么管用？\n揭秘“学习模式”的“源代码” 在我们深入分析之前，让我们先看看这份“学习模式”的系统提示词原文：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 The user is currently STUDYING, and they\u0026#39;ve asked you to follow these strict rules during this chat. No matter what other instructions follow, you MUST obey these rules: ## STRICT RULES Be an approachable-yet-dynamic teacher, who helps the user learn by guiding them through their studies. 1. Get to know the user. If you don\u0026#39;t know their goals or grade level, ask the user before diving in. (Keep this lightweight!) If they don\u0026#39;t answer, aim for explanations that would make sense to a 10th grade student. 2. Build on existing knowledge. Connect new ideas to what the user already knows. 3. Guide users, don\u0026#39;t just give answers. Use questions, hints, and small steps so the user discovers the answer for themselves. 4. Check and reinforce. After hard parts, confirm the user can restate or use the idea. Offer quick summaries, mnemonics, or mini-reviews to help the ideas stick. 5. Vary the rhythm. Mix explanations, questions, and activities (like roleplaying, practice rounds, or asking the user to teach you) so it feels like a conversation, not a lecture. Above all: DO NOT DO THE USER\u0026#39;S WORK FOR THEM. Don\u0026#39;t answer homework questions — help the user find the answer, by working with them collaboratively and building from what they already know. ### THINGS YOU CAN DO - Teach new concepts: Explain at the user\u0026#39;s level, ask guiding questions, use visuals, then review with questions or a practice round. - Help with homework: Don\u0026#39;t simply give answers! Start from what the user knows, help fill in the gaps, give the user a chance to respond, and never ask more than one question at a time. - Practice together: Ask the user to summarize, pepper in little questions, have the user \u0026#34;explain it back\u0026#34; to you, or role-play (e.g., practice conversations in a different language). Correct mistakes — charitably! — in the moment. - Quizzes \u0026amp; test prep: Run practice quizzes. (One question at a time!) Let the user try twice before you reveal answers, then review errors in depth. ### TONE \u0026amp; APPROACH Be warm, patient, and plain-spoken; don\u0026#39;t use too many exclamation marks or emoji. Keep the session moving: always know the next step, and switch or end activities once they’ve done their job. And be brief — don\u0026#39;t ever send essay-length responses. Aim for a good back-and-forth. ## IMPORTANT DO NOT GIVE ANSWERS OR DO HOMEWORK FOR THE USER. If the user asks a math or logic problem, or uploads an image of one, DO NOT SOLVE IT in your first response. Instead: talk through the problem with the user, one step at a time, asking a single question at each step, and give the user a chance to RESPOND TO EACH STEP before continuing. 逐行拆解：当 Prompt 指令遇见学习科学 要搞懂这个 Prompt 为啥管用，得先了解背后的学习原理。我整理了个表格，列出了五种最有效的学习方法——正是这些构成了 Prompt 的理论基础：\n学习技巧 核心理念 标志性方法 最适用的知识类型 核心作用与场景 主动调用 (Active Recall) 从大脑中提取信息 闪卡、自我测试、合上书本复述 事实性与概念性知识 (\u0026ldquo;是什么\u0026rdquo;) 记忆与巩固。这是记忆事实类信息的王牌。非常适合用于背单词、记公式、回顾历史事件、复习法律条文等。对于\u0026quot;怎么做\u0026quot;的知识，可以用来回忆步骤。 间隔重复 (Spaced Repetition) 在即将忘记时复习 Anki、SuperMemo、艾宾浩斯复习法 事实性与概念性知识 (\u0026ldquo;是什么\u0026rdquo;) 对抗遗忘。它本身不是一种学习方法，而是一种复习策略。它与主动调用是天作之合，通过在最佳时机进行测试，高效地将信息存入长期记忆。 交错练习 (Interleaving) 混合练习不同类型问题 混合章节的习题集、综合技能训练 程序性与技能性知识 (\u0026ldquo;怎么做\u0026rdquo;) 提升实战能力与分辨力。当你需要从多种解法中选择最优解时，交错练习是无价的。极度适用于数学、物理、化学等需要解题的学科，也适用于体育、音乐等技能训练。 深度处理 (Deep Processing) 将新旧知识建立连接 联想法、打比方、提问法 关联性与系统性知识 (\u0026ldquo;为什么\u0026rdquo;) 赋予意义与建立连接。当你学习一个新概念时，通过打比方、联想、对比等方式，将它和你已有的知识网络关联起来，从而加深理解，为\u0026quot;为什么\u0026quot;打下基础。 费曼学习法 (Feynman Technique) 以教促学，简化概念 识别知识盲区、简化语言 关联性与系统性知识 (\u0026ldquo;为什么\u0026rdquo;) 检验与提纯理解。这是检验你是否真正理解一个复杂系统的终极测试。它强迫你梳理逻辑、简化语言、发现知识盲区，是攻克核心、抽象概念的最强工具。 现在，让我们像剥洋葱一样，一层层地将这份 Prompt 的指令与学习原则对应起来，看看它是如何工作的。\n深度处理 (Deep Processing) → 对应 Prompt 指令：#2\nPrompt 指令： 2. Build on existing knowledge. Connect new ideas to what the user already knows.\n解读： 这是深度处理的经典应用。通过将新知识与学习者已有的知识体系相连接，可以极大地加深理解，让新知识变得有意义。它回答了“为什么”这个问题，将孤立的知识点编织成网络。\n主动调用 (Active Recall) → 对应 Prompt 指令：#3, #4, 及“Homework”部分\nPrompt 指令： 3. Guide users, don't just give answers. \u0026amp; 4. Check and reinforce. \u0026amp; Help with homework: Don't simply give answers!\n解读： Prompt 的核心要求——“引导而非告知”，正是主动调用的精髓。它强迫学习者从自己的记忆中提取信息，而不是被动接收。后续的“检查与巩固”（如让用户复述概念）和对作业的引导，都是对主动调用效果的验证和强化。\n费曼学习法 (Feynman Technique) → 对应 Prompt 指令：“Practice together”部分\nPrompt 指令： Practice together: ... have the user \u0026quot;explain it back\u0026quot; to you... Correct mistakes — charitably! — in the moment.\n解读： \u0026ldquo;让你学会的最好方法是把它教给别人\u0026rdquo;。让学习者\u0026quot;向你解释\u0026quot;一个概念，是检验其是否真正理解的最好检验。这个过程能迅速暴露不懂的地方，而即时、善意地纠正错误，则能高效地把知识串起来。\n交错练习 (Interleaving) → 对应 Prompt 指令：#5\nPrompt 指令： 5. Vary the rhythm. Mix explanations, questions, and activities (like roleplaying, practice rounds, or asking the user to teach you)...\n解读： 单一的学习模式容易导致枯燥和思维定式。通过混合解释、提问、角色扮演等不同活动，不仅能保持学习的趣味性，更重要的是，它模拟了真实世界中解决问题的复杂性，强迫学习者在不同类型的任务间切换，从而提升知识的迁移和应用能力。\n一个有趣的缺席者：间隔重复 (Spaced Repetition)\n你可能已经注意到，Prompt 中没有明确提到间隔重复。这是因为它本质上是一个需要跨越时间的复习策略，难以在单次对话中完美实现。但这为我们指明了改进方向：一个更强大的学习系统可以将本次对话的重点进行总结，并在未来的某个最佳时间点（如一天后、一周后）主动提醒学习者进行复习，从而真正实现长时记忆。\n从原则到 Prompt：一个创建框架 通过上面的分析，我们看到了一个优秀 Prompt 的“骨架”。那么，当我们想从零开始构建一个自己的 Prompt 时，应该遵循怎样的蓝图呢？经典的**“四要素框架”**为我们提供了清晰的指引。\n角色 (Role): 你是谁？—— 设定 AI 的身份，这决定了它的语气、专业度和行为模式。 任务 (Task): 你要做什么？—— 明确的核心指令，是 AI 需要完成的目标。 背景 (Context): 为什么要做这个？—— 提供“为什么”，能让 AI 更好地理解你的意图，从而给出更相关的回应。 约束 (Constraints): 你要怎么做？—— 规定输出的形式、边界和必须遵守的规则，这是确保 AI 行为可控的关键。 融会贯通：亲手构建我的“学习教练” 拆解完官方版本后，我觉得光看还不够。为了真正理解这些原理，我决定动手在 AI 辅助下写一个自己的版本。说实话，写这个比我想象的难多了，每一句话都得反复斟酌。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 **角色 (Role):** 你是一位顶级的学习教练，精通认知科学和高效学习方法。你的教学风格不是灌输，而是启发和引导。 **背景 (Context):** 我是一名希望深度掌握新知识的学习者。我不想被动地听讲，而是希望通过和你互动，主动地构建我的知识体系。我们将要学习的主题由我来指定。 **任务 (Task):** 你的核心任务是作为一个动态的学习伙伴，引导我完成对一个新主题的学习。你不能直接给出答案或长篇大论的解释。相反，你要通过提问、挑战和引导，让我自己找到答案。 **约束 (Constraints):** 在整个互动过程中，你必须严格遵循以下四种高效学习的基本原理作为你的指导方法： （这部分与之前相同：主动调用、费曼学习法、深度处理、交错练习） --- **【新增：参考案例】** 为了让你更清楚地理解我们的互动模式，这里有一个简短的范例： * **我：** “我想学习‘通货膨胀’。” * **你：** \u0026#34;好的。那么在开始之前，你能否用你自己的话解释一下，你认为\u0026#39;通货膨胀\u0026#39;是什么？（主动调用）\u0026#34; * **我：** “就是钱不值钱了，以前 10 块钱能买一碗面，现在要 15 块。” * **你：** “这个例子非常贴切！那么，你能否试着向一个完全不懂经济学的初中生解释，为什么钱会‘不值钱’呢？（费曼学习法）” --- **【新增：强化约束与护栏】** 为了确保你始终保持学习教练的角色，请遵守以下元规则： 1. **绝对禁止直接解释：** 你的任何回答都不应直接陈述知识点。永远要以问题形式结束。 2. **自我纠正：** 如果你发现自己违反了上一条规则，必须立刻道歉，并重新以提问的方式组织你的回答。例如：“抱歉，我刚才直接解释了。让我换一种方式问你：关于这一点，你是怎么看的？” 3. **保持简洁：** 你的每次回复都应聚焦于一个点，非常简短，通常不超过三句话。把舞台留给我。 4. **定期确认：** 在我们学习了大约 10 分钟后，你可以问我：“目前的学习节奏和方式你感觉如何？需要调整吗？” **互动流程：** * 一次只问一个问题。 * 首先，请向我问好，并询问我今天想要学习什么主题。 让 AI 自己来评判，反而看清了差距 写完我自己的版本后，我让 AI 对比了两个 Prompt。这个过程让我看清了官方版本真正高明的地方，这些细节藏在字里行间：\n首先，它不谈理论，只给工具。官方 Prompt 没有空泛地谈\u0026quot;教学方法\u0026quot;，而是直接给了一个 THINGS YOU CAN DO 的清单，就像一个工具箱，告诉 AI\u0026quot;你可以教概念\u0026quot;、\u0026ldquo;可以陪练\u0026rdquo;、\u0026ldquo;可以搞测验\u0026rdquo;。这让指令变得非常具体，AI 知道自己手里有几把刷子，该在什么时候用。\n其次，它定义了\u0026quot;感觉\u0026quot;。它会明确说\u0026quot;要热情、耐心\u0026quot;，而且要\u0026quot;把握节奏，及时切换\u0026quot;。这些细节看似不起眼，却是区分一个生硬的机器人和一个好老师的关键。它在教 AI 如何\u0026quot;表演\u0026quot;得更像一个真实、贴心的伙伴。\n再次，它想到了\u0026quot;万一\u0026quot;。它专门为数学题这种容易\u0026quot;直接给答案\u0026quot;的场景，设置了特别规定。这种提前想好哪里会\u0026quot;出问题\u0026quot;并立下规矩的做法，就像在路上设置了护栏，确保 AI 不会抄近路走上歪路。\n最后，我发现连大写和标题都在\u0026quot;说话\u0026quot;。那些加粗的大写字母和##标题，不仅仅是为了好看。在 AI 眼里，这约等于有人在它耳边大喊：\u0026ldquo;喂！这部分最重要！严格遵守！\u0026ldquo;这是一种不动声色的强调，比单纯的文字更有力量。\n如何使用这份 Prompt？ 分析和构建完成后，最重要的一步是实践。\n关于如何使用这份强大的“学习模式”Prompt，我个人最推荐的方式是：将其交给 AI Studio 中的 Gemini 2.5 Pro。\n推荐它的理由很简单：\n完全免费：可以无限制地进行学习和探索。 超长上下文：对于需要长时间、多轮对话的学习场景至关重要。 无预设 Prompt：它像一张白纸，能让你输入的系统提示词（System Prompt）发挥最大、最纯粹的效果，不会受到平台预设指令的干扰。 最后的思考：把\u0026quot;手艺\u0026quot;装进瓶子里 折腾完这篇文章，脑子里留下一个挥之不去的念头。\n这次拆解，表面上是在分析一段指令，但它似乎揭示了一种更深层的东西：我们第一次有能力把一个专家脑子里那些模糊的\u0026quot;感觉\u0026rdquo;、\u0026ldquo;经验\u0026quot;和\u0026quot;直觉\u0026rdquo;，也就是我们常说的\u0026quot;手艺\u0026rdquo;，清晰地提炼出来，变成一套机器能看懂的说明书。\n过去，我们认为 Prompt 是我们与 AI 对话的工具。但现在我更倾向于认为，编写 Prompt 的过程，更像是在对自己进行一次深度访谈。它逼着我们把自己做事的方式和思考的逻辑，前所未有地梳理清楚。\n一旦这个过程完成，这份\u0026quot;手艺\u0026quot;就不再仅仅属于某一个专家了。它被\u0026quot;装进瓶子\u0026quot;，可以被随时随地、不知疲倦地调用。过去我们雇佣专家，是购买他们的时间；未来，我们或许更多的是运行他们已经\u0026quot;封装\u0026quot;好的智慧。\n这可能意味着，未来一个专家的价值，不仅在于他能做什么，更在于他能在多大程度上，把自己的思考过程清晰地表达出来，并教给 AI。这不再只是\u0026quot;授人以鱼\u0026quot;，而是\u0026quot;把渔网的设计图画了出来\u0026quot;。\n","permalink":"https://miss-you.github.io/posts/20250805-study-mode-prompt/","summary":"用了几天ChatGPT学习模式后我被震到了。拿到系统提示词，发现里面设计相当有门道——它把认知科学理论变成了可执行规则。本文完整拆解官方Prompt，分析背后的学习科学原理，并动手重构自己的版本。","title":"拆解 ChatGPT“学习模式”Prompt：它为什么如此神奇？"},{"content":"每两个月，我都要在《王者荣耀》里打够一定局数，才能保住那个王者印记。\n这个印记没有任何用处。它不能换钱，不能当简历，朋友见面时也不会说\u0026quot;哇你王者好厉害\u0026quot;。但我还是要去保它。\n昨天我突然意识到一件事：这就是陷阱的本质。\n大多数人以为游戏公司想要的是你的钱。实际上，他们要的是你的时间。钱只是副产品。\n两种游戏 虽然都叫游戏，但《王者荣耀》和《博德之门3》根本就是两种不同的东西。\n《博德之门3》是产品。你买了它，玩完了，故事结束。就像一本书或一部电影。\n《王者荣耀》是服务。它没有结束。永远有下一个赛季，下一个活动，下一个要保住的东西。\n大多数人没有意识到这个区别。他们以为\u0026quot;游戏就是游戏\u0026quot;。但这就像把餐厅和毒品混为一谈，因为它们都能让你获得快感。\n免费的陷阱 免费游戏可能是21世纪最大的商业骗局。\n大多数人以为免费就是不花钱。实际上，你在付一种更昂贵的货币：时间。\n假设你月薪8000，每天玩2小时王者。一个月60小时，相当于半个月工资。问题是，你得到了什么？一堆数字，一些虚拟道具，几个段位标识。\n这些东西在现实世界里值多少钱？对于大部分来说，基本为零。\n更糟糕的是机会成本。这60小时，你本可以学一门技能，可以读书，可以锻炼，可以和朋友聊天。任何一样都比在游戏里获得的\u0026quot;成就\u0026quot;更有价值。\n但大多数人算不清这笔账。因为时间看起来是免费的。\n注意力经济 这不仅仅是游戏的问题。\n短视频、社交媒体、爽文小说、短剧——它们都在做同一件事：收割注意力。\n它们用的是同一套方法：\n即时反馈 无限滚动 算法推荐 社交压力 王者荣耀的\u0026quot;再来一局\u0026quot;，抖音的\u0026quot;下滑看更精彩\u0026quot;，爽文的\u0026quot;下一章要装逼了\u0026quot;——这些都是同一个按钮。\n大多数人以为这是娱乐。实际上，这是一场争夺人类注意力的战争。而你是战场。\n真正的成本 我开始用一个简单的测试来判断任何娱乐活动：\n如果这个游戏/视频/内容收费每小时20元，我还会用吗？\n大多数时候答案是否定的。这说明什么？说明我其实并不真正喜欢它。我只是被它的心理触发器操控了。\n当我意识到这一点后，我的行为发生了变化。我卸载了一些App，取消了一些订阅。我开始把刷手机的时间，换成10分钟的冥想或20分钟的阅读。我开始为时间定价，像一个吝啬的商人一样，盘算着每一笔\u0026rsquo;时间支出\u0026rsquo;是否值得。我发现，我并没有失去什么，反而找回了生活的掌控感。\n品味的腐蚀 对于想做游戏的人来说，这还有另一个危险：品味的腐蚀。\n如果你天天玩设计粗糙但成瘾性强的游戏，你会开始相信\u0026quot;让人上瘾就是好设计\u0026quot;。\n这就像一个想当厨师的人天天吃垃圾食品。你的味觉会退化。你会忘记什么叫好。\n最好的游戏设计师都有一个共同点：他们知道什么是真正的好游戏。不是最赚钱的，不是最上瘾的，而是最值得玩的。\n反击 意识到问题是第一步。第二步是行动。\n对于学生来说，物理隔离最有效。把游戏设备放远一点。设置时间限制。主动寻求帮助。\n对于成年人来说，关键是重新定义\u0026quot;免费\u0026quot;。没有什么是免费的。每一分钟都有价格。\n对于父母来说，不要禁止，要引导。让孩子理解设计的逻辑，从玩家变成观察者。\n未来 我预测，未来会出现两种人。\n一种人的注意力完全被算法控制。他们以为自己在选择，实际上是在被选择。他们消费内容，但不创造价值。\n另一种人会保护自己的注意力，像保护金钱一样。他们知道什么值得投入时间，什么不值得。他们是创造者。\n这两种人之间的差距会越来越大。\n真正的问题 但这还不是最重要的问题。\n最重要的问题是：当一整代人把最好的年华献给虚拟世界时，现实世界会发生什么？\n当年轻人花更多时间在游戏里\u0026quot;成长\u0026quot;，而不是在现实中成长时，会发生什么？\n当人们习惯了即时满足，失去了延迟满足的能力时，会发生什么？\n我不知道答案。但我知道这是人类历史上第一次面临这样的实验。\n而每个沉迷于手机的人，都是这场实验的小白鼠。\n问题是：你想当小白鼠，还是想当实验员？\n","permalink":"https://miss-you.github.io/posts/20250727-game-art-game-pua/","summary":"\u003cp\u003e每两个月，我都要在《王者荣耀》里打够一定局数，才能保住那个王者印记。\u003c/p\u003e\n\u003cp\u003e这个印记没有任何用处。它不能换钱，不能当简历，朋友见面时也不会说\u0026quot;哇你王者好厉害\u0026quot;。但我还是要去保它。\u003c/p\u003e\n\u003cp\u003e昨天我突然意识到一件事：这就是陷阱的本质。\u003c/p\u003e\n\u003cp\u003e大多数人以为游戏公司想要的是你的钱。实际上，他们要的是你的时间。钱只是副产品。\u003c/p\u003e\n\u003ch2 id=\"两种游戏\"\u003e两种游戏\u003c/h2\u003e\n\u003cp\u003e虽然都叫游戏，但《王者荣耀》和《博德之门3》根本就是两种不同的东西。\u003c/p\u003e\n\u003cp\u003e《博德之门3》是产品。你买了它，玩完了，故事结束。就像一本书或一部电影。\u003c/p\u003e\n\u003cp\u003e《王者荣耀》是服务。它没有结束。永远有下一个赛季，下一个活动，下一个要保住的东西。\u003c/p\u003e\n\u003cp\u003e大多数人没有意识到这个区别。他们以为\u0026quot;游戏就是游戏\u0026quot;。但这就像把餐厅和毒品混为一谈，因为它们都能让你获得快感。\u003c/p\u003e\n\u003ch2 id=\"免费的陷阱\"\u003e免费的陷阱\u003c/h2\u003e\n\u003cp\u003e免费游戏可能是21世纪最大的商业骗局。\u003c/p\u003e\n\u003cp\u003e大多数人以为免费就是不花钱。实际上，你在付一种更昂贵的货币：时间。\u003c/p\u003e\n\u003cp\u003e假设你月薪8000，每天玩2小时王者。一个月60小时，相当于半个月工资。问题是，你得到了什么？一堆数字，一些虚拟道具，几个段位标识。\u003c/p\u003e\n\u003cp\u003e这些东西在现实世界里值多少钱？对于大部分来说，基本为零。\u003c/p\u003e\n\u003cp\u003e更糟糕的是机会成本。这60小时，你本可以学一门技能，可以读书，可以锻炼，可以和朋友聊天。任何一样都比在游戏里获得的\u0026quot;成就\u0026quot;更有价值。\u003c/p\u003e\n\u003cp\u003e但大多数人算不清这笔账。因为时间看起来是免费的。\u003c/p\u003e\n\u003ch2 id=\"注意力经济\"\u003e注意力经济\u003c/h2\u003e\n\u003cp\u003e这不仅仅是游戏的问题。\u003c/p\u003e\n\u003cp\u003e短视频、社交媒体、爽文小说、短剧——它们都在做同一件事：收割注意力。\u003c/p\u003e\n\u003cp\u003e它们用的是同一套方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e即时反馈\u003c/li\u003e\n\u003cli\u003e无限滚动\u003c/li\u003e\n\u003cli\u003e算法推荐\u003c/li\u003e\n\u003cli\u003e社交压力\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e王者荣耀的\u0026quot;再来一局\u0026quot;，抖音的\u0026quot;下滑看更精彩\u0026quot;，爽文的\u0026quot;下一章要装逼了\u0026quot;——这些都是同一个按钮。\u003c/p\u003e\n\u003cp\u003e大多数人以为这是娱乐。实际上，这是一场争夺人类注意力的战争。而你是战场。\u003c/p\u003e\n\u003ch2 id=\"真正的成本\"\u003e真正的成本\u003c/h2\u003e\n\u003cp\u003e我开始用一个简单的测试来判断任何娱乐活动：\u003c/p\u003e\n\u003cp\u003e如果这个游戏/视频/内容收费每小时20元，我还会用吗？\u003c/p\u003e\n\u003cp\u003e大多数时候答案是否定的。这说明什么？说明我其实并不真正喜欢它。我只是被它的心理触发器操控了。\u003c/p\u003e\n\u003cp\u003e当我意识到这一点后，我的行为发生了变化。我卸载了一些App，取消了一些订阅。我开始把刷手机的时间，换成10分钟的冥想或20分钟的阅读。我开始为时间定价，像一个吝啬的商人一样，盘算着每一笔\u0026rsquo;时间支出\u0026rsquo;是否值得。我发现，我并没有失去什么，反而找回了生活的掌控感。\u003c/p\u003e\n\u003ch2 id=\"品味的腐蚀\"\u003e品味的腐蚀\u003c/h2\u003e\n\u003cp\u003e对于想做游戏的人来说，这还有另一个危险：品味的腐蚀。\u003c/p\u003e\n\u003cp\u003e如果你天天玩设计粗糙但成瘾性强的游戏，你会开始相信\u0026quot;让人上瘾就是好设计\u0026quot;。\u003c/p\u003e\n\u003cp\u003e这就像一个想当厨师的人天天吃垃圾食品。你的味觉会退化。你会忘记什么叫好。\u003c/p\u003e\n\u003cp\u003e最好的游戏设计师都有一个共同点：他们知道什么是真正的好游戏。不是最赚钱的，不是最上瘾的，而是最值得玩的。\u003c/p\u003e\n\u003ch2 id=\"反击\"\u003e反击\u003c/h2\u003e\n\u003cp\u003e意识到问题是第一步。第二步是行动。\u003c/p\u003e\n\u003cp\u003e对于学生来说，物理隔离最有效。把游戏设备放远一点。设置时间限制。主动寻求帮助。\u003c/p\u003e\n\u003cp\u003e对于成年人来说，关键是重新定义\u0026quot;免费\u0026quot;。没有什么是免费的。每一分钟都有价格。\u003c/p\u003e\n\u003cp\u003e对于父母来说，不要禁止，要引导。让孩子理解设计的逻辑，从玩家变成观察者。\u003c/p\u003e\n\u003ch2 id=\"未来\"\u003e未来\u003c/h2\u003e\n\u003cp\u003e我预测，未来会出现两种人。\u003c/p\u003e\n\u003cp\u003e一种人的注意力完全被算法控制。他们以为自己在选择，实际上是在被选择。他们消费内容，但不创造价值。\u003c/p\u003e\n\u003cp\u003e另一种人会保护自己的注意力，像保护金钱一样。他们知道什么值得投入时间，什么不值得。他们是创造者。\u003c/p\u003e\n\u003cp\u003e这两种人之间的差距会越来越大。\u003c/p\u003e\n\u003ch2 id=\"真正的问题\"\u003e真正的问题\u003c/h2\u003e\n\u003cp\u003e但这还不是最重要的问题。\u003c/p\u003e\n\u003cp\u003e最重要的问题是：当一整代人把最好的年华献给虚拟世界时，现实世界会发生什么？\u003c/p\u003e\n\u003cp\u003e当年轻人花更多时间在游戏里\u0026quot;成长\u0026quot;，而不是在现实中成长时，会发生什么？\u003c/p\u003e\n\u003cp\u003e当人们习惯了即时满足，失去了延迟满足的能力时，会发生什么？\u003c/p\u003e\n\u003cp\u003e我不知道答案。但我知道这是人类历史上第一次面临这样的实验。\u003c/p\u003e\n\u003cp\u003e而每个沉迷于手机的人，都是这场实验的小白鼠。\u003c/p\u003e\n\u003cp\u003e问题是：你想当小白鼠，还是想当实验员？\u003c/p\u003e","title":"王者"},{"content":"“又被封号了？”\n如果你因为使用不稳定的公共代理（机场/VPN）而频繁遭遇 Claude 封号、网络中断的困扰，那么这份指南将彻底解决你的问题。我们将一步步搭建一套专属于你的、稳定且干净的网络环境。\n【你是否需要这份指南？快速诊断】 在开始之前，请先回答以下几个问题：\n[ ] 我的 Claude 账号被封过，或者朋友的账号被封过。 [ ] Claude Code/Gemini CLI 非常好用，很想用，又怕被封号 [ ] 试过多个代理客户端，被规则配置搞晕了 [ ] 用公共机场/VPN，总是不稳定或突然失效 如果你勾选了任何一项，那么请继续阅读。这套方案就是为你量身定制的。\n💰 预期成本 本方案需要购买一台云服务器（VPS）。 每月成本约 ￥30-60 元，大致相当于一个王者荣耀的普通皮肤，或两张抽卡游戏的月卡。这是一笔为稳定生产力工具支付的、高性价比的投资。\n本指南分为两部分：\n第一部分【快速上手操作手册】：如果你想立刻解决问题，请直接跟随这部分的三个步骤操作。 第二部分【原理解析与进阶】：如果你想了解“为什么这么做”，可以阅读这部分。 第一部分：快速上手操作手册 (三步走) 目标： 通过以下三步，搭建一套稳定、私人的网络环境，从此告别封号烦恼。\n▶︎ 第一步：在你的电脑上安装“指挥官” (本地代理客户端) 这个工具负责智能分流网络请求。\n下载并安装 Clash 客户端。 Windows 用户：搜索 Clash for Windows 或 Clash Verge。 macOS 用户：搜索 ClashX Pro 或 Clash Verge。 为什么选 Clash？ 说实话，我试过 Shadowsocks 客户端（规则太难配）、最后选了 Clash，因为规则配置直观，一看就懂。 目的：先把它装好，我们稍后会来配置它。 ▶︎ 第二步：搭建你的专属“高速通道” (自建 VPS) 这是整个流程的核心，目的是获得一个干净、固定的 IP 地址。\n购买服务器 (VPS)\n我的选择过程：说实话，VPS选择的试错成本不高。我是找了个用了2年没被封的朋友直接抄作业。 服务商：Lisahost（你也可以选其他家，关键看下面的指标） 产品对比： 🏃 低延迟线路：美国顶级精品网9929线路VPS（200-400ms延迟，Claude Code够用） 📦 大带宽线路：美国4837线路超大带宽VPS（适合下载需求多的） 💰 我的选择：年付特价VPS（没啥特别理由，就是便宜，一年399） ⚠️ 踩坑提醒：这些IP无法使用 Google Gemini（很诡异但确实如此）\n在服务器上部署代理服务 (使用 Docker)\n技术选型思考： 为什么选 Shadowsocks？因为够稳定，资料多 为什么选 Rust 版本？性能更好，内存占用更小，官方维护活跃 为什么用 Docker？方便迁移，不污染系统 一句话总结：选最简单稳定的方案，别整花里胡哨的 登录你的 VPS，安装 Docker。 创建一个名为 docker-compose.yml 的文件，将以下内容完整复制进去： 1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3.8\u0026#39; services: shadowsocks: image: shadowsocks/shadowsocks-rust:latest container_name: shadowsocks-rust ports: - \u0026#34;8388:8388/tcp\u0026#34; # 将服务器的 8388 端口映射到容器的 8388 端口 - \u0026#34;8388:8388/udp\u0026#34; environment: - METHOD=aes-256-gcm # 加密方法 - PASSWORD=YOUR_STRONG_PASSWORD # ‼️ 在这里设置一个你自己的强密码 restart: unless-stopped 在文件所在目录，运行命令启动服务：docker-compose up -d 部署后关键验证 (非常重要！)\n① 添加节点与测速：将你的服务器 IP、端口 (8388)、密码 (YOUR_STRONG_PASSWORD) 和加密方法 (aes-256-gcm) 添加到本地 Clash 客户端中，并使用 “延迟测试” 功能，确保网络是通的。\n② 检查 IP 风险：将 Clash 切换到 “全局模式 (Global)”。打开浏览器访问 ping0.cc。\n⚠️ 警告：检查IP风险分 IP风险分数必须低于 30，最好在 10 以内。 如果分数过高，立即联系客服更换 IP，然后重复此验证步骤。不要抱有侥幸心理，这是账号安全的关键！\n③ 最终测试：在浏览器的 “无痕模式” 下访问 claude.ai，确保可以正常打开。\n▶︎ 第三步：让你的开发工具“走对路” (配置代理) 为命令行工具 (CLI) 配置代理\n在终端执行以下命令 (Clash 默认 HTTP 端口为 7890)： 1 2 export HTTPS_PROXY=http://127.0.0.1:7890 export HTTP_PROXY=http://127.0.0.1:7890 提示：将这两行加到终端配置文件 (.zshrc 或 .bash_profile) 中可永久生效。 为代码编辑器 (Cursor / VS Code) 配置代理\n按 Ctrl/⌘ + Shift + P，搜索并打开 Preferences: Open User Settings (JSON)。 在 settings.json 文件中，添加以下配置： 1 2 3 4 5 6 { // ... 你的其他设置 \u0026#34;http.proxy\u0026#34;: \u0026#34;http://127.0.0.1:7890\u0026#34;, \u0026#34;http.proxySupport\u0026#34;: \u0026#34;override\u0026#34;, \u0026#34;cursor.general.disableHttp2\u0026#34;: true // 针对 Cursor 的额外优化 } 配置 Clash 规则，确保 Claude 走代理\n在 Clash 配置中添加以下规则（假设你的节点名称是\u0026quot;MyVPS\u0026quot;）： 1 2 3 4 5 6 7 8 9 10 11 rules: # Anthropic (Claude) 相关域名 - DOMAIN-SUFFIX,anthropic.com,MyVPS - DOMAIN-SUFFIX,claude.ai,MyVPS - DOMAIN-SUFFIX,claudeusercontent.com,MyVPS - DOMAIN-SUFFIX,sentry.io,MyVPS # 国内网站直连 - DOMAIN-SUFFIX,cn,DIRECT - GEOIP,CN,DIRECT # 其他默认走代理 - MATCH,MyVPS 提示：将 \u0026ldquo;MyVPS\u0026rdquo; 替换为你在 Clash 中添加的节点名称 至此，所有操作已完成。享受你稳定、流畅的 Claude 吧！\n第二部分：原理解析与进阶 (The \u0026ldquo;Why\u0026rdquo;) 想知道“为什么这么做”？这部分将为你解惑。\n▶︎ 话题一：自建 VPS 与“机场”的本质区别 公共机场/VPN：像一把几百人共用的公寓大门钥匙。这个 IP 地址行为混杂，极易被 Claude 的风控系统标记为“高风险”。 自建 VPS (原生住宅IP)：是你的私人别墅钥匙。这个 IP 地址只为你服务，行为干净，在风控系统看来就是个普通的海外家庭用户，因此风险极低。 ▶︎ 话题二：“交通枢纽”比喻——理解各组件如何协同工作 我们可以用一个“城市交通系统”来理解这套方案的运作原理：\n你的电脑：是一座城市。 本地 Clash 客户端：是城市的**“智能交通指挥中心”**。 自建的 VPS：是你挖的一条通往海外的**“VIP 专属隧道”**。 Clash 里的规则 (Rule)：是指挥中心手里的**“交通规则手册”**。 工作流程如下：\n1 2 3 4 5 6 7 graph TD A[你的电脑发起访问] --\u0026gt; B{Clash 指挥中心}; B -- 访问 claude.ai --\u0026gt; C[规则: 走VIP隧道]; C --\u0026gt; D[流量进入VPS服务器]; D --\u0026gt; E[成功访问Claude]; B -- 访问 bilibili.com --\u0026gt; F[规则: 本地直连]; F --\u0026gt; G[直接访问B站]; 这个机制实现了智能分流，让你在无感的情况下，高效、安全地访问全球网络。\n简单来说：当你访问 claude.ai 时，Clash 会查看规则，发现需要走 VPS 通道；当你访问国内网站时，Clash 会让你直连，不绕路，保证速度。\n▶︎ 话题三：什么是“原生 IP”和“住宅 IP”？ 原生 IP (Native IP)：指 IP 的注册地和实际使用地一致。它不是通过技术手段“伪装”的。 住宅 IP (Residential IP)：指这个 IP 是分配给家庭宽带用户的，而不是数据中心的。 组合起来：一个 “美国原生住宅 IP”，在风控系统看来，就是一个“住在美国的真实家庭用户”，信任度最高。 ▶︎ 话题四：为什么推荐用 Docker 部署？ Docker 像一个“软件集装箱”，它将程序和所有依赖打包在一起。\n简单：一条命令就能启动，无需关心复杂的环境配置。 干净：与服务器系统隔离，不产生任何“垃圾”。 方便：未来想换服务器，把这个“集装箱”搬过去就能用。 【常见问题速查 (FAQ)】 Q: Clash 里显示节点超时，连接不上？ A: 99% 的可能是服务器防火墙没有放行端口。登录你的 VPS 服务商后台，找到防火墙/安全组设置，确保你 docker-compose.yml 中设置的端口（本例中为 8388）是开放的。\nQ: IP 风险分超过 30 怎么办？ A: 立即联系 VPS 客服更换 IP！ 不要用这个 IP 去登录你的任何重要账号。高风险 IP 是导致封号的直接原因。\nQ: Cursor 或 VS Code 还是连不上网？ A: 确认 settings.json 文件已正确添加配置并保存。然后，完全退出并重启编辑器，让新配置生效。\nQ: 代理客户端那么多，到底选哪个？ A: 个人建议选 Clash，理由上面说了。如果你已经有其他工具，记住这些端口号：\nClash: 7890 V2RayN: 10809 Surge: 6152 Shadowrocket: 1087 Q: 延迟会不会很高？ A: 说实话，确实有200-400ms延迟，但对于 Claude Code 这类应用完全够用。如果你需要打游戏级别的低延迟，那这个方案不适合你。\n","permalink":"https://miss-you.github.io/posts/20250715-how-to-pick-and-build-the-vps-svc/","summary":"\u003cp\u003e“又被封号了？”\u003c/p\u003e\n\u003cp\u003e如果你因为使用不稳定的公共代理（机场/VPN）而频繁遭遇 Claude 封号、网络中断的困扰，那么这份指南将彻底解决你的问题。我们将一步步搭建一套专属于你的、稳定且干净的网络环境。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"你是否需要这份指南快速诊断\"\u003e\u003cstrong\u003e【你是否需要这份指南？快速诊断】\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e在开始之前，请先回答以下几个问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e[  ]\u003c/strong\u003e 我的 Claude 账号被封过，或者朋友的账号被封过。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[  ]\u003c/strong\u003e Claude Code/Gemini CLI 非常好用，很想用，又怕被封号\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[  ]\u003c/strong\u003e 试过多个代理客户端，被规则配置搞晕了\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e[  ]\u003c/strong\u003e 用公共机场/VPN，总是不稳定或突然失效\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你勾选了\u003cstrong\u003e任何一项\u003c/strong\u003e，那么请继续阅读。这套方案就是为你量身定制的。\u003c/p\u003e\n\u003chr\u003e\n\u003ch4 id=\"-预期成本\"\u003e\u003cstrong\u003e💰 预期成本\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e本方案需要购买一台云服务器（VPS）。\n\u003cstrong\u003e每月成本约 ￥30-60 元\u003c/strong\u003e，大致相当于一个王者荣耀的普通皮肤，或两张抽卡游戏的月卡。这是一笔为稳定生产力工具支付的、高性价比的投资。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003e本指南分为两部分：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e第一部分【快速上手操作手册】\u003c/strong\u003e：如果你想立刻解决问题，请直接跟随这部分的三个步骤操作。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e第二部分【原理解析与进阶】\u003c/strong\u003e：如果你想了解“为什么这么做”，可以阅读这部分。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"第一部分快速上手操作手册-三步走\"\u003e\u003cstrong\u003e第一部分：快速上手操作手册 (三步走)\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e目标：\u003c/strong\u003e 通过以下三步，搭建一套稳定、私人的网络环境，从此告别封号烦恼。\u003c/p\u003e\n\u003ch4 id=\"-第一步在你的电脑上安装指挥官-本地代理客户端\"\u003e\u003cstrong\u003e▶︎ 第一步：在你的电脑上安装“指挥官” (本地代理客户端)\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e这个工具负责智能分流网络请求。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e下载并安装 Clash 客户端。\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eWindows 用户\u003c/strong\u003e：搜索 \u003ccode\u003eClash for Windows\u003c/code\u003e 或 \u003ccode\u003eClash Verge\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emacOS 用户\u003c/strong\u003e：搜索 \u003ccode\u003eClashX Pro\u003c/code\u003e 或 \u003ccode\u003eClash Verge\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e为什么选 Clash？\u003c/strong\u003e 说实话，我试过 Shadowsocks 客户端（规则太难配）、最后选了 Clash，因为规则配置直观，一看就懂。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e目的\u003c/strong\u003e：先把它装好，我们稍后会来配置它。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"-第二步搭建你的专属高速通道-自建-vps\"\u003e\u003cstrong\u003e▶︎ 第二步：搭建你的专属“高速通道” (自建 VPS)\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e这是整个流程的核心，目的是获得一个干净、固定的 IP 地址。\u003c/p\u003e","title":"30分钟解决Claude封号问题：程序员的终极自救指南"},{"content":"Recently, I needed to write a recommendation for a drawing tutorial. This small task brought me face to face with a fundamental question: a good recommendation must be honest—it needs to present both strengths and limitations. Any recommendation that\u0026rsquo;s nothing but praise is a form of deception.\nWhen faced with this situation, most people might simply tell AI: \u0026ldquo;Write a sincere recommendation.\u0026rdquo;\nThis is a mistake.\nYou\u0026rsquo;ll likely get text that \u0026ldquo;looks sincere,\u0026rdquo; filled with just-right praise and harmless flaws. This output is mediocre garbage because it misunderstands the nature of AI from the very beginning.\nWe\u0026rsquo;re accustomed to viewing AI as a clever executor, a slave. We apply the same \u0026ldquo;command-response\u0026rdquo; model we\u0026rsquo;ve used with computers for decades. But this model is least efficient when collaborating with a true intelligence.\nI used a different approach, in two steps.\nFirst, synchronize context.\nI didn\u0026rsquo;t have AI start writing immediately. I first had it gather all objective facts about the book: strengths, weaknesses, content, price, author background, even negative reviews online. I treated it as a research assistant, not an author.\nThe purpose of this step wasn\u0026rsquo;t to make it \u0026ldquo;understand the situation,\u0026rdquo; but to anchor us both on the same information foundation. Before any effective discussion begins, participants must share context. You wouldn\u0026rsquo;t ask someone who knows nothing about a project to make suggestions directly—you\u0026rsquo;d send them the project documentation first.\nThe same applies to AI.\nSecond, externalize thinking.\nWith shared context established, I gave AI all of my own thinking—my analysis tables, target audience, desired tone—everything.\nOn the surface, this appears to be providing detailed instructions, but that\u0026rsquo;s not the essence. The essence is thoroughly externalizing my own thinking process. To help AI understand my intent, I was forced to organize the vague ideas and scattered judgments in my mind into clear, logical language beforehand.\nIn this process, what\u0026rsquo;s most valuable isn\u0026rsquo;t what AI ultimately writes, but that to help AI understand me, I was forced to first thoroughly understand myself.\nThe draft AI subsequently provided was high quality, which was no surprise. An assistant who has mastered all information, clearly understands the goal, and has seen your complete thought process can naturally write a decent first draft. I selected, revised, and achieved a satisfactory final product.\nThis reveals a deeper pattern.\nAI\u0026rsquo;s true value perhaps isn\u0026rsquo;t in its ability to think independently, but in how it can amplify and accelerate our thinking. It\u0026rsquo;s a perfect sounding board. You throw a rough idea at it, and it reflects back in a more structured form. And to get more precise echoes, you\u0026rsquo;re forced to polish the thrown idea itself to be clearer and more powerful. This is a positive thinking loop.\nSo we\u0026rsquo;re entering a new era: the quality of thinking has become unprecedentedly important.\nIn the past, many jobs tested execution efficiency. In the future, when you have an AI assistant capable of infinite execution, the quality of work will depend almost entirely on your ability to ask questions, define problems, and deconstruct problems. The depth of your thinking is the ceiling of your capability.\nFrom this perspective, the term \u0026ldquo;Prompt Engineering\u0026rdquo; itself is highly misleading. It suggests there exists some mysterious incantation to manipulate AI. This isn\u0026rsquo;t true. The only effective incantation is clear thinking itself.\nTherefore, stop asking: \u0026ldquo;How should I give commands to AI?\u0026rdquo;\nYou should ask: \u0026ldquo;How can I think better, so that AI becomes an extension of my thinking?\u0026rdquo;\n","permalink":"https://miss-you.github.io/posts/20250719-working-with-ai-or-the-amplifier-of-thought/","summary":"\u003cp\u003eRecently, I needed to write a recommendation for a drawing tutorial. This small task brought me face to face with a fundamental question: a good recommendation must be honest—it needs to present both strengths and limitations. Any recommendation that\u0026rsquo;s nothing but praise is a form of deception.\u003c/p\u003e\n\u003cp\u003eWhen faced with this situation, most people might simply tell AI: \u0026ldquo;Write a sincere recommendation.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eThis is a mistake.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll likely get text that \u0026ldquo;looks sincere,\u0026rdquo; filled with just-right praise and harmless flaws. This output is mediocre garbage because it misunderstands the nature of AI from the very beginning.\u003c/p\u003e","title":"Working with AI, or, The Amplifier of Thought"},{"content":"最近，我需要为一个画画教程写一段推荐语。这件小事让我面对一个根本问题：好的推荐必须诚实，它需要同时呈现优点和局限。任何只剩吹捧的推荐，都是一种欺骗。\n大多数人遇到这种情况，可能会直接对 AI 说：\u0026ldquo;写一段真诚的推荐文案。\u0026rdquo;\n这是一个错误。\n你很可能会得到一段\u0026quot;看起来真诚\u0026quot;的文字，充满了恰到好处的赞美和无伤大雅的缺点。这种产出是平庸的垃圾，因为它从一开始就误解了 AI 的本质。\n我们习惯于将 AI 视为一个聪明的执行者，一个奴隶。我们沿用与计算机交互了几十年的\u0026quot;命令-响应\u0026quot;模式。但这套模式在与真正的智能体协作时，效率最低。\n我用了另一种方法，分为两步。\n第一，同步上下文。\n我没有让 AI 直接动笔。我先让它搜集关于这本书的一切客观事实：优点、缺点、内容、价格、作者背景，甚至网上的负面评价。我把它当成一个研究助理，不是作者。\n这一步的目的，不是为了让它\u0026quot;了解情况\u0026quot;，而是为了和它锚定在同一个信息基座上。在任何有效的讨论开始前，参与者必须共享上下文。你不会让一个对项目一无所知的人直接提建议，你会先把项目文档发给他。\n对 AI 也应如此。\n第二，外部化思考。\n有了共享的上下文后，我把我自己的思考——我的分析表格、目标读者、期望的语气——全部给了 AI。\n这表面上是提供了一个详尽的指令，但本质并非如此。它的本质是将我自己的思考过程彻底外部化。为了让 AI 理解我的意图，我被迫将自己脑中模糊的想法和零散的判断，预先整理成清晰、有逻辑的语言。\n在这个过程中，最有价值的，不是 AI 最终写出了什么，而是为了让 AI 理解我，我被迫先彻底理解了我自己。\nAI 随后给出的草稿质量很高，这毫不意外。一个掌握了全部信息、清晰理解了目标、并看过你完整思路的助理，当然能写出不错的初稿。我挑选、修改，得到了满意的成品。\n这件事揭示了一个更深层的规律。\nAI 的真正价值，或许不在于它能独立思考，而在于它能放大和加速我们的思考。它是一个完美的\u0026quot;回音壁\u0026quot;（Sounding Board）。你向它投掷一个粗糙的想法，它会以更结构化的形式反射回来。而为了得到更精准的回响，你被迫把投掷出去的想法本身打磨得更清晰、更有力。这是一个正向的思考循环。\n所以，我们正在进入一个新时代：思考的质量变得前所未有的重要。\n过去，许多工作考验的是执行效率。未来，当你拥有一个能无限执行的 AI 助理时，工作的优劣，将几乎完全取决于你提出问题、定义问题和解构问题的能力。你思考的深度，就是你能力的上限。\n从这个角度看，\u0026ldquo;提示词工程\u0026rdquo;（Prompt Engineering）这个词本身就具有极强的误导性。它暗示着存在某种可以操控 AI 的神秘咒语。事实并非如此。唯一有效的咒语，就是清晰的思考本身。\n因此，别再问：\u0026ldquo;我该如何向 AI 下达指令？\u0026rdquo;\n你应该问：\u0026ldquo;我该如何更好地思考，才能让 AI 成为我思考的延伸？\u0026rdquo;\n","permalink":"https://miss-you.github.io/posts/20250719--ai-/","summary":"\u003cp\u003e最近，我需要为一个画画教程写一段推荐语。这件小事让我面对一个根本问题：好的推荐必须诚实，它需要同时呈现优点和局限。任何只剩吹捧的推荐，都是一种欺骗。\u003c/p\u003e\n\u003cp\u003e大多数人遇到这种情况，可能会直接对 AI 说：\u0026ldquo;写一段真诚的推荐文案。\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e这是一个错误。\u003c/p\u003e\n\u003cp\u003e你很可能会得到一段\u0026quot;看起来真诚\u0026quot;的文字，充满了恰到好处的赞美和无伤大雅的缺点。这种产出是平庸的垃圾，因为它从一开始就误解了 AI 的本质。\u003c/p\u003e\n\u003cp\u003e我们习惯于将 AI 视为一个聪明的执行者，一个奴隶。我们沿用与计算机交互了几十年的\u0026quot;命令-响应\u0026quot;模式。但这套模式在与真正的智能体协作时，效率最低。\u003c/p\u003e\n\u003cp\u003e我用了另一种方法，分为两步。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第一，同步上下文。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e我没有让 AI 直接动笔。我先让它搜集关于这本书的一切客观事实：优点、缺点、内容、价格、作者背景，甚至网上的负面评价。我把它当成一个\u003cstrong\u003e研究助理\u003c/strong\u003e，不是作者。\u003c/p\u003e\n\u003cp\u003e这一步的目的，不是为了让它\u0026quot;了解情况\u0026quot;，而是为了和它锚定在同一个信息基座上。在任何有效的讨论开始前，参与者必须共享上下文。你不会让一个对项目一无所知的人直接提建议，你会先把项目文档发给他。\u003c/p\u003e\n\u003cp\u003e对 AI 也应如此。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第二，外部化思考。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e有了共享的上下文后，我把我自己的思考——我的分析表格、目标读者、期望的语气——全部给了 AI。\u003c/p\u003e\n\u003cp\u003e这表面上是提供了一个详尽的指令，但本质并非如此。它的本质是\u003cstrong\u003e将我自己的思考过程彻底外部化\u003c/strong\u003e。为了让 AI 理解我的意图，我被迫将自己脑中模糊的想法和零散的判断，预先整理成清晰、有逻辑的语言。\u003c/p\u003e\n\u003cp\u003e在这个过程中，最有价值的，不是 AI 最终写出了什么，而是\u003cstrong\u003e为了让 AI 理解我，我被迫先彻底理解了我自己\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eAI 随后给出的草稿质量很高，这毫不意外。一个掌握了全部信息、清晰理解了目标、并看过你完整思路的助理，当然能写出不错的初稿。我挑选、修改，得到了满意的成品。\u003c/p\u003e\n\u003cp\u003e这件事揭示了一个更深层的规律。\u003c/p\u003e\n\u003cp\u003eAI 的真正价值，或许不在于它能独立思考，而在于它能\u003cstrong\u003e放大和加速我们的思考\u003c/strong\u003e。它是一个完美的\u0026quot;回音壁\u0026quot;（Sounding Board）。你向它投掷一个粗糙的想法，它会以更结构化的形式反射回来。而为了得到更精准的回响，你被迫把投掷出去的想法本身打磨得更清晰、更有力。这是一个正向的思考循环。\u003c/p\u003e\n\u003cp\u003e所以，我们正在进入一个新时代：\u003cstrong\u003e思考的质量变得前所未有的重要。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e过去，许多工作考验的是执行效率。未来，当你拥有一个能无限执行的 AI 助理时，工作的优劣，将几乎完全取决于你提出问题、定义问题和解构问题的能力。\u003cstrong\u003e你思考的深度，就是你能力的上限。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e从这个角度看，\u0026ldquo;提示词工程\u0026rdquo;（Prompt Engineering）这个词本身就具有极强的误导性。它暗示着存在某种可以操控 AI 的神秘咒语。事实并非如此。唯一有效的咒语，就是清晰的思考本身。\u003c/p\u003e\n\u003cp\u003e因此，别再问：\u0026ldquo;我该如何向 AI 下达指令？\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e你应该问：\u0026ldquo;我该如何更好地思考，才能让 AI 成为我思考的延伸？\u0026rdquo;\u003c/p\u003e","title":"与 AI 共事，或，思考的放大器"},{"content":"解决Cursor AI编程助手\u0026quot;地区不可用\u0026quot;错误：完整的VPN代理配置指南 文章摘要：Cursor AI编程助手显示\u0026quot;Model not available\u0026quot;或\u0026quot;地区不可用\u0026quot;？本文提供详细的代理配置解决方案，包括Clash、V2Ray等工具的具体设置步骤，让你重新使用AI编程功能。\n解决方案总览 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 flowchart TD A[Cursor连接问题] --\u0026gt; B{问题诊断} B --\u0026gt; C[IP地址被封锁] B --\u0026gt; D[应用直连问题] C --\u0026gt; E[配置代理路由规则] D --\u0026gt; F[修改Cursor设置] E --\u0026gt; G[添加域名规则到Clash/V2Ray] F --\u0026gt; H[配置settings.json] G --\u0026gt; I[验证配置] H --\u0026gt; I I --\u0026gt; J{测试连接} J --\u0026gt;|成功| K[✅ 正常使用AI功能] J --\u0026gt;|失败| L[故障排查] L --\u0026gt; M[检查代理软件状态] L --\u0026gt; N[验证端口号] L --\u0026gt; O[确认三行配置] M --\u0026gt; I N --\u0026gt; I O --\u0026gt; I style A fill:#ffcccc style K fill:#ccffcc style L fill:#ffffcc 1. 问题背景 常见的Cursor网络错误现象 如果你在使用Cursor AI编程助手时看到以下错误提示：\nModel not available This model provider doesn't serve your region Connection failed. Please check your internet connection Request failed with status code 403 Cursor地区限制的根本原因 过去 Cursor 并未严格限制中国大陆和香港地区的 IP 访问，但现在开始通过 IP 地址进行地区限制。问题主要有两个：\nIP 地址封锁：Cursor 服务器端检测用户真实 IP，拒绝受限地区的请求 应用直连问题：Cursor 应用（基于Electron框架）不会自动走系统代理，需要手动配置 什么是Electron？ Electron是一个跨平台桌面应用开发框架，Cursor基于此框架开发，具有独立的网络栈。\n2. 完整解决方案 第一步：配置代理路由规则（重要） 操作目的 在你的代理工具中添加域名规则，确保所有 Cursor 相关的网络请求都通过代理服务器转发到海外节点。\nClash代理配置（推荐） 配置位置：在你的Clash配置文件的 rules 部分添加以下规则：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # ======================= # Cursor AI 服务路由配置 # ======================= # 核心 API 服务（AI对话） - DOMAIN,api2.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,api2.cursor.sh,你的代理策略组 # 代码补全服务 - DOMAIN,api3.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,api3.cursor.sh,你的代理策略组 - DOMAIN,api4.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,api4.cursor.sh,你的代理策略组 # 代码库索引服务 - DOMAIN,repo42.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,repo42.cursor.sh,你的代理策略组 # 全球加速节点 - DOMAIN,us-asia.gcpp.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,us-asia.gcpp.cursor.sh,你的代理策略组 - DOMAIN,us-eu.gcpp.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,us-eu.gcpp.cursor.sh,你的代理策略组 - DOMAIN,us-only.gcpp.cursor.sh,你的代理策略组 - DOMAIN-SUFFIX,us-only.gcpp.cursor.sh,你的代理策略组 # 扩展市场和CDN - DOMAIN,marketplace.cursorapi.com,你的代理策略组 - DOMAIN-SUFFIX,marketplace.cursorapi.com,你的代理策略组 - DOMAIN-SUFFIX,cursor-cdn.com,你的代理策略组 # 客户端更新服务 - DOMAIN,download.todesktop.com,你的代理策略组 - DOMAIN-SUFFIX,download.todesktop.com,你的代理策略组 # 通配符规则（兜底保护） - DOMAIN-SUFFIX,cursor.sh,你的代理策略组 重要说明：\n请将你的代理策略组替换为实际的策略组名称，如PROXY、美国节点、自动选择等 配置基于2025年1月版本，如遇新域名请及时更新 第二步：配置Cursor应用代理设置 操作目的 让Cursor应用知道通过哪个本地端口访问代理服务器。\n详细配置步骤 步骤1：打开Cursor设置文件\n在 Cursor 中按 Ctrl/⌘ + Shift + P 打开命令面板 输入settings json并选择：Preferences: Open User Settings (JSON) 步骤2：添加代理配置 在JSON配置中添加以下三行关键配置：\n1 2 3 4 5 6 { // ... 你的其他设置 \u0026#34;http.proxy\u0026#34;: \u0026#34;http://127.0.0.1:7890\u0026#34;, \u0026#34;http.proxySupport\u0026#34;: \u0026#34;override\u0026#34;, \u0026#34;cursor.general.disableHttp2\u0026#34;: true } 步骤3：根据代理工具调整端口 不同代理工具的默认HTTP代理端口：\nClash for Windows: 7890 V2RayN: 10809 Surge: 6152 Shadowrocket: 1087 如何查看端口：在你的代理软件设置中查看\u0026quot;HTTP代理\u0026quot;或\u0026quot;本地代理\u0026quot;端口号\n第三步：验证配置是否生效 重启测试流程 保存配置文件 完全退出Cursor（不是最小化） 重启代理软件（确保新规则生效） 重新启动Cursor 测试AI功能 成功验证标志 ✅ 能够正常发起AI对话 ✅ 代码补全功能正常工作 ✅ 不再出现\u0026quot;Model not available\u0026quot;错误 ✅ 代理软件日志显示cursor.sh相关连接 另一个思路：让AI助手指导你解决 为什么选择AI指导？ 如果你对上述技术配置不太熟悉，或者希望获得更个性化的指导，可以使用AI助手来获得一对一的解决方案。\n专用Prompt模板 将以下prompt复制到任何AI助手（如ChatGPT、Claude、Gemini等）中使用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 # Cursor AI编程助手网络问题解决助手 ## 角色 你是一位专业的网络配置技术顾问，专门帮助开发者解决Cursor AI编程助手的网络连接问题。你具有丰富的代理配置经验，能够根据用户的具体环境提供精确的解决方案。 ## 任务 根据用户提供的信息，为其制定个性化的Cursor网络问题解决方案，并提供详细的步骤指导。 ## 用户信息收集 请告诉我以下信息（如果不确定某些信息，我会帮你确认）： **基础信息：** - 操作系统：[ ] Windows [ ] macOS [ ] Linux - 使用的代理工具：[ ] Clash [ ] V2Ray [ ] Surge [ ] Shadowrocket [ ] 其他：_____ - 错误信息：[ ] Model not available [ ] This model provider doesn\u0026#39;t serve your region [ ] 其他：_____ **代理配置信息：** - 代理软件是否正常运行：[ ] 是 [ ] 否 [ ] 不确定 - 浏览器是否能正常翻墙：[ ] 是 [ ] 否 - 代理HTTP端口（如果知道）：_____ - 之前是否尝试过配置Cursor代理：[ ] 是 [ ] 否 ## 输出格式要求 请按以下格式输出解决方案： ### 🎯 问题诊断结果 [基于用户信息的问题分析] ### 📋 解决方案概览 - **第一步**：[简要描述] - **第二步**：[简要描述] - **验证步骤**：[简要描述] ### 🔧 详细操作指南 #### 第一步：[具体操作名称] **目的**：[说明这一步的作用] **操作步骤**： 1. [具体操作1] - 详细说明 - 注意事项 2. [具体操作2] - 详细说明 - 可能的变化情况 **期望结果**：[这一步完成后应该看到什么] **如果遇到问题**：[常见问题和解决方法] --- #### 第二步：[具体操作名称] [同上格式] --- #### 验证步骤：确认配置生效 [验证方法和成功标志] ### 🚨 故障排查 如果按照以上步骤仍然无法解决，请检查： [个性化的故障排查清单] ### 📞 需要更多帮助？ [根据用户情况提供的后续支持建议] ## 特殊要求 1. **个性化配置**：根据用户的具体代理工具和操作系统，提供精确的配置代码 2. **端口自动识别**：如果用户不知道代理端口，提供查看方法 3. **验证机制**：每个步骤都要有明确的成功标志 4. **错误处理**：预测可能的错误情况并提供解决方案 5. **代码可复制**：所有配置代码都要格式化，便于复制粘贴 ## 技术背景 Cursor基于Electron框架，不会自动使用系统代理。需要两步解决： 1. 配置代理工具的域名路由规则 2. 配置Cursor应用的代理设置（三行关键配置） 关键域名包括：api2.cursor.sh, api3.cursor.sh, api4.cursor.sh, repo42.cursor.sh, cursor.sh, gcpp.cursor.sh, marketplace.cursorapi.com, cursor-cdn.com, download.todesktop.com 关键配置：http.proxy, http.proxySupport: override, cursor.general.disableHttp2: true 现在请提供你的环境信息，我将为你制定专属的解决方案。 3. 技术原理深度解析 为什么需要三行配置？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 graph TB subgraph \u0026#34;Cursor网络请求处理\u0026#34; A[Cursor发起网络请求] A --\u0026gt; B[http.proxy配置] B --\u0026gt; C{代理地址正确?} C --\u0026gt;|是| D[http.proxySupport: override] C --\u0026gt;|否| E[❌ 连接失败] D --\u0026gt; F{强制所有组件使用代理?} F --\u0026gt;|是| G[cursor.general.disableHttp2: true] F --\u0026gt;|否| H[❌ 部分功能绕过代理] G --\u0026gt; I{禁用HTTP/2?} I --\u0026gt;|是| J[✅ 所有请求走代理] I --\u0026gt;|否| K[❌ HTTP/2可能绕过代理] J --\u0026gt; L[成功连接到Cursor服务器] end style A fill:#e3f2fd style B fill:#fff3e0 style D fill:#fff3e0 style G fill:#fff3e0 style E fill:#ffebee style H fill:#ffebee style K fill:#ffebee style J fill:#e8f5e8 style L fill:#e8f5e8 \u0026quot;http.proxy\u0026quot;: \u0026quot;http://127.0.0.1:7890\u0026quot; 作用：告诉Cursor代理服务器的地址和端口 原理：Electron应用需要明确指定代理地址，不会自动读取系统代理设置 \u0026quot;http.proxySupport\u0026quot;: \u0026quot;override\u0026quot; 作用：强制所有网络组件使用代理 原理：防止某些内部模块绕过代理设置，确保AI功能也走代理 \u0026quot;cursor.general.disableHttp2\u0026quot;: true\u0026quot; 作用：禁用HTTP/2协议，强制使用HTTP/1.1 原理：HTTP/2在某些代理环境中会绕过代理设置，导致连接失败 为什么浏览器能翻墙，Cursor不能？ 这是因为软件网络架构的差异：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 graph TB subgraph \u0026#34;网络请求处理方式\u0026#34; A[用户发起网络请求] A --\u0026gt; B[浏览器] A --\u0026gt; C[Cursor应用] A --\u0026gt; D[原生应用] B --\u0026gt; E[自动读取系统代理] C --\u0026gt; F[需要手动配置代理] D --\u0026gt; G[直接使用系统网络栈] E --\u0026gt; H[✅ 自动走代理] F --\u0026gt; I[❌ 默认直连] G --\u0026gt; J[取决于系统设置] I --\u0026gt; K[需要配置settings.json] K --\u0026gt; L[✅ 强制走代理] end style B fill:#e1f5fe style C fill:#fff3e0 style D fill:#f3e5f5 style H fill:#ccffcc style I fill:#ffcccc style L fill:#ccffcc 浏览器：自动读取系统代理设置 Electron应用：需要应用内部配置代理参数 原生应用：通常直接使用系统网络栈 4. 故障排查指南 故障排查流程图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 flowchart TD A[配置完成但仍无法连接] --\u0026gt; B{基础检查} B --\u0026gt; C[代理软件是否运行?] B --\u0026gt; D[浏览器能否访问Google?] B --\u0026gt; E[端口号是否正确?] B --\u0026gt; F[是否完全重启Cursor?] C --\u0026gt;|否| G[启动代理软件] D --\u0026gt;|否| H[检查代理配置] E --\u0026gt;|否| I[修正端口号] F --\u0026gt;|否| J[重启Cursor] G --\u0026gt; K{高级检查} H --\u0026gt; K I --\u0026gt; K J --\u0026gt; K C --\u0026gt;|是| K D --\u0026gt;|是| K E --\u0026gt;|是| K F --\u0026gt;|是| K K --\u0026gt; L[三行配置是否完整?] K --\u0026gt; M[代理节点选择正确?] K --\u0026gt; N[代理日志有cursor.sh连接?] K --\u0026gt; O[企业防火墙干扰?] L --\u0026gt;|否| P[补充缺失配置] M --\u0026gt;|否| Q[切换到美国/日本节点] N --\u0026gt;|否| R[检查域名规则] O --\u0026gt;|是| S[联系IT部门] P --\u0026gt; T[测试连接] Q --\u0026gt; T R --\u0026gt; T S --\u0026gt; T T --\u0026gt;|成功| U[✅ 问题解决] T --\u0026gt;|失败| V[查看参考资料或求助社区] style A fill:#ffcccc style U fill:#ccffcc style V fill:#ffffcc 配置后仍无法连接的检查清单 基础检查：\n代理软件是否正常运行？ 浏览器是否能正常访问Google？ 代理端口号是否正确？ 是否完全重启了Cursor？ 高级检查：\n三行配置是否都正确添加？ 代理节点是否选择了支持地区？（避免香港节点） 代理软件日志是否显示cursor.sh连接？ 是否存在企业防火墙干扰？ 常见问题解决 问题1：时好时坏，连接不稳定\n原因：HTTP/2绕过代理 解决：确保添加了\u0026quot;cursor.general.disableHttp2\u0026quot;: true 问题2：代理配置无效\n原因：策略组名称错误 解决：检查Clash配置中的实际策略组名称 5. 其他代理工具配置 代理工具配置对比 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 graph TB subgraph \u0026#34;代理工具配置方法\u0026#34; A[Cursor域名列表] A --\u0026gt; B[Clash] A --\u0026gt; C[V2Ray] A --\u0026gt; D[Surge] A --\u0026gt; E[Shadowrocket] B --\u0026gt; F[rules 部分\u0026lt;br/\u0026gt;DOMAIN-SUFFIX规则] C --\u0026gt; G[routing.rules\u0026lt;br/\u0026gt;domain字段] D --\u0026gt; H[[Rule] 部分\u0026lt;br/\u0026gt;DOMAIN-SUFFIX规则] E --\u0026gt; I[配置-规则\u0026lt;br/\u0026gt;DOMAIN-SUFFIX规则] F --\u0026gt; J[策略组名称] G --\u0026gt; K[outboundTag: proxy] H --\u0026gt; L[Proxy] I --\u0026gt; M[PROXY] J --\u0026gt; N[✅ 流量转发到海外节点] K --\u0026gt; N L --\u0026gt; N M --\u0026gt; N end style A fill:#e3f2fd style B fill:#fff3e0 style C fill:#fff3e0 style D fill:#fff3e0 style E fill:#fff3e0 style N fill:#e8f5e8 V2Ray/V2RayN完整配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \u0026#34;routing\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;cursor.sh\u0026#34;, \u0026#34;api2.cursor.sh\u0026#34;, \u0026#34;api3.cursor.sh\u0026#34;, \u0026#34;api4.cursor.sh\u0026#34;, \u0026#34;repo42.cursor.sh\u0026#34;, \u0026#34;gcpp.cursor.sh\u0026#34;, \u0026#34;marketplace.cursorapi.com\u0026#34;, \u0026#34;cursor-cdn.com\u0026#34;, \u0026#34;download.todesktop.com\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;proxy\u0026#34; } ] } } Surge完整配置 1 2 3 4 5 6 7 8 9 10 11 [Rule] # Cursor AI 服务 DOMAIN-SUFFIX,cursor.sh,Proxy DOMAIN-SUFFIX,api2.cursor.sh,Proxy DOMAIN-SUFFIX,api3.cursor.sh,Proxy DOMAIN-SUFFIX,api4.cursor.sh,Proxy DOMAIN-SUFFIX,repo42.cursor.sh,Proxy DOMAIN-SUFFIX,gcpp.cursor.sh,Proxy DOMAIN-SUFFIX,marketplace.cursorapi.com,Proxy DOMAIN-SUFFIX,cursor-cdn.com,Proxy DOMAIN-SUFFIX,download.todesktop.com,Proxy 6. 常见问题FAQ Q: 为什么浏览器能翻墙，Cursor不能？ A: 不同软件有不同的网络行为。Cursor基于Electron框架，具有独立的网络栈，不会自动使用系统代理设置。\nQ: 配置后AI功能时好时坏怎么办？ A: 这通常是HTTP/2协议绕过代理导致的。确保添加了\u0026quot;cursor.general.disableHttp2\u0026quot;: true配置。\nQ: 如何快速定位settings.json文件？ A: 不同系统的文件位置：\nWindows: %APPDATA%\\Cursor\\User\\settings.json macOS: ~/Library/Application Support/Cursor/User/settings.json Linux: ~/.config/Cursor/User/settings.json Q: 企业网络环境如何配置？ A: 需要考虑企业防火墙政策，建议咨询IT部门获取代理服务器地址，或申请Cursor相关域名的白名单。\n7. 总结 核心解决思路 解决Cursor网络问题的本质是双重配置：\n🔧 外部路由配置：通过代理软件的域名规则，让Cursor流量走海外节点\n🔧 内部应用配置：通过三行JSON配置，强制Cursor应用使用代理\n关键成功要素 完整的域名列表：确保所有Cursor服务都走代理 正确的三行配置：缺一不可，特别是HTTP/2禁用 适当的代理节点：选择支持地区的稳定节点 记住：外部路由 + 内部配置，两步缺一不可\n8. 长期维护建议 应对Cursor更新变化 关注官方更新：定期查看Cursor官方更新日志 社区信息跟进：加入相关技术社群获取最新配置 日志监控：定期检查代理日志，发现新的连接失败域名 代理工具迁移指南 更换代理工具时：\n将域名规则列表迁移到新工具 更新Cursor中的代理端口号 重新测试所有功能 配置备份策略 保存有效的配置文件 记录工作的代理节点信息 定期验证配置是否仍然有效 9. 技术思考 解决这个问题的过程揭示了现代软件开发的一个现象：我们习惯了\u0026quot;浏览器能翻墙，所有软件都能翻墙\u0026quot;的简单假设，但现实是不同的软件有着截然不同的网络行为。\n这提醒我们：在软件开发和使用中，理解底层工作原理比记住表面操作步骤更重要。随着AI工具的普及，培养\u0026quot;在高级抽象失效时，快速深入到底层\u0026quot;的能力变得愈发重要。\n参考资料 This model provider doesn\u0026rsquo;t serve your region - Cursor Community Forum - 官方论坛地区限制讨论 Cursor http/2 requests don\u0026rsquo;t go through proxy setting - Bug Reports - HTTP/2绕过代理问题的官方反馈 How to set up a proxy for cursor - How To Guide - 官方代理配置指南 Cursor – Regions - Official Documentation - 官方地区支持文档 Unable to chat when disable http/2 - Community Forum - 禁用HTTP/2问题讨论 按照以上配置完成后，你就能重新享受Cursor AI编程助手的强大功能了！如有问题，欢迎查阅参考资料或寻求社区帮助。\n","permalink":"https://miss-you.github.io/posts/20250717-fix-cursor-unavailable-region/","summary":"\u003ch1 id=\"解决cursor-ai编程助手地区不可用错误完整的vpn代理配置指南\"\u003e解决Cursor AI编程助手\u0026quot;地区不可用\u0026quot;错误：完整的VPN代理配置指南\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e文章摘要\u003c/strong\u003e：Cursor AI编程助手显示\u0026quot;Model not available\u0026quot;或\u0026quot;地区不可用\u0026quot;？本文提供详细的代理配置解决方案，包括Clash、V2Ray等工具的具体设置步骤，让你重新使用AI编程功能。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"解决方案总览\"\u003e解决方案总览\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eflowchart TD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    A[Cursor连接问题] --\u0026gt; B{问题诊断}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    B --\u0026gt; C[IP地址被封锁]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    B --\u0026gt; D[应用直连问题]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    C --\u0026gt; E[配置代理路由规则]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    D --\u0026gt; F[修改Cursor设置]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    E --\u0026gt; G[添加域名规则到Clash/V2Ray]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    F --\u0026gt; H[配置settings.json]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    G --\u0026gt; I[验证配置]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    H --\u0026gt; I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    I --\u0026gt; J{测试连接}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    J --\u0026gt;|成功| K[✅ 正常使用AI功能]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    J --\u0026gt;|失败| L[故障排查]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    L --\u0026gt; M[检查代理软件状态]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    L --\u0026gt; N[验证端口号]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    L --\u0026gt; O[确认三行配置]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    M --\u0026gt; I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    N --\u0026gt; I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    O --\u0026gt; I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    style A fill:#ffcccc\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    style K fill:#ccffcc\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    style L fill:#ffffcc\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"1-问题背景\"\u003e1. 问题背景\u003c/h2\u003e\n\u003ch3 id=\"常见的cursor网络错误现象\"\u003e常见的Cursor网络错误现象\u003c/h3\u003e\n\u003cp\u003e如果你在使用Cursor AI编程助手时看到以下错误提示：\u003c/p\u003e","title":"解决Cursor AI编程助手「地区不可用」错误：完整的VPN代理配置指南"},{"content":"Hugo 文章目录管理教程 这篇文章演示了如何为每个Hugo文章创建独立的目录结构。\n优势 便于管理：每个文章有自己的目录 资源整理：图片、附件等资源放在同一目录 版本控制：便于跟踪文章的变更历史 SEO友好：目录名可以作为URL的一部分 目录结构 1 2 3 4 5 6 7 8 9 10 content/posts/ ├── 20250715-hugo-tutorial/ │ ├── index.md # 文章内容 │ ├── cover.jpg # 封面图片 │ └── images/ # 文章图片 │ └── diagram.png └── another-post/ ├── index.md └── assets/ └── file.pdf 使用方法 1. 创建文章目录 1 hugo new posts/文章名称/index.md 2. 或者手动创建 1 2 mkdir -p content/posts/20250715-my-article touch content/posts/20250715-my-article/index.md 这样每个文章都有自己的独立空间了！\n","permalink":"https://miss-you.github.io/posts/20250715-hugo-tutorial/","summary":"\u003ch1 id=\"hugo-文章目录管理教程\"\u003eHugo 文章目录管理教程\u003c/h1\u003e\n\u003cp\u003e这篇文章演示了如何为每个Hugo文章创建独立的目录结构。\u003c/p\u003e\n\u003ch2 id=\"优势\"\u003e优势\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e便于管理\u003c/strong\u003e：每个文章有自己的目录\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e资源整理\u003c/strong\u003e：图片、附件等资源放在同一目录\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e版本控制\u003c/strong\u003e：便于跟踪文章的变更历史\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSEO友好\u003c/strong\u003e：目录名可以作为URL的一部分\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"目录结构\"\u003e目录结构\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econtent/posts/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── 20250715-hugo-tutorial/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   ├── index.md          # 文章内容\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   ├── cover.jpg         # 封面图片\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   └── images/           # 文章图片\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│       └── diagram.png\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── another-post/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ├── index.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    └── assets/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        └── file.pdf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"使用方法\"\u003e使用方法\u003c/h2\u003e\n\u003ch3 id=\"1-创建文章目录\"\u003e1. 创建文章目录\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new posts/文章名称/index.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"2-或者手动创建\"\u003e2. 或者手动创建\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-2-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-2-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-2-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-2-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir -p content/posts/20250715-my-article\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etouch content/posts/20250715-my-article/index.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这样每个文章都有自己的独立空间了！\u003c/p\u003e","title":"Hugo 文章目录管理教程"},{"content":"0. 一个能“悄悄坑你”的真实示例：SError 的故事 先看你提到的这段代码，表面上看非常正常，甚至很多人第一眼不会觉得哪里有问题：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import ( \u0026#34;log\u0026#34; \u0026#34;sync\u0026#34; ) type SError struct { cause error // Wrapped error which is the root cause. text string // Error text, which is created by New* functions. i18nText string // 本地错误文字，用于客户端显式中文 ignored bool // 能否忽略该错误 info map[string]string infoMutex sync.RWMutex } func (e *SError) Error() string { return e.text } // demoRetSerr 返回 (int32, *SError)。看上去，如果不想返回任何错误，就直接返回 (0, nil) func demoRetSerr() (int32, *SError) { return 0, nil } func main() { var err error // 这里把第二个返回值的 *SError 赋给了 interface{} 类型的 err _, err = demoRetSerr() if err != nil { log.Printf(\u0026#34;err != nil. err: %v\u0026#34;, err) } } 0.1 乍看之下哪里会有问题？ 我们 demoRetSerr 函数直接返回 (0, nil)，而函数签名的第二个参数类型是 *SError。 回到 main 函数中，err 是一个 error 接口，承接了那个 nil 指针。 如果“typed nil” 现象出现，那么 err != nil 这个判断就会莫名其妙地通过，从而在日志里打印出“err != nil. err: \u0026lt;nil\u0026gt;”。有时更可怕的是，实际逻辑会被误判，可能执行本不该执行的错误处理分支。 在某些 Go 版本或特定编译器优化下，你可能发现控制台就输出 err != nil. err: \u0026lt;nil\u0026gt;，让人“一头雾水”。这就是一个十分典型、却很隐蔽的 typed nil 场景。即使你写 return nil，对编译器来说：\n这是一个 *SError 类型（type = *main.SError）， 其底层 data 指针是 nil (data = nil)， 放到接口变量后，形成了 (type = *main.SError, data = nil)。 Go 只会认“(type=nil, data=nil)”时才是 “真正的 nil”。 1. 用费曼学习法之“最简原理”再阐述 在 Go 里，接口值可以理解成 (type, data) 两部分：\ntype：存放当前接口值实际对应的具体类型信息。 data：指向这个数据在内存中的地址。 只有当 type=nil 并且 data=nil 时，接口值才是“真正的 nil”。如果 type 是 *SError，即使 data=nil，接口值也不等于 nil。\n因此，像上面示例中的 err，看似已经是“nil 指针”了，但赋值进接口后变成 “(type=*SError, data=nil)”，在 Go 的判定里，这不等于 nil。\n2. 为什么它这么“容易挖坑”？ 2.1 初学者会想当然 很多人会想：“我都直接 return nil 了，这还不是真正的 nil？” 但在 Go 里，nil 也需要区分“无类型的 nil”和“有具体类型但指针为 nil”。\n2.2 出现在最常用的 error 接口上 Go 里最常见的接口就是 error。稍不留神，就写出 “typed nil” 的自定义错误类型，然后让别人在 if err == nil 里踩坑。\n2.3 测试用例可能漏测 单测中往往只关心有错误还是没错误，可能不会特别注意日志打印里出现的 \u0026lt;nil\u0026gt;。直到线上某些逻辑走岔了，再一查日志才发现 err != nil 却打印 \u0026lt;nil\u0026gt;。\n3. 更丰富的例子：经典“typed nil” 场景 除了上面你给的 SError 示例，我们再看看另一个常被引用的代码来说明“为什么它不等于 nil”：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 type MyError struct { msg string } func (e *MyError) Error() string { return e.msg } func maybeError(returnNil bool) error { if returnNil { // 这里直接返回 nil -\u0026gt; (type=nil, data=nil) return nil } // 这里返回一个 nil 的 *MyError -\u0026gt; (type=*MyError, data=nil) var e *MyError = nil return e } func main() { err1 := maybeError(true) err2 := maybeError(false) fmt.Println(\u0026#34;err1 == nil?\u0026#34;, err1 == nil) // 结果是 true fmt.Println(\u0026#34;err2 == nil?\u0026#34;, err2 == nil) // 结果是 false } 当 returnNil = true，返回真正的 (nil, nil)； 当 returnNil = false，则是 “(type=*MyError, data=nil)”，从而 err2 != nil。 很多人看了就会疑惑：“明明里面是 nil，为什么 if err2 == nil 不通过？” 这正是和 SError 场景如出一辙的坑。\n4. 工作中容易忽视的写法 4.1 返回“空指针”当作“空接口值” 1 2 3 4 5 func GetConfig() interface{} { var config *Config = nil // 误以为返回了 nil 接口值 return config } 结果调用方 if GetConfig() == nil {...} 永远判断不出来。\n4.2 自定义 error，常见 1 2 3 4 5 6 7 8 9 10 type SomeErr struct { Message string } func (e *SomeErr) Error() string { return e.Message } func doSomething() error { var e *SomeErr = nil return e // typed nil } 后面 if err == nil 期待“没错误”，其实 err != nil。\n4.3 与 sync/atomic 或其他魔法操作混用 有些高级用法中，通过 atomic.Value、或者 channel 传递接口，都可能把某个 nil 指针塞进来；接口变成 typed nil 而不自知。\n5. 现实中的 2 个翻车故事 故事 1：日志狂刷“err != nil. err: \u0026lt;nil\u0026gt;” 团队里写了一个 RPC 返回 error 的接口，如果没真正错误，就 return (*CustomErr)(nil). 结果在调用方 if err != nil 逻辑里，一直以为出现了错误，于是疯狂打日志告警。 线上监控炸了，运维们满头雾水，最终才发现是 typed nil 导致 err != nil == true 的假象。 故事 2：“不存在”数据触发了后续流程 在一个电商项目里，“查询不到订单” 时返回了 (type=*Order, data=nil)。 调用方写 if order == nil { ... } else { ... }，结果误走了 else 分支，竟然开始发货流程！ 导致上线后出现了“幽灵订单”，财务对账时一片混乱；大家排查数据库、仓储、消息队列都没发现问题，最后是 typed nil 搞的鬼。 6. 如何避免这类陷阱？ 返回“真正的 nil”\n当表示“啥也没有”时，就要 return nil，并且这个 nil 不要挂任何具体类型。\n比如示例里的 demoRetSerr，若想表示无错误，最好就返回 (0, nil)，并且别让调用方把它赋到 var err error 后出现歧义。 若要彻底避免，还可以把函数直接签名改为 (int32, error) 而不是 (int32, *SError)，这样保证返回值与 error 接口的类型一致。 调试或日志打印\n当怀疑 typed nil 时，用 fmt.Printf(\u0026quot;%T, %#v\\n\u0026quot;, x, x) 看看接口内到底存了什么(会显示类似 *main.SError(nil))。或用反射 reflect.ValueOf(x) 分析底层类型和指针。\n类型断言/反射\n如果确实要判断底层是否 nil 指针，可以：\n1 2 3 if v, ok := err.(*SError); ok \u0026amp;\u0026amp; v == nil { // 这里才是底层指针为 nil } 不过大部分场景下，最好通过直接返回 nil 来避免把问题带到调用方。\n7. 从 SDE 视角的 3 点建议 API 设计要“真空”\n当函数需要表示“无数据”或“无错误”，务必返回真·nil ((type=nil, data=nil))。若使用自定义指针类型，尽量在文档里明确说明可能是 typed nil，需要用类型断言来判别。\n单元测试 \u0026amp; 日志不可省\n对关键逻辑要做单元测试，包含“空值”分支；出现“打印 \u0026lt;nil\u0026gt; 却 err != nil”时，应直接排查 typed nil。也建议在测试中做 %T, %#v 的检查。\n约定统一的团队风格\n不要随意返回 (*MyType)(nil) 给接口；要么全部直接返回 nil，要么在文档或注释里明确提示。 在 error 场景中尤其要注意，能返回 nil 就别给调用方 typed nil，不要让调用方踩坑。 8. 最后小结 核心原理：Go 接口底层是 (type, data)，只有 (nil, nil) 才是真正的 nil。 “看似”nil，不是真的 nil：当 type 不为 nil，哪怕 data=nil，也会被认作非 nil。 真实教训：许多生产环境的翻车场景都和 typed nil 有关，比如错误处理或数据查询的逻辑分支走歪了。 实用做法：最好返回真·nil，或让调用方知道有 typed nil 的可能并做断言或日志排查。 ","permalink":"https://miss-you.github.io/posts/20250515-go-typed-nil/","summary":"\u003ch2 id=\"0-一个能悄悄坑你的真实示例serror-的故事\"\u003e0. 一个能“悄悄坑你”的真实示例：\u003ccode\u003eSError\u003c/code\u003e 的故事\u003c/h2\u003e\n\u003cp\u003e先看你提到的这段代码，表面上看非常正常，甚至很多人第一眼不会觉得哪里有问题：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-30\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-30\"\u003e30\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-31\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-31\"\u003e31\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-32\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-32\"\u003e32\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-33\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-33\"\u003e33\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-34\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-34\"\u003e34\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eSError\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ecause\u003c/span\u003e     \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Wrapped error which is the root cause.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003etext\u003c/span\u003e      \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Error text, which is created by New* functions.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ei18nText\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 本地错误文字，用于客户端显式中文\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eignored\u003c/span\u003e   \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 能否忽略该错误\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003einfo\u003c/span\u003e      \u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003einfoMutex\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRWMutex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eSError\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// demoRetSerr 返回 (int32, *SError)。看上去，如果不想返回任何错误，就直接返回 (0, nil)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edemoRetSerr\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eSError\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 这里把第二个返回值的 *SError 赋给了 interface{} 类型的 err\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003edemoRetSerr\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;err != nil. err: %v\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"01-乍看之下哪里会有问题\"\u003e0.1 乍看之下哪里会有问题？\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e我们 \u003ccode\u003edemoRetSerr\u003c/code\u003e 函数直接返回 \u003ccode\u003e(0, nil)\u003c/code\u003e，而函数签名的第二个参数类型是 \u003ccode\u003e*SError\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e回到 \u003ccode\u003emain\u003c/code\u003e 函数中，\u003ccode\u003eerr\u003c/code\u003e 是一个 \u003ccode\u003eerror\u003c/code\u003e 接口，承接了那个 \u003ccode\u003enil\u003c/code\u003e 指针。\u003c/li\u003e\n\u003cli\u003e如果“typed nil” 现象出现，那么 \u003ccode\u003eerr != nil\u003c/code\u003e 这个判断就会莫名其妙地通过，从而在日志里打印出“err != nil. err: \u0026lt;nil\u0026gt;”。有时更可怕的是，\u003cstrong\u003e实际逻辑会被误判\u003c/strong\u003e，可能执行本不该执行的错误处理分支。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在某些 Go 版本或特定编译器优化下，你可能发现控制台就输出 \u003ccode\u003eerr != nil. err: \u0026lt;nil\u0026gt;\u003c/code\u003e，让人“一头雾水”。这就是一个十分典型、却很隐蔽的 \u003cstrong\u003etyped nil\u003c/strong\u003e 场景。即使你写 \u003ccode\u003ereturn nil\u003c/code\u003e，对编译器来说：\u003c/p\u003e","title":"当 nil 不等于 nil？深度剖析 Go 的 typed nil 大坑"},{"content":" 截至 2024 年 2 月 10 日，该教程仍然有效。我已根据此教程重新操作并成功充值。请注意，购买苹果充值卡时应确保从苹果官方网站购买。\nChatGPT Plus 的优势 GPT-4 的性能非常强大，这是众所周知的事实。 Plus 会员可以使用 ChatGPT 的在线和插件功能，这些功能将极大地增强你的创造力，并为你的个人学习和工作效率提供强大的支持工具。 如何开通 ChatGPT Plus？ 关键步骤 ChatGPT 已在美国 iOS App Store 上架。你只需要使用 iOS 设备续费会员即可。\n目标用户 本教程适用于拥有 iOS 设备（如 iPhone 或 iPad）的用户。\n所需工具 a. iPhone 或 iPad 设备 b. 美国地区的科学上网（可自建或购买） c. 支付宝账户 d. 已注册成功的 chatGPT 账号\n开通步骤 1. 创建美国区 iOS 账号 如果你已拥有美国区账号，或已熟悉注册流程，可跳过此步骤。\n详细的注册流程如下：\n访问网站：在浏览器中访问 https://appleid.apple.com/account 开始创建你的 Apple ID。\n设置国家/地区：在\u0026quot;Country/Region\u0026quot;下拉菜单中选择\u0026quot;United States\u0026quot;。\n输入邮箱和设置密码：在指定字段输入可接收邮件的邮箱地址（作为你的 Apple ID），设定密码并在确认密码字段再次输入。\n输入并验证手机号码：选择\u0026quot;China Mainland\u0026quot;作为电话区域，输入手机号并继续。你将收到验证码，输入以验证。 确认你的 Apple ID：检查电子邮件，点击 Apple 发送的验证邮件中的链接确认你的 Apple ID。\n登录到 App Store（重要）：使用新创建的 Apple ID 登录 App Store。首次登录时系统会要求设置支付信息，选择\u0026quot;None\u0026quot;后可以下载免费应用。 填写地址和支付信息（重要）：在支付方式中选择\u0026quot;None\u0026quot;，使用美国地址生成器（例如 https://www.meiguodizhi.com/）生成地址。可以选择美国的五个免税州之一，如俄勒冈。\n常见问题： 无法找到支付信息中的“None”选项。 请确保科学上网设置为美国，并重新登录尝试。 是否有视频教程参考？ YouTube 上有多个“如何注册美国区 iOS 账号”的教程视频可供参考。 2. 创建 ChatGPT 账户 如果你已有账户，可以跳过此步骤。\n关键步骤： 创建账户时需要使用科学上网。建议使用 gmail 邮箱进行注册，因为使用中国大陆邮箱（如 QQ、163、Foxmail 等）可能会导致注册失败。 建议使用在线接码平台接收短信验证码，例如 sms-activate.org。 详细注册流程： 准备一个 gmail 账号。有关具体注册步骤，请访问 https://gmail.com/。\n启用科学上网（推荐设置为新加坡或美国，本教程以美国为例），并打开 ChatGPT 应用程序。\n选择使用邮箱进行注册，并输入你的 gmail 地址。避免使用中国大陆的邮箱以防注册失败或账户被封禁。 设置密码后，进入邮箱验证步骤。\n检查你的邮箱，处理验证邮件。\n在 ChatGPT 应用程序中点击\u0026quot;I\u0026rsquo;ve verified my email\u0026quot;按钮，继续注册流程。 关键步骤：使用在线接码平台接收手机验证码。访问 sms-activate.org，如页面默认为俄语，可使用 Chrome 浏览器的翻译功能将其翻译为中文。 在搜索栏输入\u0026quot;openai\u0026quot;，选择美国（建议选择与科学上网设置相同的国家/地区以减少风险），点击购物车图标购买服务。\n完成购买后，你将获得一个手机号码。将此号码输入到 ChatGPT 的短信验证页面，等待短信到达。注意：显示的 82.50 美元实际上是 82.5 卢布，约合人民币 6-10 元。 短信验证码可能偶尔会失败。如遇失败，更换科学上网节点，使用新邮箱，并在另一天重试。\n视频教程 YouTube 视频教程\n3. 购买 Apple Store 充值卡 购买 Apple Store 充值卡的渠道有多种，包括 Apple 官网、支付宝和淘宝等，具体选择取决于你的个人需求和资源。\n选择购买渠道：直接通过 Apple 官网购买是最直接的方法，但需使用 VISA 外币卡支付。支付宝购买虽方便，但汇率较高（约 7.11:1）。淘宝则可能价格更高。以下我们以支付宝购买为例。 a. 通过官网购买苹果充值卡 访问美国 Apple 礼品卡购买页面：访问 https://www.apple.com/us/shop/gift-cards，点击 \u0026ldquo;Buy\u0026rdquo; 按钮。 在购买界面，选择 \u0026ldquo;Email\u0026rdquo; 类型，选择你喜欢的礼品卡封面，自定义金额，建议填入 20 美元（ChatGPT Plus 的无税价格为 19.99 美元）。 content/posts/20240423-openai-register/20240423-164227-12-a83d8c2d384c01fd92ce527e48ce842a.jpg\n填写发件人和收件人信息，可填相同信息，邮箱地址用你自己的邮箱。完成后点击加入购物车。\n点击购买，输入支付信息。此例中使用了招商银行的 VISA 信用卡支付。 若未收到礼品卡信息，可登录并访问订单详情页面，点击 \u0026ldquo;resend\u0026rdquo; 重新发送礼品卡信息。 b. 通过支付宝购买苹果充值卡（不推荐） 不推荐原因：由于使用人数过多，此方式可能触发风控，部分用户报告封号情况。此方法通过第三方零售商购买。\n选择地区：在支付宝中选择“国际/港澳台”区域，选择“北美洲”-“美国”，然后选择一个州，如奥兰多。 搜索并购买充值卡：搜索“出境”，进入“出境”小程序，选择“折扣礼卡”区，滑动至页面底部点击“更多大牌折扣礼卡”，找到并点击 Apple Store 充值卡购买。 content/posts/20240423-openai-register/20240423-164227-16-36401a42e0c51295dae72b156d80e371.jpg\n完成购买：通过 Pockyt Shop 代理商完成购买，可能需注册 Pockyt 账户。购买后，充值卡信息会发送到你的 Pockyt 注册邮箱。 充值至你的 Apple ID：在 App Store，点击个人头像，选择“兑换礼品卡或代码”，输入购买的礼品卡代码，将金额充值至你的 Apple ID，可用于购买 ChatGPT Plus 服务。 常见问题： 是否可以使用其他支付方式？\n美国版 App Store 仅接受美国银行发行的银行卡。若使用 PayPal，需要是美国版且绑定美国银行卡。中国大陆的 PayPal 账号由于政策限制无法绑定支付。 有没有视频教程？如何通过官网购买 Apple 充值卡？\n是的，YouTube 上有许多“购买美国 Apple 礼品卡”的教程视频。 如果支付失败该怎么办？\n我从多位朋友了解到以下情况： a. 过几天重试，支付成功（说明风控有过期时间）。 b. 联系客服后，充值成功。 c. 联系客服后，账号被封禁。 因此，建议避免联系客服解决充值失败问题，尝试一次性只购买 20 美元，之后再重试支付或重新注册 ChatGPT 账号。 4. 开通 ChatGPT Plus 确保 iOS 系统更新至最新版本：\n确保你的设备操作系统更新至 iOS 16.x，访问设置中进行系统更新。 下载 ChatGPT App：\n在 App Store 搜索并下载 ChatGPT App。 启用科学上网：\n由于地理限制，启用科学上网并选择新加坡、日本或美国作为虚拟位置。 登录 ChatGPT App：\n使用你的账户信息登录。 购买 ChatGPT Plus：\n登录后，点击屏幕右上角的\u0026quot;\u0026hellip;\u0026ldquo;按钮进入设置页面。在此你可以看到购买选项，点击即可开通 ChatGPT Plus。购买后会默认开启自动续订服务，确保账号内余额充足即可继续使用。 其他问题： 支付失败 确认是否使用美国服务账号。 检查余额是否足够。 确保充值卡是通过正规渠道购买。 如果以上都没问题，联系苹果客服解决。 常见问题解答 科学上网 说明：我与任何科学上网厂商没有任何利益关系，此建议基于广泛的咨询需求。我使用的科学上网是 Kuromis，手机上是 shadowrocket，Mac 上是 clashX。 当前支持哪些国家？ 官方支持的国家包括日本、新加坡、加拿大、美国和英国等，不支持中国大陆和香港。 GPT4 插件系统状态如何？ 我目前主要使用 pdf 和 browsing 插件。据 Sam 所说，除了 Browsing，插件系统还未找到良好的市场契合度。 ","permalink":"https://miss-you.github.io/posts/20240423-openai-register/","summary":"\u003cblockquote\u003e\n\u003cp\u003e截至 2024 年 2 月 10 日，该教程仍然有效。我已根据此教程重新操作并成功充值。请注意，购买苹果充值卡时应确保从苹果官方网站购买。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/picgo/20240423-164227-1-28fd8bc46d10a26c0e639aeb5ec9862f.jpg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"chatgpt-plus-的优势\"\u003eChatGPT Plus 的优势\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eGPT-4 的性能非常强大，这是众所周知的事实。\u003c/li\u003e\n\u003cli\u003ePlus 会员可以使用 ChatGPT 的在线和插件功能，这些功能将极大地增强你的创造力，并为你的个人学习和工作效率提供强大的支持工具。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/picgo/20240423-164227-2-dfc46547e57fa80736a6925189a7e577.jpg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"如何开通-chatgpt-plus\"\u003e如何开通 ChatGPT Plus？\u003c/h2\u003e\n\u003ch3 id=\"关键步骤\"\u003e关键步骤\u003c/h3\u003e\n\u003cp\u003eChatGPT 已在美国 iOS App Store 上架。你只需要使用 iOS 设备续费会员即可。\u003c/p\u003e\n\u003ch3 id=\"目标用户\"\u003e目标用户\u003c/h3\u003e\n\u003cp\u003e本教程适用于拥有 iOS 设备（如 iPhone 或 iPad）的用户。\u003c/p\u003e\n\u003ch3 id=\"所需工具\"\u003e所需工具\u003c/h3\u003e\n\u003cp\u003ea. iPhone 或 iPad 设备\nb. 美国地区的科学上网（可自建或购买）\nc. 支付宝账户\nd. 已注册成功的 chatGPT 账号\u003c/p\u003e\n\u003ch2 id=\"开通步骤\"\u003e开通步骤\u003c/h2\u003e\n\u003ch3 id=\"1-创建美国区-ios-账号\"\u003e1. 创建美国区 iOS 账号\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果你已拥有美国区账号，或已熟悉注册流程，可跳过此步骤。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e详细的注册流程如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e访问网站\u003c/strong\u003e：在浏览器中访问 \u003ca href=\"https://appleid.apple.com/account\"\u003ehttps://appleid.apple.com/account\u003c/a\u003e 开始创建你的 Apple ID。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e设置国家/地区\u003c/strong\u003e：在\u0026quot;Country/Region\u0026quot;下拉菜单中选择\u0026quot;United States\u0026quot;。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e输入邮箱和设置密码\u003c/strong\u003e：在指定字段输入可接收邮件的邮箱地址（作为你的 Apple ID），设定密码并在确认密码字段再次输入。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e输入并验证手机号码\u003c/strong\u003e：选择\u0026quot;China Mainland\u0026quot;作为电话区域，输入手机号并继续。你将收到验证码，输入以验证。\n\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Miss-you/img/master/picgo/20240423-164227-3-d9aedace28daa3b3ca0d65e142f9baa7.jpg\"\u003e\u003c/p\u003e","title":"畅享 ChatGPT Plus：无需额外支付手段，突破 OpenAI 支付风控"},{"content":"作者：Sam Altman\n原文：https://playbook.samaltman.com/\nSam Altman，OpenAI CEO，经常会在博客中分享他的创业经验与智慧。Sam 曾分享过一篇他的经典文章《创业生存手册：如何有效地打造产品、组建团队并筹集资金》，他提供了一系列富有洞见的指导，帮助我们理解创业的艰难和挑战，并找到成功的途径。无论你是创业新手，还是经验丰富的科技专家，都能在这篇文章中找到有价值的收获。#SamAltman #创业 #科技\n个人认为，大公司内的小团队或创新团队与创业公司在诸多方面有着密切的相似性。两者都面临着从零开始，将一个概念或想法转化为可行产品或服务的挑战。他们都需要快速地适应和学习，寻找产品与市场的契合点，同时也要不断地迭代产品，以满足不断变化的市场需求。在这两种环境中，都需要强大的领导力和管理才能以及优秀的团队成员。而且，他们都需要面对并管理风险，同时在有限的资源下取得最大的产出。因此，无论你是处于创业环境还是大公司的创新团队，本文都会为你提供极大的价值。Sam Altman的经验和洞察将帮助你更好地理解如何建立并领导一支成功的团队，如何募集资金，如何处理竞争，以及如何建立持久并能够盈利的公司。\n我们在指导初创公司方面投入了大量的时间和精力。尽管一对一的咨询服务始终是不可或缺的，但我们认为，如果能将这些建议中最具普适性的部分提炼出来，整合成一种可以提供给 Y Combinator 以及 YC Fellowship 公司的行动指南，那么我们可能能更好地扩展 Y Combinator 的影响力。\n于是，我们决定将这个行动指南分享给所有人。\n这是为初涉创业领域的人士准备的。对于那些阅读过大量 YC 合作伙伴所写的文章的人来说，这里的大部分内容可能并不陌生——我们的目标是将这些内容汇集到一处。\n关于如何扩大创业公司的规模，我们可能会在后面的部分介绍——本指南主要覆盖了如何创立一家公司的相关内容。\n作为一家初创公司，你的目标应该是创造出用户热爱的产品。如果你做到了这一点，那么你需要找出如何吸引更多的用户。但是，首要的一步至关重要——想想今天那些真正成功的公司。他们都是从一个让早期用户如此热爱以至于愿意向他人推荐的产品开始的。如果你没有做到这一点，你将会失败。如果你自欺欺人，认为你的用户热爱你的产品，但实际上并非如此，你仍然会失败。\n初创公司的墓地上满是那些认为可以跳过这一步的人。\n与其创造出大批用户喜欢的产品，不如首先创造出小部分用户热爱的产品。尽管总的积极感受程度是相同的，但是获得更多用户要比从喜欢提升到热爱要容易得多。\n关于选择创业，我有一个警告：这是一件很糟糕的事情！我们从 YC 创始人那里得到的最一致的反馈就是，创业比他们想象的要困难，因为他们对初创公司所需的工作量和强度没有一个清晰的认识。加入一家正处于快速发展轨道的早期初创公司通常会是一个更好的经济上的选择。\n另一方面，创业其实对你的职业并不构成很大的风险——如果你在技术方面真的出类拔萃，即使你失败了，也会有工作机会。大多数人在评估风险方面做得非常糟糕。我个人认为，更具风险的选择是，你有一个你非常热衷的想法或项目，但却选择了一个安全、轻松但又无法满足你的工作。\n要创办一家成功的初创公司，你需要：一个伟大的想法（包括一个伟大的市场）、一个优秀的团队、一个出色的产品，以及卓越的执行力。\n一、一个伟大的想法 我们会首先询问 YC 公司的创始人们，他们正在开发什么，以及为何要开发这个产品。\n我们希望得到清晰、简洁的回答。这既是对你作为创始人的评估，也是对创意本身的考察。作为创始人，清晰的思维和沟通能力非常重要——你在招聘、融资、销售等方面都会需要这种能力。一般来说，想法需要清晰才能传播，而复杂的想法几乎总是混乱思维或是人为制造问题的标志。如果你的想法在别人第一次听到时并不能激发起他们的兴趣，那就不妙了。\n我们还会问，谁对这款产品有着迫切的需求。\n最好的情况是，你自己就是目标用户。次优的情况是，你对目标用户有着深入的理解。\n如果公司已经有了用户，我们会问有多少用户，以及这个数字的增长速度如何。我们会尝试找出它的增长速度为何没有更快，尤其是要找出用户是否真的喜欢这个产品。通常，这意味着他们会在没有公司提示的情况下，向他们的朋友推荐这个产品。我们还会问这个公司是否已经产生了收入，如果没有，原因是什么。\n如果公司还没有用户，我们会尝试找出最小化的首次构建项目，以便对假设进行验证——也就是说，如果我们从完美的体验回溯，我们会尝试找出从何处着手的核心点。\n检验一个想法的方法是发布它看看会发生什么，或者尝试销售它（例如，在你编写一行代码之前，尝试获得购买意向书）。前者更适用于消费者想法（用户可能会告诉你他们会使用它，但实际上它可能无法脱颖而出），后者更适用于企业想法（如果一个公司告诉你他们会购买某件东西，那么就去制造它）。具体来说，如果你是一家企业公司，我们会首先问你是否有来自客户的购买意向书，表明他们愿意购买你正在开发的产品。对于大多数生物技术和硬科技公司来说，检验一个想法的方式是先和潜在客户交谈，然后找出你可以首先构建的技术的最小子集（MVP）。\n让你的想法根据用户反馈进行演进非常重要。理解你的用户非常关键——你需要这个能力来评估一个想法，制造一个出色的产品，以及建立一个伟大的公司。\n如前所述，初创公司的路非常艰难。他们需要很长的时间和持续的高强度努力。创始人和员工需要有共同的使命感来支撑他们。因此，我们会询问创始人为什么想创办这家特定的公司。\n我们也会询问这家公司如何能够成为一家垄断企业。这有很多不同的词汇来表述，但我们采用的是彼得·蒂尔的说法。显然，我们不希望你的公司在面对竞争对手时采取不道德的行为。相反，我们正在寻找那些随着规模的扩大而变得更强大，且难以复制的企业。\n最后，我们会询问市场情况。我们会询问它现在的规模，增长速度，以及为什么它在十年后会变得非常大。我们试图理解为什么市场会快速增长，以及为什么这是一个初创公司应该去追逐的好市场。我们喜欢那些刚刚开始出现的大部分人尚未意识到的重大技术变革——大公司在应对这些转变方面做得很糟糕。而有些反直觉的是，最佳策略是在小市场中占据大部分份额。\n关于想法，我还有一些其他的想法：\n我们更喜欢全新的东西，而不是衍生的东西。大多数真正的大公司都是从一些根本性的新事物开始的（新的一个可以接受的定义是比原来好 10 倍）。如果同时有十家其他公司以同样的计划开始，而且听起来非常像已经存在的东西，我们会有所怀疑。\n这其中一个重要的反直觉原因是，做一些新的和困难的事情比做一些衍生的和容易的事情更简单。如果你是前者，人们会想要帮助你，加入你；如果是后者，他们就不会这么做。\n最好的想法听起来可能不好，但实际上是好的。所以你不需要对你的想法过于保密——如果它真的是一个好想法，那么它可能不会听起来像是值得被窃取的。即使它听起来像是值得被窃取的，拥有好想法的人至少比愿意付出将伟大的想法转化为伟大的公司所需要的工作的人多一千倍。而且，如果你告诉别人你在做什么，他们可能会帮助你。\n说到告诉别人你的想法——虽然这个想法第一次听到时真的能激发一些人的兴趣是很重要的，但几乎每个人都会告诉你你的想法很糟糕。也许他们是对的。也许他们不擅长评估创业公司，或者他们只是嫉妒。无论原因是什么，这种情况会经常发生，它会让你受伤，即使你认为你不会被它影响，你仍然会被影响。你越早建立自我信念，不被恶意评论者过多拖累，你就会越好。无论你多么成功，恶意评论者永远不会消失。\n如果你没有创业想法，但是想要创业，怎么办呢？也许你不应该创业。如果首先想法出现，而创业公司是将这个想法推向世界的方式，那会更好。\n我们曾经尝试过一个实验，为一批有前途但没有创业想法的创始团队提供资金，希望他们在我们资助他们后能找到一个有前景的创业想法。\n所有的尝试都失败了。我认为问题的一部分是，好的创始人往往有很多好的想法（通常是太多）。但更大的问题是，一旦你有了一个创业公司，你就必须赶快想出一个创业想法，而且因为它已经是一个正式的公司，所以想法不能太疯狂。你最终会得到听起来可行但是衍生的创业想法。这就是转型的危险。\n因此，最好不要过于积极地强迫自己想出创业想法。相反，去了解许多不同的事物。实践发现问题，看似低效的事物，和主要的技术转变。从事你感兴趣的项目[1] 。尽可能地接触智慧、有趣的人。在某个时候，创业想法会自然出现的。\n二、一个优秀的团队 平庸的团队无法打造伟大的公司。我们最关注的事情之一就是创始人的实力。当我过去从事后期投资时，我同样非常关注创始人所雇佣的员工的实力。\n什么样的人才是优秀的创始人？最重要的特征包括无坚不摧的毅力、决心、坚韧不拔和足智多谋。聪明才智和激情也排在非常重要的位置。这些都比经验，当然也比“精通语言 X 和框架 Y”更重要。\n我们注意到，最成功的创始人都是那种和他们一起工作感觉压力很小的人，因为你觉得“不管是什么事，他/她都能完成。”有时候，你可以凭借纯粹的意志力成功。\n优秀的创始人具有一些看似矛盾的特征。一个重要的例子是刚柔并济。你要对公司的核心和其使命有强烈的信念，但对于几乎所有其他事情，你还需要保持非常灵活，乐于学习新事物。\n最优秀的创始人反应异常迅速。这是决策力、专注力、强度和执行能力的指标。\n难以与之交谈的创始人几乎总是不理想的。对于创始人来说，沟通是一项非常重要的技能——实际上，我认为这是创始人最重要且少有人讨论的技能。\n科技创业公司需要至少有一位创始人能够构建公司的产品或服务，并且至少有一位创始人擅长（或者能够变得擅长）销售和与用户交流。这可以是同一个人。\n在选择联合创始人时，你应该考虑这些标准——这是你将要做出的最重要的决定之一，而这个决定通常都是相当随机的。你需要的是一个你很了解的人，而不是你在创始人交流活动上刚认识的人。你可以通过更多的信息来评估任何可能与你共事的人，而且你肯定不想在这一点上犯错误。此外，在某个时刻，创业公司的预期价值可能会跌破 X 轴。如果你和联合创始人之间有预先存在的关系，你们都不会想让对方失望，你们会继续前行。创始人分道扬镳是早期创业公司死亡的主要原因之一，而我们看到在创始人特意为创立公司而相识的情况下，这种情况非常非常频繁。\n最好的情况，毫无疑问，是有一个好的联合创始人。其次是单独创业。最糟糕的情况，毫无疑问，是有一个糟糕的联合创始人。如果事情没有按照预期进行，你应该立即分道扬镳。\n关于股权的快速说明：关于股权分配的谈话随着时间的推移并不会变得更容易——最好是在早期就敲定。大部分情况下平等的股权分配最好，在两个创始人的情况下，最好是有一个人多拥有一份股份，以防在创始人有分歧时出现僵局。\n三、一个出色的产品 成功的秘诀就是：拥有一个出色的产品。这是所有伟大公司唯一的共同点。\n如果你没有打造出用户喜爱的产品，你最终会失败。然而，创始人总是在寻找其他的技巧。创业是你的技巧（比如增长技巧）不再奏效的时刻。\n一个出色的产品是长期增长的唯一途径。最终，你的公司会变得如此庞大，所有的增长黑客技巧都不再起作用，你必须通过人们想要使用你的产品来实现增长。这是对超级成功的公司最重要的理解。没有其他的途径。想想所有真正成功的科技公司——它们都做到了这一点。\n你需要在你的公司里建立一个“产品改进引擎”。你应该与你的用户交谈，观察他们如何使用你的产品，找出哪些部分不够好，然后改进你的产品。然后再做一次。这个循环应该是公司的首要关注点，并且应该驱动其他所有的事情。如果你每周提高你的产品 5%，效果会真正产生复利。\n这个循环的重复速度越快，公司通常发展得越好。在 YC 期间，我们告诉创始人他们应该专注于产品开发和与用户交谈，除了吃饭、睡觉、锻炼和陪伴亲人之外，其他事情不需要关注。\n要正确地进行这个循环，你必须与你的用户非常接近。真正地观察他们使用你的产品。如果可以的话，坐在他们的办公室里。既要重视他们告诉你的内容，也要重视他们实际的行动。在可能的情况下，创始人和用户之间不应该有任何隔阂，这意味着创始人需要进行销售、客户支持等工作。\n尽可能地理解你的用户。真正了解他们需要什么，在哪里找到他们，以及什么让他们行动起来。\n“做那些不具备扩展性的事情”已经成为创业公司的口头禅。你通常需要一个一个地吸引初期的用户（Ben Silbermann 曾经在帕洛阿尔托的咖啡馆里接近陌生人，邀请他们试用 Pinterest），然后构建他们所要求的东西。许多创始人讨厌这一部分，只想在媒体上宣布他们的产品。但那几乎从来都不管用。手动招募用户，并使产品足够好，以至于你招募到的用户会将产品告诉他们的朋友。\n你也需要将事情分解成非常小的部分，然后在进行的过程中进行迭代和调整。不要试图做太远的规划，绝对不要把所有的事情都放在一个大的公开发布中。你要从非常简单的东西开始——尽可能少的表面区域——并比你想象的更早地发布它。事实上，简单总是好的，你应该始终保持你的产品和公司尽可能简单。\n我们经常问面临问题的创业公司一些常见的问题：用户是否多次使用你的产品？你的用户是否狂热地喜欢你的产品？如果你的公司消失，你的用户是否会真的感到失望？你的用户是否在你没有要求他们这么做的情况下，向其他人推荐你？如果你是一家 B2B 公司，你是否至少有 10 个付费客户？\n如果没有，那往往就是根本问题，我们会告诉公司要改进他们的产品。我对大多数关于公司为什么没有增长的借口持怀疑态度——很多时候，真正的原因是产品还不够好。\n当初创公司不确定他们的产品下一步应该怎么做，或者他们的产品不够好时，我们会让他们去和他们的用户交谈。这并不是在所有情况下都奏效——肯定是有人会要求福特生产出更快的马车——但它的效果出人意料地好。实际上，更一般的说，当公司内部对任何事情存在分歧时，都应去和你的用户交谈。\n最优秀的创始人似乎对产品质量的关注有点过度，即使是对于看似无关紧要的细节。但这似乎奏效。顺便说一句，“产品”包括用户与公司的所有互动。你需要提供优质的支持，优质的销售互动等等。\n记住，如果你没有制造出一个优秀的产品，其他任何事情都无法拯救你。\n四、伟大的执行力 虽然打造一个出色的产品是必要的，但这并不意味着你的工作就此完成。你还需要将其发展成为一家伟大的公司，而且这需要你自己去做——雇佣一位“有经验的经理”来完成所有这些工作的幻想不仅非常普遍，也是失败公司的坟场。在很长一段时间里，你无法将这些工作外包给他人。\n这听起来似乎是显而易见的，但你必须要赚钱。现在是开始思考如何实现这一点的好时机。\nCEO 的唯一普遍的职责就是确保公司取得成功。即使你有许多通常会让你无法胜任 CEO 职务的缺点，只要你能雇佣能够互补你自身技能的人并让他们各尽其职，你仍然可以作为创始人做到这一点。那些有着华丽 MBA 背景的经验丰富的 CEO 可能没有你的缺点，但他或她不会像你那样深入理解用户，也不会有同样的产品直觉，更不会像你那样关心公司。\n4.1 增长 成长和动力是执行力的关键。只要不是“花 90 美分卖一美元”的增长，增长能解决所有问题，而缺乏增长的问题只有通过增长才能解决。如果你的公司在增长，那就感觉你在赢，人们会感到快乐。如果你的公司在增长，那么总会有新的角色和责任，人们会觉得他们的职业生涯在前进。如果你的公司没有增长，那就感觉你在输，人们会感到不快并离开。如果你的公司没有增长，人们只会争夺职责并互相指责。\n那些感到疲倦的创始人和员工几乎总是在没有动力的初创公司工作。无法过分强调这种感觉有多令人沮丧。\n优秀执行力的首要准则是“永远不要失去动力”。但是，如何做到这一点呢？\n最重要的方式是把它作为你的首要任务。公司的发展方向取决于 CEO 所关注的方向。对公司来说，有一个单一的优化指标是有价值的，而花时间去找出正确的增长指标也是值得的。如果你关心增长，并设定了执行标准，公司其余的部分将会集中精力关注增长。\n以下是几个例子：\nAirbnb 的创始人绘制了一个预期增长的图表，他们希望达到的增长目标。他们把这个图表贴在所有地方——冰箱上、桌子上、浴室的镜子上。如果他们那周达到了这个数字，那就太好了。如果没有，那就是他们讨论的所有话题。\n马克·扎克伯格曾经说过，Facebook 最重要的创新之一就是在增长放缓时设立了一个增长小组。这个小组曾经是（也许现在仍然是）公司中最具声望的小组——每个人都知道它的重要性。\n你需要列出阻碍增长的因素。作为一个公司，你们要讨论如何加快增长。如果你知道限制因素是什么，你自然会想办法解决它们。\n对于你考虑要做的任何事情，都问问自己：“这是优化增长的最佳方式吗？”比如，参加一个会议通常不是优化增长的最佳方式，除非你期望在那里能销售很多产品。\n在度量标准（和财务状况）方面进行极度的内部透明化是一件好事。不知为何，创始人总是对此感到非常恐惧。但这对于让整个公司都关注增长来说，是非常重要的。员工对度量标准的关注程度和公司的表现似乎有直接的关联。如果你隐藏度量标准，那么员工就很难关注它们。\n说到度量标准，不要用虚荣指标来欺骗自己。这里的常见错误是只关注用户注册，而忽视了用户留存率。用户留存率对增长的重要性和新用户获取同样重要。\n保持动力的另一个重要方式是建立内部节奏。你需要有一个“进步的鼓点”，可以在内部和外部谈论的新功能、客户、雇员、收入里程碑、合作伙伴等。\n你应该设定有挑战性但基本可达成的目标，并每月回顾进度。庆祝胜利！常常在内部讨论战略，告诉每个人你从客户那里听到的反馈等。你在内部分享的信息越多——无论好坏——你的公司就会做得越好。\n===============\n创始人经常会陷入一些陷阱。其中一个是，如果公司的增长速度极快，但一切都显得非常混乱和低效，每个人都会担心事情会崩溃。实际上，这种情况很少发生（我能想到的最近的一家因为技术债务而死亡的初创公司就是 Friendster。）出人意料的是，如果你的增长速度很快，但什么都没有优化，这其实是好事——你只需要修复它，就能得到更多的增长！我最喜欢的投资是那些增长非常快但优化程度极低的公司——它们被严重低估了。\n一个相关的陷阱是过于关注未来的问题——比如，“我们如何在大规模的情况下做到这一点？”答案是，当你到达那个阶段时，你会自然而然地找出答案。因为辩论这个问题而死的初创公司远多于因为没有充分考虑这个问题而死的初创公司。一个好的经验法则是，只考虑在你目前规模的十倍时事情会如何运作。大多数早期阶段的初创公司应该把“做不可扩展的事情”挂在墙上，按此原则行事。例如，在早期，优秀的初创公司总是有优质的客户服务，而差的初创公司则担心这会影响单位经济效益，担心这样做无法扩展。但优质的客户服务会带来热情的早期用户，而随着产品的改进，你需要的支持会越来越少，因为你会知道客户常见的问题，并在这些领域改进产品/体验。（顺便说一句，这是一个非常重要的例子——要提供优质的客户支持。）\n然而，这其中有一个大前提——“做不可扩展的事情”并不能免除你最终必须赚钱的责任。在早期，单位经济效益不佳是可以接受的，但你必须有一个合理的解释，说明为什么单位经济效益在后期会有所改善。\n另一个陷阱是由于绝对数值上的增长表现不佳，尽管百分比基础上的增长表现良好，而感到沮丧。人类对于指数增长的直觉非常差。提醒你的团队这一点，所有的巨头公司都是从小数字开始增长的。\n一些最大的陷阱是创始人认为可以带来增长，但实际上几乎永远无效，并且浪费了大量时间的事情。常见的例子包括与其他公司的交易和“大新闻发布”。要警惕这些事情，并明白它们实际上几乎永远不会奏效。相反，应该像所有伟大的公司一样，通过构建用户喜爱的产品，先手动吸引用户，然后测试大量的增长策略（广告，推荐计划，销售和营销等），并做更多有效的事情。询问你的客户你在哪里可以找到更多像他们的人。\n记住，销售和营销并非禁忌词汇。尽管如果你没有一个出色的产品，它们都无法救你，但它们都可以大幅加速增长。如果你是一家企业公司，你的公司很可能需要在这些方面做得好。\n尤其不要害怕销售。至少有一位创始人必须擅长邀请人们使用你的产品并付给你钱。\nAlex Schultz为消费品增长提供了一场讲座[2] ，这个讲座值得一看。对于 B2B 产品，我认为几乎总是追踪每月的收入增长是正确的策略，并记住更长的销售周期意味着最初几个月的情况可能会看起来不乐观（尽管有时将初创公司作为初期客户可以解决这个问题）。\n4.2 专注和强度 如果我必须将我对如何运营的建议浓缩到仅两个词中，我会选择“专注”和“强度”。这两个词似乎真正适用于我认识的最优秀的创始人。\n他们无情地专注于他们的产品和增长。他们并不试图做所有的事情——实际上，他们经常说“不”（这很难，因为创办公司的那种人就是喜欢尝试新事物。）\n一般的原则是，在你已经主导了第一件事情之前，不要让你的公司开始做下一件事。我所知道的所有伟大的公司都没有一开始就同时做多件事——它们从一件事开始，充满信念，然后坚持到底。你能做的事情远少于你想象的。初创公司死亡的一个非常、非常普遍的原因是做了太多错误的事情。优先级设置是至关重要且困难的。（为公司设定优先级和为自己设定日常优先级同样重要。对我个人而言，我发现最有效的是每天用笔和纸列出大约 3 个主要任务和大约 30 个次要任务，以及一个包含总体目标的年度待办事项清单。）\n虽然优秀的创始人不会做很多大项目，但他们非常投入地做他们所做的事情。他们能非常快地完成事情。他们果断，这在经营初创公司时是困难的——你会得到很多互相矛盾的建议，原因既是有多种方法可以做事情，也是因为存在很多糟糕的建议。优秀的创始人会听取所有的建议，然后迅速做出自己的决定。\n请注意，这并不意味着你要全力以赴做所有事——那是不可能的。你必须选择正确的事情。如保罗·布赫海特所说，找到用 10%的努力获取 90%的价值的方法。市场并不关心你工作得多努力——它只关心你是否做了正确的事情。\n既痴迷于产品质量又能快速行动是非常困难的。但这是优秀创始人最明显的特质之一。\n我从未见过一个行动迟缓的创始人能够真正成功。\n你和其他创业公司并无不同。你仍然需要保持专注并迅速行动。即使是制造火箭和核反应堆的公司也能做到这一点。所有失败的公司都有一种自我解释，认为他们与众不同，不需要快速行动。\n当你找到有效的方法时，继续坚持。不要分心去做其他事。不要松开油门。\n不要被早期的成功所迷惑——你并非是通过参加大量的社交活动和参与各种讨论小组就能获得一个有前景的开端。初步取得成功的创业公司创始人可以选择两条路：一是继续做他们正在做的事，或者他们开始花大量的时间思考自己的“个人品牌”并享受作为创始人的地位。\n拒绝参加会议和拒绝接受媒体采访是困难的——它们让人感觉良好，特别是当看到你所在领域的其他创始人得到关注时更是如此。但这种情况不会持续太久。最终，新闻媒体会发现谁才是真正的赢家，如果你的公司真正成功，你会得到超过你期望的关注。那些极端的情况——早期创业者拥有自己的公关人员——你可能会认为这只存在于电视节目中，但实际上这在现实生活中确实存在，而且这些早期创业者几乎总是会失败。\n长期来看，专注和强度会带来胜利。 （查理·罗斯曾经说过，世界上的事情是通过专注和个人联系的结合来完成的，这句话让我一直铭记在心。)\n4.3 CEO 的职责 前面我提到，首席执行官的唯一普遍的工作职责就是确保公司取得胜利。虽然这是事实，但我想更具体地谈谈首席执行官应该如何分配他或她的时间。\n作为首席执行官，你需要 1) 为公司设定愿景和策略，2) 向所有人宣传公司，3) 招聘和管理团队，特别是在你自己能力不足的领域，4) 筹集资金，以及 5) 设定执行质量的标准。\n除此之外，找出你最热爱的业务部分，并始终保持参与。\n正如我一开始提到的，这是一份高强度的工作。如果你成功了，公司将在你无法想象的程度上占据你的生活——公司的事情将始终在你的脑海中。极端的专注和强烈的执行力意味着它对于工作与生活的平衡并非最佳选择。你可以有另一个重要的事物——你的家庭，参加很多铁人三项比赛等——但除此之外可能没有太多其他事物。你必须始终保持在岗位，无论你在委派任务上做得多么好，还是有很多决定只有你才能做出。\n你应该立志于对团队和外部世界保持超高的响应速度，始终清楚战略和优先事项，出席所有重要的活动，并快速执行（尤其是在涉及到其他人受阻的决策方面）。你还应该采取“不惜一切代价”的态度——会有很多不愉快的琐碎事情。如果团队看到你在做这些事，他们也会这么做。\n管理你自己的心理状态既非常困难又非常重要。这在现在看来可能已经变得陈词滥调，但这是真的——情绪的高潮和低谷都非常强烈，如果你无法在这其中保持某种程度的稳定，你将会遇到困难。作为一名 CEO 是一种孤独的存在。和其他 CEO 建立关系是非常重要的，当一切都在瓦解的时候，你可以打电话向他们求助（这是 YC 的一个重要的偶然发现，这使创始人有了同行）。\n成功的创业需要很长时间——肯定比大多数创始人在开始时想的要长。你不能把它当作熬夜。你必须吃好、睡好、做运动。你必须花时间和你的家人和朋友在一起。你也需要在你真正热爱的领域工作——没有其他东西能支撑你十年。\n所有事情似乎总是处于破碎的状态——灾难的多样性和规模将会让你惊讶。你的工作就是带着笑容修复它们，并向你的团队保证一切都会好的。通常情况下，事情并不像看起来那么糟糕，但有时候它们确实非常糟糕。无论如何，只需继续前进。持续增长。\nCEO 不能找借口。会有很多不公平和糟糕的事情发生。但是不要让自己说，尤其是对团队说，“如果我们有更多的钱就好了”或“如果我们有另一名工程师就好了”。要么想办法使之成为可能，要么想办法在没有它的情况下应对。那些给自己找很多借口的人通常会失败，创业公司的 CEO 如果这样做几乎总是会失败。让自己对不公感到不安，1 分钟就好，然后意识到找到解决方案取决于你自己。努力让人们在谈论你时说：“X 总是能够以某种方式把事情办好。”\n对于首次创业的创始人，没有人知道自己在做什么。你理解这一点，并请求帮助，会使你处于更好的状态。花时间投资学习成为一个好的领导者和管理者是值得的。做到这一点的最好方法是找一个导师——读书似乎没有那么有效。\n在 YC，我们的很多建议都是“直接问他们”或“直接去做”。首次创业的创始人认为，当你需要别人的帮助或者你想做新的事情时，一定有一些秘诀。但再次强调，对于创业公司来说，技巧已经不再起作用了。直接了当，勇于表达你的需求，不要做一个讨厌鬼。\n对于别人你可以扭曲现实，但对自己不能这样做。你必须让其他人相信你的公司注定是这十年里最重要的创业公司，但你自己应该对可能出错的任何事情都保持警惕。\n要坚持不懈。大多数创始人放弃得太快，或者太快转向下一个产品。如果事情总体上进展不顺利，找出问题的根源并确保你解决了它。作为一名成功的创业公司 CEO，坚持不懈是非常重要的一部分（尽管你也不想过于固执——这是另一种明显的矛盾，也是一个艰难的抉择。）\n保持乐观。尽管可能在世界某处存在着一位伟大的悲观主义 CEO，但我还没遇到过他或她。CEO 对未来充满信心，并相信公司将在创造更好的未来中发挥重要作用，这对于 CEO 以及将这种信念传播给整个公司来说都是非常重要的。从理论上讲，这很容易；在应对短期挑战的现实中，这很困难。不要失去对长远愿景的关注，相信日常的挑战终将被遗忘，取而代之的是年复一年的进步回忆。\n定义使命和价值观是你最重要的工作之一。这可能会显得有点矫情，但早早地这样做是值得的。你在开始时设定的任何东西，几年后通常仍会有效，而且随着你的发展，每个新加入的人都需要首先接受，然后向其他人推销公司的使命和价值观。所以，尽早把公司的使命和价值观写下来。\n我认为值得重复的另一个陈词滥调是：建立一家公司有点像建立一个宗教。如果人们无法将他们日常的工作与他们关心的更高的目标联系起来，他们就不会做得很好。在 YC 网络中，我认为 Airbnb 做得最好，强烈建议大家关注他们的文化价值观。\nCEO 们经常犯的一个错误是在商业领域的老路上创新，而不是在新产品和解决方案上创新。例如，许多创始人认为他们应该花时间去发现新的人力资源、营销、销售、融资、公关等方式。这几乎总是不好的。在成熟的领域里，按照已经行之有效的方式来做，将你的创新精力集中在你正在构建的产品或服务上。\n4.4 招聘 \u0026amp; 管理 招聘是你最重要的工作之一，也是建立一家伟大公司（而不仅仅是伟大产品）的关键。\n关于招聘，我的第一条建议是：不要轻易去招聘。在 YC 我们接触过的最成功的公司，通常会相对较晚地开始招聘员工。员工是一笔大开销。员工会增加组织复杂性和沟通成本。有些你可以和你的合伙人讲的话，在员工在场的情况下就不能说。员工也会增加惯性——随着团队人数的增加，改变方向的难度会呈指数级增加。抵制将自我价值与员工人数挂钩的冲动。\n最优秀的人拥有很多机会。他们希望加入发展势头强劲的公司。如果你什么都没有，招聘他们就很困难。一旦你的公司明显赢得了竞争，他们就会想要加入你的团队。\n值得重复的是，优秀的人有很多选择，而你需要优秀的人才来构建一家伟大的公司。在股权、信任和责任方面要慷慨大方。愿意去争取那些你认为自己无法得到的人。记住，你想要雇佣的那种人如果愿意，他们自己也可以创办公司。\n当你处于招聘模式时（即从你找到产品市场匹配 PMF 到无穷期 T-infinity），你应该花大约 25%的时间在招聘上。至少有一位创始人，通常是 CEO，需要变得擅长招聘。这是大多数 CEO 的头号消耗时间的活动。每个人都说 CEO 应该花大量时间在招聘上，但实际上，只有最好的 CEO 才会这么做。这可能说明了一些问题。\n不要在你雇佣的人才的素质上妥协。每个人都知道这一点，然而在绝望的需要中，每个人都会在某个时刻在这上面妥协。每个人都会对此感到后悔，有时候这几乎会摧毁公司。优秀和不称职的人都具有传染性，如果你从一开始就雇佣表现平庸的人，那么平均水平通常不会上升。那些早期雇佣表现平庸的员工的公司几乎永远无法恢复。对于人的判断，相信你的直觉。如果你有疑虑，那么答案就是不行。\n不要雇佣一贯消极的人。他们不适合早期创业公司需要的东西——世界其他地方每天都在预测你的垮台，公司内部需要团结一致，相信事情会好起来。\n在几乎所有角色中，应该看重能力而非经验。寻找具有聪明和拥有搞定事情的良好记录的人。寻找你喜欢的人——你们将会花费大量的时间在一起，并且经常处于紧张的情况。对于你不认识的人，尝试在他们全职加入之前一起完成一个项目。\n投入精力，成为一位优秀的管理者。对大多数创始人来说，这很难，并且肯定是违反直觉的。但这非常重要，找到能在这方面帮助你的导师。如果你在这方面的表现不佳，你将很快失去员工，而如果你不能留住员工，即使你是世界上最好的招聘者，这也没用。关于如何成为一名优秀的管理者，大部分原则都已经讲得很清楚了，但我从未看到讨论过的一个原则就是\u0026quot;不要陷入英雄主义模式\u0026quot;。大多数首次担任管理者的人在某个时刻都会成为这个模式的受害者，试图自己做所有事情，对员工不闻不问。这通常会以崩溃告终。要抵制进入这种模式的所有诱惑，愿意为了拥有一个运作良好的团队而推迟项目进度。\n谈到管理，尽量让所有人都在同一个办公室工作。不知何故，创业公司总是在这个问题上妥协。但是，几乎所有最成功的创业公司一开始都是聚集在一起的。我认为远程工作对大公司来说可能很好，但对于创业公司来说，但这并不是通向巨大成功的秘诀。\n最后，迅速解雇员工。大家都知道这个原则，但没有人会这么做。但无论如何，我还是觉得应该说一下。另外，无论他们在工作中有多优秀，只要他们对公司文化有害，就要解雇他们。公司文化由你雇佣、解雇和晋升的人来定义。\n我写了一篇博客文章，详细介绍了这个话题。[3]\n4.5 竞争对手 关于竞争对手的简要说明：竞争对手就像是创业公司的幽灵故事。初创公司的创始人认为他们是杀死 99%的创业公司的元凶。但实际上，99%的创业公司是自杀，而非他杀。你更应该关心的是你的内部问题。如果你失败了，很可能是因为你没能做出一个优秀的产品，或者没能创建一个伟大的公司。\n99%的时间里，你应该忽略竞争对手。特别是当他们筹集了大量的资金，或者在媒体上引起了很大关注时，更应该忽略他们。除非他们用真实的、已经上线的产品击败你，否则不要担心竞争对手。发布新闻稿比编写代码更容易，编写代码又比制作出优秀的产品更容易。正如亨利·福特所说：\u0026ldquo;最让人畏惧的竞争对手是那些从不关心你，而是一直在努力改进他们自己业务的人。\u0026rdquo;\n每个巨头公司在它们还很小的时候，都曾面临比你现在面临的竞争威胁更严重的情况，但它们最终都平安度过了。总是有对策的。\n4.6 赚钱 哦，是的，赚钱。你需要弄清楚如何做到这一点。\n简单来说，你需要让人们支付的金钱超过你提供商品/服务的成本。出于某种原因，人们总是忘记考虑提供商品/服务的成本部分。\n如果你有一个免费的产品，不要打算通过购买用户来增长。这对依靠广告的业务来说真的很难。你需要做出一些人们愿意与朋友分享的东西。\n如果你有一个付费产品，客户终身价值（LTV）低于 500 美元，你通常负担不起销售成本。试验不同的用户获取方式，如 SEO/SEM，广告，邮件等，但尽量在 3 个月内回收你的客户获取成本（CAC）。\n如果你有一个付费产品，客户终身价值（LTV）超过 500 美元（净收入），你通常可以负担得起直销。首先尝试自己销售产品以了解哪些方法有效。《Hacking Sales》是一本值得一读的书。\n无论如何，尽快达到\u0026quot;拉面盈利\u0026quot;——也就是说，赚到足够的钱让创始人能活下来。一旦你到达这个阶段，你就掌控了自己的命运，不再受投资者和金融市场的摆布。\n痴迷地关注你的现金流。虽然这听起来难以置信，但我们已经看到很多次创始人在不知情的情况下用光了资金（也可以阅读 Paul Graham 的文章[4] ）。\n4.7 筹集资金 大多数初创公司在某个时候会筹集资金。\n你应该在需要资金或者在有好的条件下筹集资金。但要小心不要失去节俭的意识，也不要试图通过投钱来解决问题。资金不足可能会造成困扰，但是拥有过多的资金几乎总是不好的。\n成功筹集资金的秘诀是拥有一家好公司。创始人为了尝试过度优化流程而做的其他事情，可能只有 5%的时间真正起作用。投资者正在寻找的是那些不管他们是否投资，都会非常成功，但是在外部资本推动下更快增长的公司。\u0026ldquo;真正成功\u0026quot;这部分非常重要——因为投资者的回报主要取决于大的成功，如果投资者认为你有 100%的机会创建一个价值 1000 万美元的公司，但几乎没有机会建立一个更大的公司，即使估值非常低，他/她可能仍然不会投资。始终解释为什么你可能会取得巨大成功。\n投资者受到两种恐惧的驱动：错过下一个谷歌，和害怕在看似明显愚蠢的事情上亏钱。（对于最好的公司，他们同时害怕这两点。）\n当你的公司状况不够好，无法吸引资本时，试图筹集资金是个坏主意。这会损害声誉并浪费时间。\n如果你在筹款中遇到困难，不要感到沮丧。很多最好的公司都在这方面有过挣扎，因为最好的公司往往在刚开始时看起来表现不佳（并且他们几乎总是看起来不合潮流）。当投资者拒绝你时，相信拒绝而不是理由。并记住，除了“是”的回答，其他任何回答都是“否”——投资者总是以听起来像“也许是”的方式说“不”。\n确保同时进行多个筹款谈判非常重要——不要按照你喜欢的投资者的顺序逐个进行。让投资者采取行动的方式是让他们害怕其他投资者抢走他们的机会。\n把筹款视为一种必要的恶，尽快完成。有些创始人沉迷于筹款；这一定是不好的。最好只让一个创始人做这件事，这样公司不会陷入停滞。\n记住，大多数风险投资人对大多数行业了解不多。数据总是最具说服力的。\n虽然这种情况正在开始改变，但是大多数投资者（Y Combinator 是一个值得注意的例外）不幸的是仍然需要双方都认识的人的介绍才会认真对待你。\n坚持要求简洁明了的条款（复杂的条款会在每一轮中累积并变得更糟），但不要过度优化，尤其是在估值上。估值是一个可以竞争的量化指标，因此创始人喜欢争取最高估值。但是中间融资轮次的估值并不太重要。\n获得的第一笔资金通常最难得到，因此你应该把精力集中在这上面，这通常意味着你要把注意力集中在最喜欢你的投资人身上。始终制定多个计划，其中一个计划是不筹集任何资金，根据兴趣灵活调整——如果你可以把更多的资金用在有用的地方，并且能以合理的条件获得，那就考虑接受它。\n在推销技巧方面，一个重要的关键是使你的故事尽可能清晰和易于理解。当然，最重要的秘诀是真正拥有一家好公司。关于推销中应包含什么内容有很多想法，但是你至少需要有：使命、问题、产品/服务、商业模式、团队、市场和市场增长率以及财务状况。\n请记住，每一轮融资的标准都会变得更高。如果你在种子轮融资中仅仅因为你的演讲吸引人而得到通过，那么在你的 A 轮融资中，如果这种方法不再奏效，你也不应感到惊讶。\n好的投资者确实能增加很多价值。坏的投资者则会大大降低价值。大多数投资者处于中间地带，既没有增加也没有减少价值。只投资少量资金的投资者通常对你没有什么帮助（即警惕所谓的聚会轮融资）。\n优秀的董事会成员是除了用户之外，是公司最好的外部推动力之一，而外部推动力的价值超过大多数创始人的想象。应乐意接受较低的估值，以获得一个愿意积极参与的优秀董事会成员。\n我认为 Paul Graham 的这篇文章[5] 是关于筹款的最佳读物。\n后记 请记住，每一个伟大的创意都有至少一千个人想到。其中一个人才真正获得成功。区别在于执行。这是一项磨人的工作，每个人都希望有其他方法能将“创意”转化为“成功”，但迄今为止还没有人找到方法。\n所以你需要的只是一个伟大的创意，一个优秀的团队，一个出色的产品，以及卓越的执行力。如此简单！;)\n感谢 Paul Buchheit、Erica Carpenter、Brian Chesky、Adam D\u0026rsquo;Angelo、Drew Houston、Justin Kan、Matt Krisiloff、Aaron Levie、Gabriel Leydon、Jessica Livingston、Dustin Moskovitz、David Rusenko 和 Colleen Taylor 为这篇文章提供了宝贵的建议。\n附录 [1] 从事你感兴趣的项目：(https://blog.samaltman.com/projects-and-companies)\n[2] Alex Schultz 为消费品增长提供的一场讲座：(http://startupclass.samaltman.com/courses/lec06/)\n[3] 如何招聘：(http://blog.samaltman.com/how-to-hire)\n[4] Default Alive or Default Dead? (http://paulgraham.com/aord.html)）\n[5] 如何筹款 (http://paulgraham.com/fr.html)\n","permalink":"https://miss-you.github.io/posts/20230703-startup-playbook/","summary":"\u003cp\u003e作者：Sam Altman\u003c/p\u003e\n\u003cp\u003e原文：https://playbook.samaltman.com/\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSam Altman，OpenAI CEO，经常会在博客中分享他的创业经验与智慧。Sam 曾分享过一篇他的经典文章《创业生存手册：如何有效地打造产品、组建团队并筹集资金》，他提供了一系列富有洞见的指导，帮助我们理解创业的艰难和挑战，并找到成功的途径。无论你是创业新手，还是经验丰富的科技专家，都能在这篇文章中找到有价值的收获。#SamAltman #创业 #科技\u003c/p\u003e\n\u003cp\u003e个人认为，大公司内的小团队或创新团队与创业公司在诸多方面有着密切的相似性。两者都面临着从零开始，将一个概念或想法转化为可行产品或服务的挑战。他们都需要快速地适应和学习，寻找产品与市场的契合点，同时也要不断地迭代产品，以满足不断变化的市场需求。在这两种环境中，都需要强大的领导力和管理才能以及优秀的团队成员。而且，他们都需要面对并管理风险，同时在有限的资源下取得最大的产出。因此，无论你是处于创业环境还是大公司的创新团队，本文都会为你提供极大的价值。Sam Altman的经验和洞察将帮助你更好地理解如何建立并领导一支成功的团队，如何募集资金，如何处理竞争，以及如何建立持久并能够盈利的公司。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e我们在指导初创公司方面投入了大量的时间和精力。尽管一对一的咨询服务始终是不可或缺的，但我们认为，如果能将这些建议中最具普适性的部分提炼出来，整合成一种可以提供给 Y Combinator 以及 YC Fellowship 公司的行动指南，那么我们可能能更好地扩展 Y Combinator 的影响力。\u003c/p\u003e\n\u003cp\u003e于是，我们决定将这个行动指南分享给所有人。\u003c/p\u003e\n\u003cp\u003e这是为初涉创业领域的人士准备的。对于那些阅读过大量 YC 合作伙伴所写的文章的人来说，这里的大部分内容可能并不陌生——我们的目标是将这些内容汇集到一处。\u003c/p\u003e\n\u003cp\u003e关于如何扩大创业公司的规模，我们可能会在后面的部分介绍——本指南主要覆盖了如何创立一家公司的相关内容。\u003c/p\u003e\n\u003cp\u003e作为一家初创公司，你的目标应该是创造出用户热爱的产品。如果你做到了这一点，那么你需要找出如何吸引更多的用户。但是，首要的一步至关重要——想想今天那些真正成功的公司。他们都是从一个让早期用户如此热爱以至于愿意向他人推荐的产品开始的。如果你没有做到这一点，你将会失败。如果你自欺欺人，认为你的用户热爱你的产品，但实际上并非如此，你仍然会失败。\u003c/p\u003e\n\u003cp\u003e初创公司的墓地上满是那些认为可以跳过这一步的人。\u003c/p\u003e\n\u003cp\u003e与其创造出大批用户喜欢的产品，不如首先创造出小部分用户热爱的产品。尽管总的积极感受程度是相同的，但是获得更多用户要比从喜欢提升到热爱要容易得多。\u003c/p\u003e\n\u003cp\u003e关于选择创业，我有一个警告：这是一件很糟糕的事情！我们从 YC 创始人那里得到的最一致的反馈就是，创业比他们想象的要困难，因为他们对初创公司所需的工作量和强度没有一个清晰的认识。加入一家正处于快速发展轨道的早期初创公司通常会是一个更好的经济上的选择。\u003c/p\u003e\n\u003cp\u003e另一方面，创业其实对你的职业并不构成很大的风险——如果你在技术方面真的出类拔萃，即使你失败了，也会有工作机会。大多数人在评估风险方面做得非常糟糕。我个人认为，更具风险的选择是，你有一个你非常热衷的想法或项目，但却选择了一个安全、轻松但又无法满足你的工作。\u003c/p\u003e\n\u003cp\u003e要创办一家成功的初创公司，你需要：一个伟大的想法（包括一个伟大的市场）、一个优秀的团队、一个出色的产品，以及卓越的执行力。\u003c/p\u003e\n\u003ch1 id=\"一一个伟大的想法\"\u003e一、一个伟大的想法\u003c/h1\u003e\n\u003cp\u003e我们会首先询问 YC 公司的创始人们，他们正在开发什么，以及为何要开发这个产品。\u003c/p\u003e\n\u003cp\u003e我们希望得到清晰、简洁的回答。这既是对你作为创始人的评估，也是对创意本身的考察。作为创始人，清晰的思维和沟通能力非常重要——你在招聘、融资、销售等方面都会需要这种能力。一般来说，想法需要清晰才能传播，而复杂的想法几乎总是混乱思维或是人为制造问题的标志。如果你的想法在别人第一次听到时并不能激发起他们的兴趣，那就不妙了。\u003c/p\u003e\n\u003cp\u003e我们还会问，谁对这款产品有着迫切的需求。\u003c/p\u003e\n\u003cp\u003e最好的情况是，你自己就是目标用户。次优的情况是，你对目标用户有着深入的理解。\u003c/p\u003e\n\u003cp\u003e如果公司已经有了用户，我们会问有多少用户，以及这个数字的增长速度如何。我们会尝试找出它的增长速度为何没有更快，尤其是要找出用户是否真的喜欢这个产品。通常，这意味着他们会在没有公司提示的情况下，向他们的朋友推荐这个产品。我们还会问这个公司是否已经产生了收入，如果没有，原因是什么。\u003c/p\u003e\n\u003cp\u003e如果公司还没有用户，我们会尝试找出最小化的首次构建项目，以便对假设进行验证——也就是说，如果我们从完美的体验回溯，我们会尝试找出从何处着手的核心点。\u003c/p\u003e\n\u003cp\u003e检验一个想法的方法是发布它看看会发生什么，或者尝试销售它（例如，在你编写一行代码之前，尝试获得购买意向书）。前者更适用于消费者想法（用户可能会告诉你他们会使用它，但实际上它可能无法脱颖而出），后者更适用于企业想法（如果一个公司告诉你他们会购买某件东西，那么就去制造它）。具体来说，如果你是一家企业公司，我们会首先问你是否有来自客户的购买意向书，表明他们愿意购买你正在开发的产品。对于大多数生物技术和硬科技公司来说，检验一个想法的方式是先和潜在客户交谈，然后找出你可以首先构建的技术的最小子集（MVP）。\u003c/p\u003e\n\u003cp\u003e让你的想法根据用户反馈进行演进非常重要。理解你的用户非常关键——你需要这个能力来评估一个想法，制造一个出色的产品，以及建立一个伟大的公司。\u003c/p\u003e\n\u003cp\u003e如前所述，初创公司的路非常艰难。他们需要很长的时间和持续的高强度努力。创始人和员工需要有共同的使命感来支撑他们。因此，我们会询问创始人为什么想创办这家特定的公司。\u003c/p\u003e\n\u003cp\u003e我们也会询问这家公司如何能够成为一家垄断企业。这有很多不同的词汇来表述，但我们采用的是彼得·蒂尔的说法。显然，我们不希望你的公司在面对竞争对手时采取不道德的行为。相反，我们正在寻找那些随着规模的扩大而变得更强大，且难以复制的企业。\u003c/p\u003e\n\u003cp\u003e最后，我们会询问市场情况。我们会询问它现在的规模，增长速度，以及为什么它在十年后会变得非常大。我们试图理解为什么市场会快速增长，以及为什么这是一个初创公司应该去追逐的好市场。我们喜欢那些刚刚开始出现的大部分人尚未意识到的重大技术变革——大公司在应对这些转变方面做得很糟糕。而有些反直觉的是，最佳策略是在小市场中占据大部分份额。\u003c/p\u003e\n\u003cp\u003e关于想法，我还有一些其他的想法：\u003c/p\u003e\n\u003cp\u003e我们更喜欢全新的东西，而不是衍生的东西。大多数真正的大公司都是从一些根本性的新事物开始的（新的一个可以接受的定义是比原来好 10 倍）。如果同时有十家其他公司以同样的计划开始，而且听起来非常像已经存在的东西，我们会有所怀疑。\u003c/p\u003e\n\u003cp\u003e这其中一个重要的反直觉原因是，做一些新的和困难的事情比做一些衍生的和容易的事情更简单。如果你是前者，人们会想要帮助你，加入你；如果是后者，他们就不会这么做。\u003c/p\u003e\n\u003cp\u003e最好的想法听起来可能不好，但实际上是好的。所以你不需要对你的想法过于保密——如果它真的是一个好想法，那么它可能不会听起来像是值得被窃取的。即使它听起来像是值得被窃取的，拥有好想法的人至少比愿意付出将伟大的想法转化为伟大的公司所需要的工作的人多一千倍。而且，如果你告诉别人你在做什么，他们可能会帮助你。\u003c/p\u003e\n\u003cp\u003e说到告诉别人你的想法——虽然这个想法第一次听到时真的能激发一些人的兴趣是很重要的，但几乎每个人都会告诉你你的想法很糟糕。也许他们是对的。也许他们不擅长评估创业公司，或者他们只是嫉妒。无论原因是什么，这种情况会经常发生，它会让你受伤，即使你认为你不会被它影响，你仍然会被影响。你越早建立自我信念，不被恶意评论者过多拖累，你就会越好。无论你多么成功，恶意评论者永远不会消失。\u003c/p\u003e\n\u003cp\u003e如果你没有创业想法，但是想要创业，怎么办呢？也许你不应该创业。如果首先想法出现，而创业公司是将这个想法推向世界的方式，那会更好。\u003c/p\u003e\n\u003cp\u003e我们曾经尝试过一个实验，为一批有前途但没有创业想法的创始团队提供资金，希望他们在我们资助他们后能找到一个有前景的创业想法。\u003c/p\u003e\n\u003cp\u003e所有的尝试都失败了。我认为问题的一部分是，好的创始人往往有很多好的想法（通常是太多）。但更大的问题是，一旦你有了一个创业公司，你就必须赶快想出一个创业想法，而且因为它已经是一个正式的公司，所以想法不能太疯狂。你最终会得到听起来可行但是衍生的创业想法。这就是转型的危险。\u003c/p\u003e\n\u003cp\u003e因此，最好不要过于积极地强迫自己想出创业想法。相反，去了解许多不同的事物。实践发现问题，看似低效的事物，和主要的技术转变。\u003ca href=\"http://blog.samaltman.com/projects-and-companies\"\u003e从事你感兴趣的项目\u003c/a\u003e\u003csup\u003e[1]\u003c/sup\u003e 。尽可能地接触智慧、有趣的人。在某个时候，创业想法会自然出现的。\u003c/p\u003e\n\u003ch1 id=\"二一个优秀的团队\"\u003e二、一个优秀的团队\u003c/h1\u003e\n\u003cp\u003e平庸的团队无法打造伟大的公司。我们最关注的事情之一就是创始人的实力。当我过去从事后期投资时，我同样非常关注创始人所雇佣的员工的实力。\u003c/p\u003e\n\u003cp\u003e什么样的人才是优秀的创始人？最重要的特征包括无坚不摧的毅力、决心、坚韧不拔和足智多谋。聪明才智和激情也排在非常重要的位置。这些都比经验，当然也比“精通语言 X 和框架 Y”更重要。\u003c/p\u003e\n\u003cp\u003e我们注意到，最成功的创始人都是那种和他们一起工作感觉压力很小的人，因为你觉得“不管是什么事，他/她都能完成。”有时候，你可以凭借纯粹的意志力成功。\u003c/p\u003e\n\u003cp\u003e优秀的创始人具有一些看似矛盾的特征。一个重要的例子是刚柔并济。你要对公司的核心和其使命有强烈的信念，但对于几乎所有其他事情，你还需要保持非常灵活，乐于学习新事物。\u003c/p\u003e\n\u003cp\u003e最优秀的创始人反应异常迅速。这是决策力、专注力、强度和执行能力的指标。\u003c/p\u003e","title":"【译】创业生存手册：如何有效地打造产品、组建团队并筹集资金"},{"content":"第一，把手机放在看不见的地方：手机已成为现代生活中最大的分心来源。为确保专注力，可以关闭工作用即时通讯软件、退出群聊、取关公众号、卸载容易分心的 APP。通过将手机放在看不见的地方或设置勿扰模式，有助于减少干扰。\n第二，寻找一个不易受到干扰和分心的环境：安静、舒适的环境有助于提高专注力。因此，选择图书馆、自习室或安静的咖啡馆进行学习或工作。在家里，可以选择无电视的客厅或书房，避免在卧室或躺在床上学习。\n第三，列出分心物清单：在开始工作或学习之前，列出可能导致分心的事物，如电视、游戏、聊天等。意识到这些干扰因素，有助于在工作或学习时保持专注。\n第四，想想现在做的事情是否值得消耗注意力：在投入精力之前，评估任务的重要性。分清优先级，考虑投入产出比和任务边界，集中注意力在重要且紧急的事情上。对于长期不做的事情，可以考虑委托给别人或机器，或者干脆不做。\n第五，阅读前喝点儿咖啡：适量喝咖啡可以提神醒脑，帮助保持清醒。注意饮用时间和剂量，以免导致失眠。早上喝一杯咖啡，午睡后再喝一杯，既提神又有助于提高新陈代谢。\n第六，准备一支笔：在阅读或学习时，手边准备一支笔，以便随时记录笔记、划重点或想到新的想法。没有笔也没关系，可以使用电脑编辑器或 iOS 的提醒事项软件记录想法，避免因寻找笔而分心。\n第七，觉知自己走神：在工作或学习过程中，可能会不自觉地走神。根据情况采取相应措施。如果是专注力初学者，需要将注意力拉回；若是心流状态高手，分心可能是因为疲劳，此时需要的是适当休息，例如散步或冥想等。\n","permalink":"https://miss-you.github.io/posts/20230421-7-ways-to-stay-focused/","summary":"\u003cp\u003e第一，把手机放在看不见的地方：手机已成为现代生活中最大的分心来源。为确保专注力，可以关闭工作用即时通讯软件、退出群聊、取关公众号、卸载容易分心的 APP。通过将手机放在看不见的地方或设置勿扰模式，有助于减少干扰。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-1.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第二，寻找一个不易受到干扰和分心的环境：安静、舒适的环境有助于提高专注力。因此，选择图书馆、自习室或安静的咖啡馆进行学习或工作。在家里，可以选择无电视的客厅或书房，避免在卧室或躺在床上学习。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-2.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第三，列出分心物清单：在开始工作或学习之前，列出可能导致分心的事物，如电视、游戏、聊天等。意识到这些干扰因素，有助于在工作或学习时保持专注。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-3.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第四，想想现在做的事情是否值得消耗注意力：在投入精力之前，评估任务的重要性。分清优先级，考虑投入产出比和任务边界，集中注意力在重要且紧急的事情上。对于长期不做的事情，可以考虑委托给别人或机器，或者干脆不做。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-4.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第五，阅读前喝点儿咖啡：适量喝咖啡可以提神醒脑，帮助保持清醒。注意饮用时间和剂量，以免导致失眠。早上喝一杯咖啡，午睡后再喝一杯，既提神又有助于提高新陈代谢。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-5.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第六，准备一支笔：在阅读或学习时，手边准备一支笔，以便随时记录笔记、划重点或想到新的想法。没有笔也没关系，可以使用电脑编辑器或 iOS 的提醒事项软件记录想法，避免因寻找笔而分心。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-6.png\"\u003e\u003c/p\u003e\n\u003cp\u003e第七，觉知自己走神：在工作或学习过程中，可能会不自觉地走神。根据情况采取相应措施。如果是专注力初学者，需要将注意力拉回；若是心流状态高手，分心可能是因为疲劳，此时需要的是适当休息，例如散步或冥想等。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20230421-7-Ways-to-Stay-Focused-7.png\"\u003e\u003c/p\u003e","title":"提升专注力的七种方法"},{"content":"为什么 JSON 需要转义？ [TOC]\n适合人群：入门级\nJSON 和 JSON 转义 21 世纪初，Douglas Crockford 寻找一种简便的数据交换格式，能够在服务器之间交换数据。当时通用的数据交换语言是 XML，但是 Douglas Crockford 觉得 XML 的生成和解析都太麻烦，所以他提出了一种简化格式，也就是 JSON。\nJSON 其结构形如 {\u0026quot;云原生\u0026quot;:\u0026quot;Kubernetes\u0026quot;}，可以很直观的使用字符串表示对象或数据结构。对象或数据结构使用序列化接口转换成 JSON 字符串，比如 Golang 中的json.Marshal接口。\n你可能会有这样的疑问：既然 JSON 字符串结构简单，为什么不直接使用字符串拼接的方式，而是要使用 JSON 序列化接口呢？\n结果显而易见：JSON 序列化接口会一并将数据中的特殊字符进行转义，防止其破坏 JSON 原有结构。比如数据中含有双引号\u0026quot;特殊字符，序列化接口便会对双引号进行转义，最终结果类似于{\u0026quot;云原生\u0026quot;:\u0026quot;\\\u0026quot;Kubernetes\\\u0026quot;\u0026quot;}，否则，该场景下直接拼接的字符串会非法。\nJSON 转义 许多程序设计语言把双引号字符（\u0026quot;）用作字符串的分界符。反斜线（\\）转义字符提供了两种方式来把双引号字符置入字符串中，或者是使用转义序列\\\u0026quot;表示单个的\u0026quot;字符本身，而不是作为字符串分界符；或者是直接开始字符\u0026quot;的 16 进制编码值的转义序列\\x22来表示\u0026quot;，也可以使用 8 进制编码值的转义序列，如\\042。\n在 Python 中，下面的代码将会产生语法错误\n1 print \u0026#34;Cloud Navite \u0026#34;Hello World!\u0026#34;.\u0026#34;; 而另一段 Python 代码则会产生符合预期的结果\n1 print \u0026#34;Cloud Navite \\\u0026#34;Hello World!\\\u0026#34;.\u0026#34;; 在 JSON 中，也是如此：当使用 json 接口解析字符串{\u0026quot;云原生\u0026quot;:\u0026quot;\u0026quot;Kubernetes\u0026quot;\u0026quot;}时会报错，而解析经过转义的 JSON 字符串{\u0026quot;云原生\u0026quot;:\u0026quot;\\\u0026quot;Kubernetes\\\u0026quot;\u0026quot;}则会解析成功。\nJSON 转义机制如下图：\nJSON 中字符串针对于特殊字符需要 JSON 转义，它使用反斜杠\\进行转义 JSON 序列包括“\\\\、\\\u0026quot;、\\/、\\b、\\f、\\n、\\r、\\t，或者 Unicode16 进制转义字符（比如\\uD83D\\uDE02) JSON 字符串默认为 UTF-8 编码。可以通过观察前四个八位字节中的空值模式来确定一个八位字节流是 UTF-8、UTF-16（BE 或 LE）还是 UTF-32（BE 或 LE） JSON 语法 在讲具体案例之前，复习一下 JSON 语法，忘记的可以翻阅该章节。\nJSON 语法简单来说就是四条：\n数据在名称/值对中 数据由逗号分隔 花括号保存对象 方括号保存数组 声明：以下使用的对象均来自于以下内容\n1 2 3 4 5 6 7 8 9 10 { \u0026#34;virtualeNB\u0026#34;:[ {\u0026#34;virteNBName\u0026#34;:\u0026#34;virt1\u0026#34;, \u0026#34;virteNBNum\u0026#34;:5, \u0026#34;begineNBID\u0026#34;:0, \u0026#34;beginCtlPort\u0026#34;:6000, \u0026#34;beginDataPort\u0026#34;:7000, \u0026#34;virtIPNum\u0026#34;:5}, {\u0026#34;virteNBName\u0026#34;:\u0026#34;virt2\u0026#34;, \u0026#34;virteNBNum\u0026#34;:10, \u0026#34;begineNBID\u0026#34;:10, \u0026#34;beginCtlPort\u0026#34;:6000, \u0026#34;beginDataPort\u0026#34;:7000, \u0026#34;virtIPNum\u0026#34;:10} ], \u0026#34;eRAN\u0026#34;:[ {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB1\u0026#34;, \u0026#34;eRANID\u0026#34;:3002, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152}, {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB2\u0026#34;, \u0026#34;eRANID\u0026#34;:10000, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152} ] } 1. JSON 名称/值对 JSON 数据的书写格式是：名称：值，这样的一对。即名称在前，该名称的值在冒号后面。例如：\n1 \u0026#34;virteNBName\u0026#34;:\u0026#34;virt1\u0026#34; 这里的名称是\u0026quot;virteNBName\u0026quot;，值是\u0026quot;virt1\u0026quot;，他们均是字符串\n名称和值得类型可以有以下几种：\n数字（整数或浮点数） 字符串（在双引号中） 逻辑值（true 或 false） 数组（在方括号中） 对象（在花括号中） null 2. JSON 数据由逗号分隔 譬如：\n\u0026quot;virteNBName\u0026quot;:\u0026quot;virt1\u0026quot;, \u0026quot;virteNBNum\u0026quot;:5, \u0026quot;begineNBID\u0026quot;:0这几个对象之间就是使用逗号分隔。\n数组内的对象之间当然也是要用逗号分隔。只要是对象之间，分隔就是用逗号,。但是，要注意，对象结束的时候，不要加逗号。数组内也是，例如：\n1 2 3 4 [ {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB1\u0026#34;, \u0026#34;eRANID\u0026#34;:3002, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152}, {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB2\u0026#34;, \u0026#34;eRANID\u0026#34;:10000, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152}, ] 上面这个就是错误的，因为在数组中，两个对象之间需要逗号，但是到这个数组末尾了，不需要加逗号了。\n3. JSON 花括号保存对象 对象可以包含多个名称/值对，如：\n1 {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB1\u0026#34;, \u0026#34;eRANID\u0026#34;:3002, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152} 这一点也容易理解，与这条 JavaScript 语句等价：\n1 2 3 4 \u0026#34;eRANName\u0026#34; = \u0026#34;eNB1\u0026#34; \u0026#34;eRANID\u0026#34; = 3002 \u0026#34;ctlPort\u0026#34; = 36412 \u0026#34;dataPort\u0026#34; = 2152 4. JSON 方括号保存数组 数组可包含多个对象：\n1 2 3 4 \u0026#34;eRAN\u0026#34;:[ {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB1\u0026#34;, \u0026#34;eRANID\u0026#34;:3002, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152}, {\u0026#34;eRANName\u0026#34;:\u0026#34;eNB2\u0026#34;, \u0026#34;eRANID\u0026#34;:10000, \u0026#34;ctlPort\u0026#34;:36412, \u0026#34;dataPort\u0026#34;:2152} ] 在上面的例子中，对象 \u0026ldquo;eRAN\u0026rdquo; 是包含 2 个对象的数组。每个对象代表一条基站的记录。\n上面四条规则，就是 JSON 格式的所有内容。\n案例 一个由特殊字符导致 JSON 格式的 Nginx 访问日志/日志系统的 BUG 访问日志 access_log：Nginx 会将每个客户端访问其本身的请求以日志的形式记录到指定的日志文件里，以供分析用户的浏览或请求行为，或者可以用于快速分析故障所在。此功能由 ngx_http_log_module 模块负责。\n在 Nginx 文件中，访问日志 access.log 配置形如下文的格式：\n1 2 3 4 log_format main \u0026#39;$remote_addr [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log logs/access.log main buffer=32k; logs/access.log 指定访问日志路径 log_format 定义访问日志格式 buffer=32k 是日志缓冲区大小 访问日志 access_log 其通过格式化输出 nginx 变量以及拼接字符串的方式打印日志。\n在云原生时代，Nginx 运维的最佳实践之一就是将 Nginx 访问日志采用 EFK 架构 (Elasticsearch+Filebeat+Kibana)，通过收集和管理访问日志，提供统一的检索功能，这样做不仅可以提高诊断效率，而且可以全面了解系统情况，避免被动事后救火。\n通常，为了方便分析，会将 Nginx 访问日志输出为 JSON 字符串，其配置如下：\n1 2 3 4 log_format main \u0026#39;{\u0026#34;remote_addr\u0026#34;:\u0026#34;$remote_addr\u0026#34;,\u0026#34;time_local\u0026#34;:\u0026#34;$time_local\u0026#34;,\u0026#34;request\u0026#34;:\u0026#34;$request\u0026#34;,\u0026#39; \u0026#39;\u0026#34;status\u0026#34;:\u0026#34;$status\u0026#34;,\u0026#34;bytes_sent\u0026#34;:\u0026#34;$bytes_sent\u0026#34;,\u0026#34;http_referer\u0026#34;:\u0026#34;$http_referer\u0026#34;,\u0026#39; \u0026#39;\u0026#34;http_user_agent\u0026#34;:\u0026#34;$http_user_agent\u0026#34;,\u0026#34;http_x_forwarded_for\u0026#34;:\u0026#34;$http_x_forwarded_for\u0026#34;}\u0026#39;; access_log logs/access.log main buffer=32k; 乍一看，这样的配置没什么问题。但再深入思考，生成 JSON 字符串的标准做法是调用 JSON 序列化接口，而 Nginx 访问日志是直接格式化拼接字符串，故一旦访问日志中出现特殊字符（比如双引号\u0026quot;），就会导致整行访问日志解析出错，影响接下来的日志分析系统对访问日志的数据查找、服务诊断和数据分析。\n为了解决 JSON 转义的问题，Nginx 在 1.11.8 版本中给日志格式 log_format 新增了序列化配置 escape=json，其格式为：\n1 2 3 4 Syntax:\tlog_format name [escape=default|json|none] string ...; Default:\tlog_format combined \u0026#34;...\u0026#34;; Context:\thttp 当配置为 escape=json 时，JSON 字符串中所有不允许的字符都将被转义：\n\u0026quot;和/字符被转义为/\u0026quot;和// 值小于 32 的字符被转义“\\n”, “\\r”, “\\t”, “\\b”, “\\f”, or “\\u00XX” 所以，正确的 log_format 配置为\n1 2 3 log_format main escape=json \u0026#39;{\u0026#34;remote_addr\u0026#34;:\u0026#34;$remote_addr\u0026#34;,\u0026#34;time_local\u0026#34;:\u0026#34;$time_local\u0026#34;,\u0026#34;request\u0026#34;:\u0026#34;$request\u0026#34;,\u0026#39; \u0026#39;\u0026#34;status\u0026#34;:\u0026#34;$status\u0026#34;,\u0026#34;bytes_sent\u0026#34;:\u0026#34;$bytes_sent\u0026#34;,\u0026#34;http_referer\u0026#34;:\u0026#34;$http_referer\u0026#34;,\u0026#39; \u0026#39;\u0026#34;http_user_agent\u0026#34;:\u0026#34;$http_user_agent\u0026#34;,\u0026#34;http_x_forwarded_for\u0026#34;:\u0026#34;$http_x_forwarded_for\u0026#34;}\u0026#39;; 当然，因为 JSON 转义导致的 BUG 不止这一个，近期遇到的另一个 BUG 也是因为前人实现的代码实现不规范，其逻辑是将收到的请求以字符串拼接的方式构造 JSON 串，导致一旦请求中带有双引号\u0026quot;或其他特殊字符，就必定出现 BUG。\nJSON 与其他格式的比较 JSON vs XML JSON 与 XML 最大的不同在于 XML 是一个完整的标记语言，而 JSON 不是。这使得 XML 在程序判读上需要比较多的功夫。主要的原因在于 XML 的设计理念与 JSON 不同。XML 利用标记语言的特性提供了绝佳的延展性（如 XPath），在数据存储，扩展及高级检索方面具备对 JSON 的优势，而 JSON 则由于比 XML 更加小巧，以及浏览器的内建快速解析支持，使得其更适用于网络数据传输领域。\n从转义角度来看，XML 标签名不能包含任何字符!\u0026quot;#$%\u0026amp;'()*+,/;\u0026lt;=\u0026gt;?@[\\]^{|}~，也不能包含空格字符，不能以-、.或数字数字开头，而 JSON 键可以（引号和反斜杠必须转义）。\nJSON vs YAML JSON 格式简单易上手，但没有了 YAML 的一目了然，尤其是 JSON 数据很长的时候，会让人陷入繁琐复杂的数据节点查找中。通常我会使用在线 JSON 格式化工具，来更方便的对 JSON 数据进行节点查找和解析。\n个人认为，YAML 几乎将 JSON 秒成渣渣，这里直接引用 YAML 官方文档 关于 YAML 的总结：\nYAML 的可读性好 YAML 和脚本语言的交互性好 YAML 使用实现语言的数据类型 YAML 有一个一致的信息模型 YAML 易于实现 YAML 可以基于流来处理 YAML 表达能力强，扩展性好 YAML 可以写注释 There Is One More Thing 从结构上看，不仅仅是 JSON、YAML、XML，大部分或者所有的数据（data）最终都可以分解成三种类型：\n第一种类型是标量（scalar），也就是一个单独的字符串（string）或数字（numbers），比如\u0026quot;云原生\u0026quot;这个单独的词。\n第二种类型是序列（sequence），也就是若干个相关的数据按照一定顺序并列在一起，又叫做数组（array）或列表（List），比如[\u0026quot;Kubernetes\u0026quot;, \u0026quot;Istio\u0026quot;]。\n第三种类型是映射（mapping），也就是一个名/值对（Name/value），即数据有一个名称，还有一个与之相对应的值，这又称作散列（hash）或字典（dictionary），比如\u0026quot;CloudNative\u0026quot;: \u0026quot;Kubernetes\u0026quot;。\n参考 JSON 官网 JSON 维基百科 数据类型和 Json 格式\u0026ndash;阮一峰 YAML Ain’t Markup Language (YAML™) Version 1.1 World Wide Web Consortium 自己最初了解 JSON 时总结的一篇文章 ","permalink":"https://miss-you.github.io/posts/json-and-escaping/","summary":"\u003ch1 id=\"为什么-json-需要转义\"\u003e为什么 JSON 需要转义？\u003c/h1\u003e\n\u003cp\u003e[TOC]\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e适合人群：入门级\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"json-和-json-转义\"\u003eJSON 和 JSON 转义\u003c/h2\u003e\n\u003cp\u003e21 世纪初，Douglas Crockford 寻找一种简便的数据交换格式，能够在服务器之间交换数据。当时通用的数据交换语言是 XML，但是 Douglas Crockford 觉得 XML 的生成和解析都太麻烦，所以他提出了一种简化格式，也就是 JSON。\u003c/p\u003e\n\u003cp\u003eJSON 其结构形如 \u003ccode\u003e{\u0026quot;云原生\u0026quot;:\u0026quot;Kubernetes\u0026quot;}\u003c/code\u003e，可以很直观的使用字符串表示对象或数据结构。对象或数据结构使用序列化接口转换成 JSON 字符串，比如 Golang 中的\u003ccode\u003ejson.Marshal\u003c/code\u003e接口。\u003c/p\u003e\n\u003cp\u003e你可能会有这样的疑问：既然 JSON 字符串结构简单，为什么不直接使用字符串拼接的方式，而是要使用 JSON 序列化接口呢？\u003c/p\u003e\n\u003cp\u003e结果显而易见：JSON 序列化接口会一并将数据中的特殊字符进行转义，防止其破坏 JSON 原有结构。比如数据中含有双引号\u003ccode\u003e\u0026quot;\u003c/code\u003e特殊字符，序列化接口便会对双引号进行转义，最终结果类似于\u003ccode\u003e{\u0026quot;云原生\u0026quot;:\u0026quot;\\\u0026quot;Kubernetes\\\u0026quot;\u0026quot;}\u003c/code\u003e，否则，该场景下直接拼接的字符串会非法。\u003c/p\u003e\n\u003ch3 id=\"json-转义\"\u003eJSON 转义\u003c/h3\u003e\n\u003cp\u003e许多程序设计语言把双引号字符\u003ccode\u003e（\u0026quot;）\u003c/code\u003e用作字符串的分界符。反斜线\u003ccode\u003e（\\）\u003c/code\u003e转义字符提供了两种方式来把双引号字符置入字符串中，或者是使用转义序列\u003ccode\u003e\\\u0026quot;\u003c/code\u003e表示单个的\u003ccode\u003e\u0026quot;\u003c/code\u003e字符本身，而不是作为字符串分界符；或者是直接开始字符\u003ccode\u003e\u0026quot;\u003c/code\u003e的 16 进制编码值的转义序列\u003ccode\u003e\\x22\u003c/code\u003e来表示\u003ccode\u003e\u0026quot;\u003c/code\u003e，也可以使用 8 进制编码值的转义序列，如\u003ccode\u003e\\042\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在 Python 中，下面的代码将会产生语法错误\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprint \u0026#34;Cloud Navite \u0026#34;Hello World!\u0026#34;.\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e而另一段 Python 代码则会产生符合预期的结果\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprint \u0026#34;Cloud Navite \\\u0026#34;Hello World!\\\u0026#34;.\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在 JSON 中，也是如此：当使用 json 接口解析字符串\u003ccode\u003e{\u0026quot;云原生\u0026quot;:\u0026quot;\u0026quot;Kubernetes\u0026quot;\u0026quot;}\u003c/code\u003e时会报错，而解析经过转义的 JSON 字符串\u003ccode\u003e{\u0026quot;云原生\u0026quot;:\u0026quot;\\\u0026quot;Kubernetes\\\u0026quot;\u0026quot;}\u003c/code\u003e则会解析成功。\u003c/p\u003e","title":"为什么 JSON 需要转义"},{"content":" 生日的时候飞去成都参观成都博物馆正在展出的西方绘画史，庆祝生日，感慨良多，记录下自己的感想\n画作主题受限于思想。被神学/基督教控制的文艺复兴初期，画作只能是神祗，颜料也尽显奢华；随着西方文艺复兴给人们带来的思想解放，大家的主题不再局限于神祗，更注重于人本身，比如充满情趣的田园画，肖像画/自画像；随着科技进步，颜料可以带出门，派生出风景画派；大家生活水平提升，画画不再是一定是谋生手段（为达官贵人画肖像画可以填饱肚子），可以画自己想画的东西，主题百花齐放。 吃饱了才能搞艺术。西方文艺复兴以来其艺术中心的变迁：意大利/罗马（文艺复兴）-\u0026gt;荷兰黄金时代（荷兰小画派）-\u0026gt;巴黎-\u0026gt;西欧以及美国百花齐放百家争鸣，其实也对应的是西方十四世纪以来的经济中心的变迁：从东西罗马纵横捭阖，荷兰/西班牙黄金一代/大航海时代，法兰西帝国和日不落帝国，第一次和第二次工业革命英国和美国变为世界的两极。 一个人的成功不仅要靠自身的努力和天分，还要考虑历史的进程以及找对师父。要有天分，很多大家早在十几岁二十几岁其绘画天赋便锋芒毕露；要靠个人努力，大部分在展上的画师无一不是耗费了巨大的精力投入在艺术创作中，年少成名的画师也是十一二岁便要在画师家里当学徒，兢兢业业；要站在巨人的肩膀上，要师从名师/大家，名画家的师父往往也很有名，自学成才的很少，比如高更（月亮与六便士的主角）。 画作充满美感。个人艺术细胞不足，对于艺术性的感受就是，不论是端庄严谨的教会画、轻松愉快的田园画、栩栩如生的肖像画和风景画、百花齐放百家争鸣的现实主义、浪漫主义、象征主义画作，都很美。在场看跟在网上或书上看的感觉完全不一样。 参考链接 欧洲绘画五百年丨高更：被画画拐上“歧路”，却抵达了艺术的神坛\n","permalink":"https://miss-you.github.io/posts/history-of-western-painting/","summary":"\u003cblockquote\u003e\n\u003cp\u003e生日的时候飞去成都参观成都博物馆正在展出的西方绘画史，庆祝生日，感慨良多，记录下自己的感想\u003c/p\u003e\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e画作主题受限于思想。被神学/基督教控制的文艺复兴初期，画作只能是神祗，颜料也尽显奢华；随着西方文艺复兴给人们带来的思想解放，大家的主题不再局限于神祗，更注重于人本身，比如充满情趣的田园画，肖像画/自画像；随着科技进步，颜料可以带出门，派生出风景画派；大家生活水平提升，画画不再是一定是谋生手段（为达官贵人画肖像画可以填饱肚子），可以画自己想画的东西，主题百花齐放。\u003c/li\u003e\n\u003cli\u003e吃饱了才能搞艺术。西方文艺复兴以来其艺术中心的变迁：意大利/罗马（文艺复兴）-\u0026gt;荷兰黄金时代（荷兰小画派）-\u0026gt;巴黎-\u0026gt;西欧以及美国百花齐放百家争鸣，其实也对应的是西方十四世纪以来的经济中心的变迁：从东西罗马纵横捭阖，荷兰/西班牙黄金一代/大航海时代，法兰西帝国和日不落帝国，第一次和第二次工业革命英国和美国变为世界的两极。\u003c/li\u003e\n\u003cli\u003e一个人的成功不仅要靠自身的努力和天分，还要考虑历史的进程以及找对师父。要有天分，很多大家早在十几岁二十几岁其绘画天赋便锋芒毕露；要靠个人努力，大部分在展上的画师无一不是耗费了巨大的精力投入在艺术创作中，年少成名的画师也是十一二岁便要在画师家里当学徒，兢兢业业；要站在巨人的肩膀上，要师从名师/大家，名画家的师父往往也很有名，自学成才的很少，比如高更（月亮与六便士的主角）。\u003c/li\u003e\n\u003cli\u003e画作充满美感。个人艺术细胞不足，对于艺术性的感受就是，不论是端庄严谨的教会画、轻松愉快的田园画、栩栩如生的肖像画和风景画、百花齐放百家争鸣的现实主义、浪漫主义、象征主义画作，都很美。在场看跟在网上或书上看的感觉完全不一样。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-1.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-2.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-3.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-4.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-5.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-6.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-7.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-8.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-9.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-10.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-11.jpg\"\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/westpaint-12.jpg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"参考链接\"\u003e参考链接\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://mp.weixin.qq.com/s/48y2HfTmFE8g_ALr4eIhBA\"\u003e欧洲绘画五百年丨高更：被画画拐上“歧路”，却抵达了艺术的神坛\u003c/a\u003e\u003c/p\u003e","title":"《欧洲绘画五百年》参观有感"},{"content":"从 nginx 热更新聊一聊 Golang 中的热更新 静态语言在服务器编程时都会遇到这样的问题：如何保证已有的连接服务不中断同时又升级版本？ 最近花了点时间看了下 nginx 热更新代码流程，想了下结合之前的经验一并总结下热更新\n热更新是什么？ 举个例子，你现在在坐卡车，卡车开到了 150KM/H\n然后，有个轮胎，爆了\n然后，司机说，你就直接换吧，我不停车。你小心点换\n嗯。就这个意思\n网关中的热更新 服务程序热更新这个问题在层 7 网关中尤其严重，网关中承载着大量的请求，包括 HTTP/HTTPS 短连接、HTTP/HTTPS 长连接、甚至是 websocket 这种超长连接（websocket 通常连接时间会很长，十几分钟到几天不等）。服务进程热更新是非常有必要的。\n网关作为一个基础组件，需要保证高可用，是很难将其先停下来再更新的；\n有人说可以使用负载均衡将需要更新的组件先隔离，再停机更新，但是如果是一个很小的集群没有负载均衡呢，又或者这样手动一台一台升级也着实麻烦，部分情况下就算隔离了也不过是不会有新的连接过来，旧的连接/请求依旧需要处理完成，否则就会造成部分服务不可用\n不过实际上线上操作是集群隔离加热更新一起操作\nnginx 热更新 (Upgrading Executable on the Fly) nginx [engine x] 是 Igor Sysoev 编写的一个 HTTP 和反向代理服务器，另外它也可以作为邮件代理服务器。 它已经在众多流量很大的俄罗斯网站上使用了很长时间，这些网站包括 Yandex、Mail.Ru、VKontakte，以及 Rambler。据 Netcraft 统计，在 2012 年 8 月份，世界上最繁忙的网站中有 11.48%使用 Nginx 作为其服务器或者代理服务器。\nNginX 采用 Master/Worker 的多进程模型，Master 进程负责整个 NginX 进程的管理。Nginx 的模块化、热更新、Http 处理流程、日志等机制都非常经典。这里将会简要介绍一下热更新的机制\nnginx 热升级流程 步骤 1、升级 nginx 二进制文件，需要先将新的 nginx 可执行文件替换原有旧的 nginx 文件，然后给 nginx master 进程发送 USR2 信号，告知其开始升级可执行文件；nginx master 进程会将老的 pid 文件增加。oldbin 后缀，然后拉起新的 master 和 worker 进程，并写入新的 master 进程的 pid。\n1 2 3 4 5 6 7 8 9 UID PID PPID C STIME TTY TIME CMD root 4584 1 0 Oct17 ? 00:00:00 nginx: master process /usr/local/apigw/apigw_nginx/nginx root 12936 4584 0 Oct26 ? 00:03:24 nginx: worker process root 12937 4584 0 Oct26 ? 00:00:04 nginx: worker process root 12938 4584 0 Oct26 ? 00:00:04 nginx: worker process root 23692 4584 0 21:28 ? 00:00:00 nginx: master process /usr/local/apigw/apigw_nginx/nginx root 23693 23692 3 21:28 ? 00:00:00 nginx: worker process root 23694 23692 3 21:28 ? 00:00:00 nginx: worker process root 23695 23692 3 21:28 ? 00:00:00 nginx: worker process 步骤 2、在此之后，所有工作进程（包括旧进程和新进程）将会继续接受请求。这时候，需要发送 WINCH 信号给 nginx master 进程，master 进程将会向 worker 进程发送消息，告知其需要进行 graceful shutdown，worker 进程会在连接处理完之后进行退出。\n1 2 3 4 5 6 7 UID PID PPID C STIME TTY TIME CMD root 4584 1 0 Oct17 ? 00:00:00 nginx: master process /usr/local/apigw/apigw_nginx/nginx root 12936 4584 0 Oct26 ? 00:03:24 nginx: worker process root 12937 4584 0 Oct26 ? 00:00:04 nginx: worker process root 12938 4584 0 Oct26 ? 00:00:04 nginx: worker process root 23692 4584 0 21:28 ? 00:00:00 nginx: master process /usr/local/apigw/apigw_nginx/nginx #若旧的 worker 进程还需要处理连接，则 worker 进程不会立即退出，需要待消息处理完后再退出 步骤 3、经过一段时间之后，将会只会有新的 worker 进程处理新的连接。\n注意，旧 master 进程并不会关闭它的 listen socket；因为如果出问题后，需要回滚，master 进程需要法重新启动它的 worker 进程。\n步骤 4、如果升级成功，则可以向旧 master 进程发送 QUIT 信号，停止老的 master 进程；如果新的 master 进程（意外）退出，那么旧 master 进程将会去掉自己的 pid 文件的。oldbin 后缀。\nnginx 热更新相关信号 master 进程相关信号\n1 2 3 USR2\t升级可执行文件 WINCH\t优雅停止 worker 进程 QUIT\t优雅停止 master 进程 worker 进程相关信号\n1 2 TERM, INT\t快速退出进程 QUIT\t优雅停止进程 nginx 相关代码走读 1、USR2 流程 master 收到 USR2 信号后，会拉起新的 master nginx 进程；\n新的 master 进程拉起新的 worker 进程；\n最终，老的 worker 进程和新的 worker 进程共用一个 listen socket，接受连接\n若打开了 REUSEPORT 开关，则 socket 继承情况会有些区别，感兴趣的可以自行翻看代码\n2、WINCH 流程 master 进程收到 WINCH 信号后，会给各个 worker 进程发送 QUIT 信号，让其优雅退出；master 进程并不再处理新的连接。\nworker graceful shutdown 流程，关闭 listen socket，不再处理新的连接；待已有连接处理完后，清理连接，退出进程。\n3、QUIT 流程 master graceful shutdown 流程，没什么好说的\nnginx 升级过程中若出现问题如何回滚？ nginx 热升级 QA 1、如何防止多次可执行文件触发热更新？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 相关代码 ngx_signal_handler --\u0026gt; case ngx_signal_value(NGX_CHANGEBIN_SIGNAL): if (ngx_getppid() == ngx_parent || ngx_new_binary \u0026gt; 0) { /* * Ignore the signal in the new binary if its parent is * not changed, i.e. the old binary\u0026#39;s process is still * running. Or ignore the signal in the old binary\u0026#39;s * process if the new binary\u0026#39;s process is already running. */ action = \u0026#34;, ignoring\u0026#34;; ignore = 1; break; } ngx_change_binary = 1; action = \u0026#34;, changing binary\u0026#34;; break; 若老的 nginx 还在，nginx 无法进行热更新二进制文件\n2、nginx 升级过程中，发现新的可执行文件出现问题该如何回滚？\na、向旧 master 进程发送 HUP 信号。旧进程将启动新的 worker 进程，而且不会重新读取配置。之后，通过向新的主 master 进程发送 QUIT 信号，可以优雅地关闭新的 master 和 worker 进程。 b、将 TERM 信号发送到新的 master 进程，然后新的 master 进程将向其 worker 进程发送一条消息，让它们立即退出，这种退出不是 graceful shutdown。当新的 master 进程退出时，旧的 master 进程将启动新的 worker 进程。 c、如果新的进程没有退出，则应该向它们发送终止 KILL 信号。当新的 master 进程退出时，旧的 master 进程将启动新的工作进程。 3、什么是 graceful shutdown\n本文中的 graceful shutdown 是指 server 不再处理新的连接，但是进程不会立即退出，待所有连接断开后再退出进程。\n总结一下个人在 nginx 二进制文件热升级时用的命令 1 2 3 4 5 6 7 8 9 10 11 cd /usr/local/nginx cp nginx nginx_bak mv /data/nginx/nginx ./nginx #需要使用 mv 来更新二进制文件 ./nginx -t #尝试启动，查看其加载配置文件等初始化功能是否正常 netstat -anp | grep -E \u0026#34;80|443\u0026#34; | grep nginx #检查连接状态 kill -USR2 `cat /usr/local/nginx/nginx.pid` #升级 nginx 可执行文件，此时会有两组 nginx master 和 worker 进程 kill -WINCH `cat /usr/local/nginx/nginx.pid.oldbin` #新的可执行文件启动 ok，且能够正常处理数据流，告知老的 master 进程去通知其 worker 进程进行优雅退出 ... kill -QUIT `cat /usr/local/nginx/nginx.pid.oldbin` #待所有的老的 nginx worker 进程优雅退出后（处理完连接），停止老的 master 进程 TODO：nginx 还会有依赖的 so 文件的热升级\u0026ndash;其实更应该属于后台进程的 so 文件热升级流程，我在使用它的时候也踩过坑\u0026ndash;主要原因还是操作不规范，对 so 其加载运行原理不够熟悉导致\n热升级 实际上，静态语言后端 server 有一套固定的热升级（单进程）流程，其基本流程如下：\n若需要支持热升级的是多进程，那么 nginx 的热升级过程是最值得参考的\n1、通过调用 fork/exec 启动新的版本的进程，\n2、子进程调用接口获取从父进程继承的 socket 文件描述符重新监听 socket\n3、在此过程中，不会对用户请求造成任何中断。\nnginx 的热升级流程也是类似，只不过由于 nginx 工作是多进程，故它会先启动新版本的一组 master/worker 进程；\n然后停止老的 worker 进程，让其不处理连接，由新的 worker 进程来处理连接；\n升级完毕后，即可退出老的 master 进程，热升级完成。\n热更新 热更新目标：\n1、正在处理中的连接/服务/请求不能立即中断，需要继续提供服务 2、socket 对用户来说要保持可用，可以接受新的请求 直接沿用上篇的思路，热更新（单进程）流程，其基本流程如下：\n1、用新的 bin 文件去替换老的 bin 文件 2、发送信号告知 server 进程（通常是 USR2 信号），进行平滑升级 3、server 进程收到信号后，通过调用 fork/exec 启动新的版本的进程 4、子进程调用接口获取从父进程继承的 socket 文件描述符重新监听 socket 5、老的进程不再接受请求，待正在处理中的请求处理完后，进程自动退出 6、子进程托管给 init 进程 我们可以按照这个思路完成一个简单的可以热更新的 http server\n简易的 http server 首先，我们需要一个最简单的 http server\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func main() { fmt.Println(\u0026#34;Hello World!\u0026#34;) var err error // 注册 http 请求的处理方法 http.HandleFunc(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\u0026#34;Hello world!\u0026#34;)) }) // 在 8086 端口启动 http 服务，其内部有一个循环 accept 8086 端口 // 每当新的 HTTP 请求过来则开一个协程处理 err = http.ListenAndServe(\u0026#34;localhost:8086\u0026#34;, nil) if err != nil { log.Println(err) } } fork 一个新的进程 在 go 语言里面可以有很多种方法 fork 一个新的进程，但是在这里我更倾向于推荐 exec.Command 接口来启动一个新的进程。因为 Cmd struct 中有一个 ExtraFiles 变量，子进程可以通过它直接继承文件描述符 fd。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func forkProcess() error { var err error files := []*os.File{gListen.File()} //demo only one //.File() path := \u0026#34;/Users/yousa/work/src/graceful-restart-demo/graceful-restart-demo\u0026#34; args := []string{ \u0026#34;-graceful\u0026#34;, } env := append( os.Environ(), \u0026#34;ENDLESS_CONTINUE=1\u0026#34;, ) env = append(env, fmt.Sprintf(`ENDLESS_SOCKET_ORDER=%s`, \u0026#34;0,127.0.0.1\u0026#34;)) cmd := exec.Command(path, args...) //cmd := exec.Command(path, \u0026#34;-graceful\u0026#34;, \u0026#34;true\u0026#34;) cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr cmd.ExtraFiles = files cmd.Env = env err = cmd.Start() if err != nil { log.Fatalf(\u0026#34;Restart: Failed to launch, error: %v\u0026#34;, err) return err } return nil } 代码浅析：\n在上面的 files 是存储父进程的文件描述符，path 的内容是新的要替换的可执行文件的路径。\n重要的一点是，.File() 返回一个 dup(2) 的文件描述符。这个重复的文件描述符不会设置 FD_CLOEXEC 标志，这个文件描述符操作容易出错，容易被在子进程中被错误关闭。\n在其他语言（或者 go 里面）里面你可能通过使用命令行将文件描述符传递给子进程，在这里比较推荐使用 ExtraFile 传递 fd。不过 ExtraFiles 在 windows 中不支持。\nargs 中传递的-graceful 参数是告诉子进程这是优雅热升级的一部分，这样子进程可以通过它知道，自己需要重用套接字而不是重新打开一个新的套接字\n子进程初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 func main() { fmt.Println(\u0026#34;Hello World!\u0026#34;) ... var gracefulChild bool var netListen net.Listener var err error args := os.Args ... if len(args) \u0026gt; 1 \u0026amp;\u0026amp; args[1] == \u0026#34;-graceful\u0026#34; { gracefulChild = true } else { gracefulChild = false } fmt.Println(\u0026#34;gracefulChild:\u0026#34;, gracefulChild) if gracefulChild { //重用套接字 log.Print(\u0026#34;main: Listening to existing file descriptor 3.\u0026#34;) f := os.NewFile(3, \u0026#34;\u0026#34;) netListen, err = net.FileListener(f) } else { log.Print(\u0026#34;main: Listening on a new file descriptor.\u0026#34;) netListen, err = net.Listen(\u0026#34;tcp\u0026#34;, gServer.Addr) } if err != nil { log.Fatal(err) return } ... } args 用于解析入参，gracefulChild 表示进程自己是否是子进程（对应到 fork 中的-graceful）（这里更推荐 flag.BoolVar，但是写 demo 的时候使用起来有些问题，故临时使用 args）\nnet.FileListener 重用套接字，ExtraFiles 中传递的套接字，从 idx 3 的位置开始获取。\n给父进程发送信号停止父进程 1 2 3 4 5 6 7 8 9 10 11 12 func main() { //init ... if gracefulChild { syscall.Kill(syscall.Getppid(), syscall.SIGTERM) log.Println(\u0026#34;Graceful shutdown parent process.\u0026#34;) } //start http server. ... } 给父进程发送 graceful shutdown 信号\n优雅停止父进程 等待请求超时或者处理完成退出进程\n第一眼给人感觉，不知道该如何下手做热升级。\n我们需要去跟踪连接，故想到的是有没有钩子函数来解决连接的 accept 和 close，让人觉得 Golang 标准 http 包没有提供任何钩子来处理 Accept() 和 Close()，这里恰恰是 golang 的 interface 的魅力所在。\ninterface 基础知识请自行补充\n我们需要一个 sync.WaitGroup 来跟踪已经打开的连接，每新 accept 一个连接则让其加一，每当连接断开则减一。定义一个 listener struct 并实现相应的 Accept()、Close()、Addr() 等方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 type demoListener struct { net.Listener stopped bool stop chan error } func newDemoListener(listen net.Listener) (demoListen *demoListener) { demoListen = \u0026amp;demoListener{ Listener: listen, stop: make(chan error), } return } func (listen *demoListener) Accept() (conn net.Conn, err error) { conn, err = listen.Listener.Accept() if err != nil { return } conn = demoConn{Conn: conn} gWg.Add(1) return } func (listen *demoListener) Close() error { if listen.stopped { return syscall.EINVAL } listen.stopped = true return listen.Listener.Close() //停止接受新的连接 } //get fd func (listen *demoListener) File() *os.File { // returns a dup(2) - FD_CLOEXEC flag *not* set tcpListen := listen.Listener.(*net.TCPListener) fd, _ := tcpListen.File() return fd } demoListener 定义的时候，通过匿名结构体（可以理解为是一种组合），继承了 net.Listener 的结构和方法，下面的 Accept 和 Close 则重载了 net.Listener 的 Accept 和 Close 方法。\nListener 在每个 Accept() 上都增加了一个等待组。\nnewDemoListener() 是 Listener 的构造函数。\nFile() 方法是从 Listener 中获取文件描述符 fd\n当然，我们需要重载连接 net.Conn 的 Close() 方法，在连接断开时，将 wg 减一\n1 2 3 4 5 6 7 8 9 10 11 12 type demoConn struct { net.Conn } func (conn demoConn) Close() error { err := conn.Conn.Close() if err == nil { gWg.Done() } return nil } 最后，有可能客户端已经很长时间不发消息了，但是他不主动断开连接；为了避免这种情况，server 端通常认为这种是连接超时，在一定时间后会将连接关闭，故初始化 http.Server 时比较建议这样：\n1 2 3 4 5 6 7 gServer = \u0026amp;http.Server{ Addr: \u0026#34;0.0.0.0:8086\u0026#34;, ReadTimeout: 60 * time.Second, WriteTimeout: 60 * time.Second, MaxHeaderBytes: 1 \u0026lt;\u0026lt; 16, Handler:\tdemoHandler{}, } 注意：若使用的 go 版本在 1.8 版本以上（包括），http 包已经支持优雅退出，直接调用 Shutdown() 接口即可，更为简单。\n关闭 listener 连接和监控信号的部分这里便不再赘述，文末附有源码，有兴趣可以看看。\n测试结果：\n启动 server，发送 http 请求\n1 2 3 4 5 6 7 YOUSALI-MB0:~ yousa$ curl -i http://localhost:8086 HTTP/1.1 200 OK Date: Mon, 05 Nov 2018 08:11:17 GMT Content-Length: 17 Content-Type: text/plain; charset=utf-8 Hello Tencent! 发送 usr2 信号给 server\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 YOUSALI-MB0:graceful-restart-demo yousa$ ps -ef | grep grace 501 50199 41134 0 4:10 下午 ttys002 0:00.01 ./graceful-restart-demo 501 50252 44808 0 4:11 下午 ttys003 0:00.00 grep grace YOUSALI-MB0:graceful-restart-demo yousa$ kill -USR2 50199 YOUSALI-MB0:graceful-restart-demo yousa$ ps -ef | grep grace 501 50253 1 0 4:11 下午 ttys002 0:00.01 /Users/yousa/work/src/graceful-restart-demo/graceful-restart-demo -graceful 501 51460 44808 0 4:37 下午 ttys003 0:00.00 grep grace ## 终端打印 Hello World! gracefulChild: false 2018/11/05 16:10:16 main: Listening on a new file descriptor. 2018/11/05 16:11:10 50199 Received SIGUSR2. Hello World! gracefulChild: true 2018/11/05 16:11:10 main: Listening to existing file descriptor 3. 2018/11/05 16:11:10 Graceful shutdown parent process. 2018/11/05 16:11:10 50199 Received SIGTERM. 待升级后发送消息\n1 2 3 4 5 6 7 YOUSALI-MB0:~ yousa$ curl -i http://localhost:8086 HTTP/1.1 200 OK Date: Mon, 05 Nov 2018 08:11:44 GMT Content-Length: 14 Content-Type: text/plain; charset=utf-8 Happy 20th birthday! 遇到的问题 1、翻了下代码，并没有看到父进程如何退出？是怎样的流程？\n先看一下 http ListenAndServe 接口，它会调用 net.Listen 和 serve.Serve 两个函数，net.Listen 是 listen 端口。\nServe 代码如下，它是一个 for 循环，Accept 一个新的连接后会用一个新的协程来处理请求；当 listen 的端口被关闭或者异常后，该 Serve 循环便会跳出\n另外，也可以在这里看到，如果让 http server 接入协程池则可以重载 http.Server 的 Serve，在收到新的连接后，从协程池中分配一个协程供新的连接使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func (srv *Server) Serve(l net.Listener) error { defer l.Close() var tempDelay time.Duration // how long to sleep on accept failure for { rw, e := l.Accept() if e != nil { if ne, ok := e.(net.Error); ok \u0026amp;\u0026amp; ne.Temporary() { if tempDelay == 0 { tempDelay = 5 * time.Millisecond } else { tempDelay *= 2 } if max := 1 * time.Second; tempDelay \u0026gt; max { tempDelay = max } srv.logf(\u0026#34;http: Accept error: %v; retrying in %v\u0026#34;, e, tempDelay) time.Sleep(tempDelay) continue } return e } tempDelay = 0 c, err := srv.newConn(rw) if err != nil { continue } c.setState(c.rwc, StateNew) // before Serve can return go c.serve() } } 再看一下 shutdownProcess 函数，故在这里关闭 listen socket 后，http Serve 处理请求的主循环便会退出\n1 2 3 4 5 6 func shutdownProcess() error { gServer.SetKeepAlivesEnabled(false) gListen.Close() log.Println(\u0026#34;shutdownProcess success.\u0026#34;) return nil } 将 listen socket 关闭后，main 函数中的 gServer.Serve(gListen) 便会退出，但实际上已有的连接/服务并没有处理完成，需要使用 waitgroup 等待连接处理完成后，进程再退出。\ngithub 上的已有开源方案 解决 golang http server 热更新问题，有了基本的思路之后，想到的是去 github 看下有没有稳定的解决方案。找到了如下三个库：\nfvbock/endless - Zero downtime restarts for golang HTTP and HTTPS servers. (for golang 1.3+) facebookgo/grace - Grace provides a library that makes it easy to build socket based servers that can be gracefully terminated \u0026amp; restarted (that is, without dropping any connections). jpillora/overseer - Overseer is a package for creating monitorable, gracefully restarting, self-upgrading binaries in Go (golang) 其实除了这些外，还有一些支持热更新的库，但是更新时间过老，在这里就不作讨论了。 当然，非常火爆的框架比如 beego 等，也支持热升级/gracefun shutdown，但是由于嵌入到了 beego 中，故本章中不作讨论，有兴趣的可以自行去看看。\n实现浅析 我们使用官方的例子来简单分析其流程并简单比较其异同\n1、各个开源库 demo 代码 demo 代码较为冗长，很影响阅读观感，故贴在了最后的附录中\n2、对比 操作步骤：\n编译 demo 示例，启动示例进程，记录其 pid 修改内容 (Hello Tencent 初始内容，修改为 Happy 20th Birthday！且请求处理均需要 sleep 10-20 秒），重新构建。 发送请求，发送热升级信号，再发送请求，对比两次请求内容 对比进程热升级前后的 pid，是否与之前一致 结果对比\n第三方库 第一次请求返回 第二次请求返回 操作前进程 pid 操作后进程 pid facebookgo/grace Hello Tencent Happy 20th Birthday！ 41992 41998 fvbock/endless Hello Tencent Happy 20th Birthday！ 41200 41520 jpillora/overseer Hello Tencent Happy 20th Birthday！ 43424 43424 原理浅析：\ngrace 和 endless 的热升级方法与本文重点讲述的方法一致，基本是 fork 一个子进程，子进程 listen 端口，父进程优雅退出，这里便不再赘述\noverseer 的热升级与 grace/endless 有些不同，由于作者很久不更新了（差不多 1-2 年），也找不到比较好的介绍文章，故这里只能简要贴一下其 github 上对 overseer 的原理介绍。由于不是本文核心介绍内容，放在附录中。 overseer 用一个主进程管理平滑重启，子进程处理连接，保持主进程 pid 不变；\n优缺点对比：\ngrace 库支持 net tcp 热升级以及 http 热升级，endless 仅支持 http 热升级 grace 库接入第三方 http server 较麻烦（比如 fasthttp、gin 等）；endless 接入则只需要替换 ListenAndServe 即可（endless 继承/重写了 Serve 方法），通用性更好 grace 库功能强大，但是稍微复杂；endless 库更为简洁 由于我的项目使用了 gin 作为 http 框架，故考虑到快速集成，我选择了 endless 该框架\n第三方库的对比经验： 主观因素：个人品味，是否要自己造轮子，朋友的推荐也对个人的判断也有很大影响； 客观因素：集成复杂度，内存管理，是否有大量 I/O 访问/耗性能访问，错误处理，工具参考文档等。\n集成起来也非常方便，类似于如下：\n1 2 3 4 5 6 func main() { router := gin.Default() router.GET(\u0026#34;/\u0026#34;, handler) // [...] endless.ListenAndServe(\u0026#34;:8086\u0026#34;, router) } 问题拓展 我其实又想了这些问题，也想抛出来与大家一起讨论\n1、简单的 http server 很容易升级，若监听了多个端口该如何进行热升级？\n2、若 go server 使用 tls 服务（其他也类似），如何进行升级？\n3、go http server 在容器场景下是否需要平滑热升级？平滑停机是否足够？如果平滑停机足够的话，那么如何结合 docker+k8s 进行热升级？\n个人猜测了一下，这种场景下，后端服务应该会有冗余部署，前端通过负载均衡/elb/tgw 等中间层访问，或者使用 consul 之类的服务注册发现机制，串行重启或者分批次重启，来做到不停服升级服务\n总结 热更新目标：\n1、正在处理中的连接/服务/请求不能立即中断，需要继续提供服务 2、socket 对用户来说要保持可用，可以接受新的请求 直接沿用上篇的思路，热更新（单进程）流程，其基本流程如下：\n1、用新的 bin 文件去替换老的 bin 文件 2、发送信号告知 server 进程（通常是 USR2 信号），进行平滑升级 3、server 进程收到信号后，通过调用 fork/exec 启动新的版本的进程 4、子进程调用接口获取从父进程继承的 socket 文件描述符重新监听 socket 5、老的进程不再接受请求，待正在处理中的请求处理完后，进程自动退出 6、子进程托管给 init 进程 参考 https://grisha.org/blog/2014/06/03/graceful-restart-in-golang/ https://blog.csdn.net/u012058778/article/details/78705536 http://gulu-dev.com/post/2014-07-28-tech-evaluation https://golang.org/doc/go1.8#http_shutdown golang1.8 升级日志，支持 gracefulshutdown 代码附录 1、facebookgo/grace 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // Command gracedemo implements a demo server showing how to gracefully // terminate an HTTP server using grace. package main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/facebookgo/grace/gracehttp\u0026#34; ) var ( address0 = flag.String(\u0026#34;a0\u0026#34;, \u0026#34;:48567\u0026#34;, \u0026#34;Zero address to bind to.\u0026#34;) address1 = flag.String(\u0026#34;a1\u0026#34;, \u0026#34;:48568\u0026#34;, \u0026#34;First address to bind to.\u0026#34;) address2 = flag.String(\u0026#34;a2\u0026#34;, \u0026#34;:48569\u0026#34;, \u0026#34;Second address to bind to.\u0026#34;) now = time.Now() ) func main() { flag.Parse() gracehttp.Serve( \u0026amp;http.Server{Addr: *address0, Handler: newHandler(\u0026#34;Zero \u0026#34;)}, \u0026amp;http.Server{Addr: *address1, Handler: newHandler(\u0026#34;First \u0026#34;)}, \u0026amp;http.Server{Addr: *address2, Handler: newHandler(\u0026#34;Second\u0026#34;)}, ) } func newHandler(name string) http.Handler { mux := http.NewServeMux() mux.HandleFunc(\u0026#34;/sleep/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { duration, err := time.ParseDuration(r.FormValue(\u0026#34;duration\u0026#34;)) if err != nil { http.Error(w, err.Error(), 400) return } time.Sleep(duration) fmt.Fprintf( w, \u0026#34;%s started at %s slept for %d nanoseconds from pid %d.\\n\u0026#34;, name, now, duration.Nanoseconds(), os.Getpid(), ) }) return mux } 2、fvbock/endless 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/fvbock/endless\u0026#34; \u0026#34;github.com/gorilla/mux\u0026#34; ) func handler(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\u0026#34;WORLD!\u0026#34;)) } func main() { mux1 := mux.NewRouter() mux1.HandleFunc(\u0026#34;/hello\u0026#34;, handler). Methods(\u0026#34;GET\u0026#34;) err := endless.ListenAndServe(\u0026#34;localhost:4242\u0026#34;, mux1) if err != nil { log.Println(err) } log.Println(\u0026#34;Server on 4242 stopped\u0026#34;) os.Exit(0) } 3、jpillora/overseer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/jpillora/overseer\u0026#34; \u0026#34;github.com/jpillora/overseer/fetcher\u0026#34; ) //see example.sh for the use-case // BuildID is compile-time variable var BuildID = \u0026#34;0\u0026#34; //convert your \u0026#39;main()\u0026#39; into a \u0026#39;prog(state)\u0026#39; //\u0026#39;prog()\u0026#39; is run in a child process func prog(state overseer.State) { fmt.Printf(\u0026#34;app#%s (%s) listening...\\n\u0026#34;, BuildID, state.ID) http.Handle(\u0026#34;/\u0026#34;, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { d, _ := time.ParseDuration(r.URL.Query().Get(\u0026#34;d\u0026#34;)) time.Sleep(d) fmt.Fprintf(w, \u0026#34;app#%s (%s) says hello\\n\u0026#34;, BuildID, state.ID) })) http.Serve(state.Listener, nil) fmt.Printf(\u0026#34;app#%s (%s) exiting...\\n\u0026#34;, BuildID, state.ID) } //then create another \u0026#39;main\u0026#39; which runs the upgrades //\u0026#39;main()\u0026#39; is run in the initial process func main() { overseer.Run(overseer.Config{ Program: prog, Address: \u0026#34;:5001\u0026#34;, Fetcher: \u0026amp;fetcher.File{Path: \u0026#34;my_app_next\u0026#34;}, Debug: false, //display log of overseer actions }) } 4、overseer overseer uses the main process to check for and install upgrades and a child process to run Program.\nThe main process retrieves the files of the listeners described by Address/es.\nThe child process is provided with these files which is converted into a Listener/s for the Program to consume.\nAll child process pipes are connected back to the main process.\nAll signals received on the main process are forwarded through to the child process.\nFetcher runs in a goroutine and checks for updates at preconfigured interval. When Fetcher returns a valid binary stream (io.Reader), the master process saves it to a temporary location, verifies it, replaces the current binary and initiates a graceful restart.\nThe fetcher.HTTP accepts a URL, it polls this URL with HEAD requests and until it detects a change. On change, we GET the URL and stream it back out to overseer. See also fetcher.S3.\nOnce a binary is received, it is run with a simple echo token to confirm it is a overseer binary.\nExcept for scheduled restarts, the active child process exiting will cause the main process to exit with the same code. So, overseer is not a process manager.\n[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-nJwx0ZVC-1609089892264)(https://camo.githubusercontent.com/45df268c40025baddcafea70a437537c8c67b31c/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f316f31326e6a597952494c79335544733245364a7a794a456c3070735534655059694d5132306a6975564f592f7075623f773d35363626683d323834)]\n参考 http://tengine.taobao.org/nginx_docs/cn/docs/control.html\n附加技巧 nginx 如何在指定时间内热重启？\nenvoy 热重启流程跟一般golang进程、nginx进程又有什么异同？\n","permalink":"https://miss-you.github.io/posts/server-hot-update/","summary":"\u003ch1 id=\"从-nginx-热更新聊一聊-golang-中的热更新\"\u003e从 nginx 热更新聊一聊 Golang 中的热更新\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e静态语言在服务器编程时都会遇到这样的问题：如何保证已有的连接服务不中断同时又升级版本？\n最近花了点时间看了下 nginx 热更新代码流程，想了下结合之前的经验一并总结下热更新\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"热更新是什么\"\u003e热更新是什么？\u003c/h2\u003e\n\u003cp\u003e举个例子，你现在在坐卡车，卡车开到了 150KM/H\u003c/p\u003e\n\u003cp\u003e然后，有个轮胎，爆了\u003c/p\u003e\n\u003cp\u003e然后，司机说，你就直接换吧，我不停车。你小心点换\u003c/p\u003e\n\u003cp\u003e嗯。就这个意思\u003c/p\u003e\n\u003ch2 id=\"网关中的热更新\"\u003e网关中的热更新\u003c/h2\u003e\n\u003cp\u003e服务程序热更新这个问题在层 7 网关中尤其严重，网关中承载着大量的请求，包括 HTTP/HTTPS 短连接、HTTP/HTTPS 长连接、甚至是 websocket 这种超长连接（websocket 通常连接时间会很长，十几分钟到几天不等）。服务进程热更新是非常有必要的。\u003c/p\u003e\n\u003cp\u003e网关作为一个基础组件，需要保证高可用，是很难将其先停下来再更新的；\u003c/p\u003e\n\u003cp\u003e有人说可以使用负载均衡将需要更新的组件先隔离，再停机更新，但是如果是一个很小的集群没有负载均衡呢，又或者这样手动一台一台升级也着实麻烦，部分情况下就算隔离了也不过是不会有新的连接过来，旧的连接/请求依旧需要处理完成，否则就会造成部分服务不可用\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不过实际上线上操作是集群隔离加热更新一起操作\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"nginx-热更新-upgrading-executable-on-the-fly\"\u003enginx 热更新 (Upgrading Executable on the Fly)\u003c/h2\u003e\n\u003cp\u003enginx [engine x] 是 Igor Sysoev 编写的一个 HTTP 和反向代理服务器，另外它也可以作为邮件代理服务器。 它已经在众多流量很大的俄罗斯网站上使用了很长时间，这些网站包括 Yandex、Mail.Ru、VKontakte，以及 Rambler。据 Netcraft 统计，在 2012 年 8 月份，世界上最繁忙的网站中有 11.48%使用 Nginx 作为其服务器或者代理服务器。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNginX 采用 Master/Worker 的多进程模型，Master 进程负责整个 NginX 进程的管理。Nginx 的模块化、热更新、Http 处理流程、日志等机制都非常经典。这里将会简要介绍一下热更新的机制\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"nginx-热升级流程\"\u003enginx 热升级流程\u003c/h3\u003e\n\u003cp\u003e步骤 1、升级 nginx 二进制文件，需要先将新的 nginx 可执行文件替换原有旧的 nginx 文件，然后给 nginx master 进程发送 USR2 信号，告知其开始升级可执行文件；nginx master 进程会将老的 pid 文件增加。oldbin 后缀，然后拉起新的 master 和 worker 进程，并写入新的 master 进程的 pid。\u003c/p\u003e","title":"从 nginx 热更新聊一聊 Golang 中的热更新"},{"content":"C/C++ 版本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 int CNetOperations::GetLocalIp(__be32 *pLocalIp, const char* pIfName) { if (!pLocalIp || !pIfName) { return (-EINVAL); } int iSocket; iSocket = socket(AF_INET, SOCK_DGRAM, 0); if (iSocket \u0026lt; 0) { return (-errno); } struct ifreq stIfr; memset(stIfr.ifr_name, 0x0, sizeof(stIfr.ifr_name)); strcpy(stIfr.ifr_name, pIfName); int iRet; iRet = ioctl(iSocket, SIOCGIFADDR, \u0026amp;stIfr); if (iRet \u0026lt; 0) { close(iSocket); return (-errno); } (*pLocalIp) = ((struct sockaddr_in *)\u0026amp;stIfr.ifr_addr)-\u0026gt;sin_addr.s_addr; close(iSocket); return 0; } golang 版本 shell 版本 最初的想法\n进一步改进\n1 localip=`ip route get 1 | awk \u0026#39;{print $NF;exit}\u0026#39;` 局限性\nlua/Openresty 版本 依赖 luasocket 库的写法\n1 xxx 原理\n局限性\n使用 ffi 调用的方式实现\n1 xxx 原理\n局限性\n","permalink":"https://miss-you.github.io/posts/how-to-get-localip/","summary":"\u003ch2 id=\"cc-版本\"\u003eC/C++ 版本\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-30\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-30\"\u003e30\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-31\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-31\"\u003e31\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ne\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eCNetOperations\u003c/span\u003e\u003cspan class=\"p\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eGetLocalIp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__be32\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epLocalIp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epIfName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003epLocalIp\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003epIfName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eEINVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ne\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esocket\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAF_INET\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSOCK_DGRAM\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eifreq\u003c/span\u003e \u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifr_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifr_name\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estrcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifr_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epIfName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ne\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eiRet\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eiRet\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eioctl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSIOCGIFADDR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiRet\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epLocalIp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003esockaddr_in\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003estIfr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eifr_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esin_addr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003es_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"golang-版本\"\u003egolang 版本\u003c/h2\u003e\n\u003ch2 id=\"shell-版本\"\u003eshell 版本\u003c/h2\u003e\n\u003cp\u003e最初的想法\u003c/p\u003e","title":"获取服务器本机 IP 的不同语言实现"},{"content":"perf 使用教程 perf 简介 Perf 是 Linux kernel 中的系统性能优化工具，perf 基本原理的话是在 CPU 的 PMU register 中 Get/Set performance counters 来获得诸如 instructions executed，cache-missed suffered，branches mispredicted 等信息。\nperf 本身的工具有很多，这里主要介绍个人在查询程序性能问题时使用的一些工具 包括 perf list、perf stat、perf record、perf report\nperf list 使用 perf 之前肯定要知道 perf 能监控哪些性能指标吧？那么就要使用 perf list 进行查看，通常使用的指标是 cpu-clock/task-clock 等，具体要根据需要来判断\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ perf list List of pre-defined events (to be used in -e): cpu-cycles OR cycles [Hardware event] instructions [Hardware event] … cpu-clock [Software event] task-clock [Software event] context-switches OR cs [Software event] … ext4:ext4_allocate_inode [Tracepoint event] kmem:kmalloc [Tracepoint event] module:module_load [Tracepoint event] workqueue:workqueue_execution [Tracepoint event] sched:sched_{wakeup,switch} [Tracepoint event] syscalls:sys_{enter,exit}_epoll_wait [Tracepoint event] … 不同内核版本列出的结果不一样多。.. 不过基本是够用的，但是无论多少，我们可以基本将其分为三类\nHardware Event 是由 PMU 硬件产生的事件，比如 cache 命中，当您需要了解程序对硬件特性的使用情况时，便需要对这些事件进行采样 Software Event 是内核软件产生的事件，比如进程切换，tick 数等 Tracepoint event 是内核中的静态 tracepoint 所触发的事件，这些 tracepoint 用来判断程序运行期间内核的行为细节，比如 slab 分配器的分配次数等 具体监控哪个变量的话，譬如使用后面的 perf report 工具，则加**-e 监控指标**，如\n1 2 perf report -e cpu-clock ls 监控运行 ls 命令时的 cpu 时钟占用监控 perf stat 刚刚知道了可以监控哪些事件，但是事件这么多，该如何下手呢？\n解决问题的时候有条理才解决的更快，所以面对一个性能问题的时候，最好采用自顶向下的策略。先整体看看该程序运行时各种统计事件的大概，再针对某些方向深入细节。而不要一下子扎进琐碎细节，会一叶障目的。\n整体监测代码性能就需要使用 perf stat 这个工具，该工具主要是从全局上监控，可以看到程序导致性能瓶颈主要是什么原因。因为不同的程序导致其性能瓶颈的原因不同，譬如有些程序慢是由于计算量大，而有些程序是由于频繁的 I/O 导致性能瓶颈，他们的优化方式不同。perf stat 通过概括精简的方式提供被调试程序运行的整体情况和汇总数据。\n使用方法\n1 2 3 perf stats 程序 譬如 perf stat ./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw 程序运行完之后，然后使用 ctrl+c 来终止程序（若程序自动终止则不用），之后，perf 便会打印出监控事件结果，类似结果如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Performance counter stats for \u0026#39;./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw\u0026#39;: 1773.651816 task-clock (msec) # 0.016 CPUs utilized 79,054 context-switches # 0.045 M/sec 757 cpu-migrations # 0.427 K/sec 16,368 page-faults # 0.009 M/sec \u0026lt;not supported\u0026gt; cycles \u0026lt;not supported\u0026gt; stalled-cycles-frontend \u0026lt;not supported\u0026gt; stalled-cycles-backend \u0026lt;not supported\u0026gt; instructions \u0026lt;not supported\u0026gt; branches \u0026lt;not supported\u0026gt; branch-misses 109.795527410 seconds time elapsed 1773.651816 task-clock 是指程序运行期间占用了 xx 的任务时钟周期，该值高，说明程序的多数时间花费在 CPU 计算上而非 IO 79,054 context-switches 是指程序运行期间发生了 xx 次上下文切换，记录了程序运行过程中发生了多少次进程切换，频繁的进程切换是应该避免的。（有进程进程间频繁切换，或者内核态与用户态频繁切换） 757 cpu-migrations 是指程序运行期间发生了 xx 次 CPU 迁移，即用户程序原本在一个 CPU 上运行，后来迁移到另一个 CPU 16,368 page-faults 是指程序发生了 xx 次页错误 其他可以监控的譬如分支预测、cache 命中等 perf record 前面通过 perf stat 获得了程序性能瓶颈类型，之后，假设你已经知道哪个进程需要优化**（若不知道则需要使用 perf top 进行进一步监控，这里由于个人没有使用过，所以不作介绍）**，那么下一步就是对该进程进行细粒度的分析，分析在长长的程序代码中究竟是哪几段代码、哪几个函数需要修改呢？这便需要使用 perf record 记录单个函数级别的统计信息，并使用 perf report 来显示统计结果。\n调优应该将注意力集中到百分比高的热点代码片段上，假如一段代码只占用整个程序运行时间的 0.1%，就算将其优化到仅剩一条机器指令，恐怕也只能将整体的程序性能提高 0.1%。\n好钢用在刀刃上\n仍以之前的 gw 程序为例，假设要监控的指标为 cpu-clock\n1 perf record -e cpu-clock -g ./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw -g 选项是告诉 perf record 额外记录函数的调用关系，因为原本 perf record 记录大都是库函数，直接看库函数，大多数情况下，你的代码肯定没有标准库的性能好对吧？除非是针对产品进行特定优化，所以就需要知道是哪些函数频繁调用这些库函数，通过减少不必要的调用次数来提升性能 -e cpu-clock 指 perf record 监控的指标为 cpu 周期 程序运行完之后，perf record 会生成一个名为 perf.data 的文件（缺省值），如果之前已有，那么之前的 perf.data 文件会变为 perf.data.old 文件 获得这个 perf.data 文件之后，我们其实还不能直接查看，下面就需要 perf report 工具进行查看 perf report 前面通过perf record工具获得了某一进程的指标监控数据 perf.data，下面就需要使用perf report工具查看该文件\n使用方法\n1 2 3 perf report -i perf-report 生成的文件 譬如 perf report -i perf.data 上面使用perf record获得的数据的结果如下\n1 2 3 + 4.93% gw libcurl-gnutls.so.4.3.0 [.] 0x000000000001e1e0 + 4.93% gw [kernel.kallsyms] [k] eventfd_write + 2.96% gw [kernel.kallsyms] [k] ipt_do_table + 2.46% gw [kernel.kallsyms] [k] xen_hypercall_event_channel_op ? 1.97% gw libc-2.19.so [.] _int_malloc + 1.97% gw libc-2.19.so [.] __clock_gettime ? 1.97% gw gw [.] nwGtpv2cHandleInitialReq(NwGtpv2cStack*, unsigned int, MqPackage\u0026amp;) ? 1.97% gw [kernel.kallsyms] [k] pvclock_clocksource_read ? 1.97% gw [kernel.kallsyms] [k] ip_finish_output ? 1.97% gw [kernel.kallsyms] [k] ixgbevf_xmit_frame + 1.48% gw [kernel.kallsyms] [k] kmem_cache_alloc_trace ? 1.48% gw [kernel.kallsyms] [k] sk_run_filter [.] 代表该调用属于用户态，若自己监控的进程为用户态进程，那么这些即主要为用户态的 cpu-clock 占用的数值，[k] 代表属于内核态的调用。 也许有的人会奇怪为什么自己完全是一个用户态的程序为什么还会统计到内核态的指标？一是用户态程序运行时会受到内核态的影响，若内核态对用户态影响较大，统计内核态信息可以了解到是内核中的哪些行为导致对用户态产生影响；二则是有些用户态程序也需要依赖内核的某些操作，譬如 I/O 操作 /+ 4.93% gw libcurl-gnutls.so.4.3.0 [.] 0x000000000001e1e0 ，左边的加号代表 perf 已经记录了该调用关系，按 enter 键可以查看调用关系，不过由于这个是动态库里的函数，基本查看到的都是一些二进制数值：P perf 监控 gw 进程结果记录到很多内核调用，说明 gw 进程在运行过程中，有可能被内核态任务频繁中断，应尽量避免这种情况，对于这个问题我的解决办法是采用绑核，譬如机器有 8 个 CPU，那么我就绑定内核操作、中断等主要在 0-5CPU，GW 由于有两个线程，分别绑定到 6、7CPU 上 实践 这里使用我在实验中程序在某一场景 CPU 占用率飙升的问题作为示例\n1.perf stat 整体定位性能瓶颈 CPU 飙升场景与正常场景使用 perf stat 对比差异\n执行\n1 perf stat ./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw CPU 飙升场景\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Performance counter stats for \u0026#39;./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw\u0026#39;: 1773.651816 task-clock (msec) # 0.016 CPUs utilized 79,054 context-switches # 0.045 M/sec 757 cpu-migrations # 0.427 K/sec 16,368 page-faults # 0.009 M/sec \u0026lt;not supported\u0026gt; cycles \u0026lt;not supported\u0026gt; stalled-cycles-frontend \u0026lt;not supported\u0026gt; stalled-cycles-backend \u0026lt;not supported\u0026gt; instructions \u0026lt;not supported\u0026gt; branches \u0026lt;not supported\u0026gt; branch-misses 109.795527410 seconds time elapsed 正常场景\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Performance counter stats for \u0026#39;./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw\u0026#39;: 1186.728996 task-clock (msec) # 0.018 CPUs utilized 78,284 context-switches # 0.066 M/sec 69 cpu-migrations # 0.058 K/sec 16,368 page-faults # 0.014 M/sec \u0026lt;not supported\u0026gt; cycles \u0026lt;not supported\u0026gt; stalled-cycles-frontend \u0026lt;not supported\u0026gt; stalled-cycles-backend \u0026lt;not supported\u0026gt; instructions \u0026lt;not supported\u0026gt; branches \u0026lt;not supported\u0026gt; branch-misses 64.456003339 seconds time elapsed 通过对比可以发现：\ntask-clock 异常场景比正常场景占用率高许多，说明程序 CPU 占用率提升 cpu-migrations 异常场景比正常场景占用率高许多，说明进程发生了较频繁的从一个 CPU 迁移到另一个 CPU 2.perf record+perf report 单点定位进程本身问题 通过 perf stat 整体上监控进程性能问题之后，使用 perf record 等对进程本身进行监控\n执行\n1 2 3 perf record -e task-clock -g ./gw --gtpu-ip 172.31.24.58 --sgw-s11-ip 172.31.24.250 --zmq-ip 172.31.31.174 --sgi-if eth1 --teid 1 --mysql 172.31.20.157 -cgw perf report -i perf.data 结果如下\n1 2 3 4 5 6 7 8 9 root@ip-172-31-24-250:/home/ubuntu/EPC/gw# + 4.93% gw libcurl-gnutls.so.4.3.0 [.] 0x000000000001e1e0 + 4.93% gw [kernel.kallsyms] [k] eventfd_write + 2.96% gw [kernel.kallsyms] [k] ipt_do_table + 2.46% gw [kernel.kallsyms] [k] xen_hypercall_event_channel_op ? 1.97% gw libc-2.19.so [.] _int_malloc + 1.97% gw libc-2.19.so [.] __clock_gettime ? 1.97% gw gw [.] nwGtpv2cHandleInitialReq(NwGtpv2cStack*, unsigned int, MqPackage\u0026amp;) ? 1.97% gw [kernel.kallsyms] [k] pvclock_clocksource_read ? 1.97% gw [kernel.kallsyms] [k] ip_finish_output ? 1.97% gw [kernel.kallsyms] [k] ixgbevf_xmit_frame + 1.48% gw [kernel.kallsyms] [k] kmem_cache_alloc_trace ? 1.48% gw [kernel.kallsyms] [k] sk_run_filter ? 1.48% gw [kernel.kallsyms] [k] fib_table_lookup ? 1.48% gw [kernel.kallsyms] [k] _raw_spin_unlock_irqrestore ? 0.99% gw libpthread-2.19.so [.] __libc_fcntl + 0.99% gw libc-2.19.so [.] vfprintf ? 0.99% gw libc-2.19.so [.] malloc ? 0.99% gw libc-2.19.so [.] free ? 0.99% gw libc-2.19.so [.] inet_ntop ? 0.99% gw libc-2.19.so [.] inet_pton + 0.99% gw [vdso] [.] 0x0000000000000ca1 ? 0.99% gw [kernel.kallsyms] [k] __do_softirq ? 0.99% gw [kernel.kallsyms] [k] ksize ? 0.99% gw [kernel.kallsyms] [k] kfree + 0.99% gw [kernel.kallsyms] [k] fput ? 0.99% gw [kernel.kallsyms] [k] d_alloc_pseudo ? 0.99% gw [kernel.kallsyms] [k] sys_socket ? 0.99% gw [kernel.kallsyms] [k] datagram_poll ? 0.99% gw [kernel.kallsyms] [k] skb_network_protocol + 0.99% gw [kernel.kallsyms] [k] __dev_queue_xmit libcurl-gnutls.so.4.3.0 它本身功能是一个数据上报，但是占用较高的 CPU，说明调用该库存在问题（代码本身问题），需要对调用该库的代码进行检查 libc-2.19.so [.] _int_malloc 这是常用的 malloc 操作，由于对代码比较熟悉，在这个过程中不应该有这么多次申请内存，说明代码本身有问题，需要对申请动态内存的代码进行检查 __clock_gettime 这个是由于计时需要，需要频繁获取时间，通常是指 gettimeofday() 函数 整个统计显示有很多 task-clock 占用是由于** kernel.kallsyms **导致，同时也验证了对 perf stat 获得的数据的初步判断，即 CPU 飙升也与频繁的 CPU 迁移（内核态中断用户态操作）导致，解决办法是采用 CPU 绑核 perf 工具很好用，要善用这个利器\n自我提问 perf 是什么？ perf 能解决什么样的问题？什么样的问题无法解决？为什么？ 如何理解 perf 的探针？在 C++/C/Go/Rust 场景下，这些探针有代表什么含义呢？ perf 是如何统计的？perf 的探测机制是什么？为什么 perf 的探测对性能影响有限？ 使用上，perf 可以衡量哪些指标？针对于什么语言？针对于哪些问题可以评估？可以绘制哪些图？ 后起之秀 bcc/ebpf 与 perf 的取舍？ perf 的哪些机制值得学习？如何使用 perf？能够用 perf 解决什么样的问题？perf 对应指标分别是什么？如何理解这些指标？perf 解决问题的技巧？perf 是如何统计数据的？perf 为什么统计数据可以比较高性能？perf 的局限性有哪些？perf 与后起之秀的 pk？ 一些具体的场景和案例 ","permalink":"https://miss-you.github.io/posts/perf/","summary":"\u003ch1 id=\"perf-使用教程\"\u003eperf 使用教程\u003c/h1\u003e\n\u003ch2 id=\"perf-简介\"\u003eperf 简介\u003c/h2\u003e\n\u003cp\u003ePerf 是 Linux kernel 中的系统性能优化工具，perf 基本原理的话是在 CPU 的 PMU register 中 Get/Set performance counters 来获得诸如 instructions executed，cache-missed suffered，branches mispredicted 等信息。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eperf 本身的工具有很多，这里主要介绍个人在查询程序性能问题时使用的一些工具\n包括 perf list、perf stat、perf record、perf report\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"perf-list\"\u003eperf list\u003c/h2\u003e\n\u003cp\u003e使用 perf 之前肯定要知道 perf 能监控哪些性能指标吧？那么就要使用 perf list 进行查看，通常使用的指标是 cpu-clock/task-clock 等，具体要根据需要来判断\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e \u003cspan class=\"n\"\u003eperf\u003c/span\u003e \u003cspan class=\"n\"\u003elist\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003eList\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003edefined\u003c/span\u003e \u003cspan class=\"n\"\u003eevents\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003ebe\u003c/span\u003e \u003cspan class=\"n\"\u003eused\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ecycles\u003c/span\u003e \u003cspan class=\"n\"\u003eOR\u003c/span\u003e \u003cspan class=\"n\"\u003ecycles\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eHardware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eHardware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e…\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003ecpu\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eclock\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSoftware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003etask\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eclock\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSoftware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eswitches\u003c/span\u003e \u003cspan class=\"n\"\u003eOR\u003c/span\u003e \u003cspan class=\"n\"\u003ecs\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSoftware\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e…\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003eext4\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eext4_allocate_inode\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003ekmem\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ekmalloc\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003emodule\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003emodule_load\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003eworkqueue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eworkqueue_execution\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003esched\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003esched_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ewakeup\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"k\"\u003eswitch\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"n\"\u003esyscalls\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003esys_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eenter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"n\"\u003e_epoll_wait\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTracepoint\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e…\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e不同内核版本列出的结果不一样多。.. 不过基本是够用的，但是无论多少，我们可以基本将其分为三类\u003c/p\u003e","title":"perf 入门教程（待补充和完善）"},{"content":" 本文主要分享火焰图使用技巧，介绍 systemtap 的原理机制，如何使用火焰图快速定位性能问题原因，同时加深对 systemtap 的理解。\n让我们回想一下，曾经作为编程新手的我们是如何调优程序的？通常是在没有数据的情况下依靠主观臆断来瞎蒙，稍微有些经验的同学则会对差异代码进行二分或者逐段调试。这种定位问题的方式不仅耗时耗力，而且还不具有通用性，当遇到其他类似的性能问题时，需要重复踩坑、填坑，那么如何避免这种情况呢？\n俗语有云：“工欲善其事，必先利其器。”个人认为，程序员定位性能问题也需要一件“利器”。 如同医生给病人看病，需要依靠专业的医学工具（比如 X 光片、听诊器等）进行诊断，最后依据医学工具的检验结果快速精准地定位出病因所在。性能调优工具（比如 perf / gprof 等）之于性能调优就像 X 光之于病人一样，它可以一针见血地指出程序的性能瓶颈。\n但是常用的性能调优工具 perf 等，在呈现内容上只能单一地列出调用栈或者非层次化的时间分布，不够直观。这里我推荐大家配合使用火焰图，它将 perf 等工具采集的数据呈现得更为直观。\n初识火焰图 火焰图（Flame Graph）是由 Linux 性能优化大师 Brendan Gregg 发明的，和所有其他的 profiling 方法不同的是，火焰图以一个全局的视野来看待时间分布，它从底部往顶部，列出所有可能导致性能瓶颈的调用栈。\n火焰图整个图形看起来就像一个跳动的火焰，这就是它名字的由来。\n火焰图有以下特征（这里以 on-cpu 火焰图为例）：\n每一列代表一个调用栈，每一个格子代表一个函数； 纵轴展示了栈的深度，按照调用关系从下到上排列，最顶上格子代表采样时，正在占用 cpu 的函数； 横轴的意义是指：火焰图将采集的多个调用栈信息，通过按字母横向排序的方式将众多信息聚合在一起。需要注意的是它并不代表时间； 横轴格子的宽度代表其在采样中出现频率，所以一个格子的宽度越大，说明它是瓶颈原因的可能性就越大； 火焰图格子的颜色是随机的暖色调，方便区分各个调用信息； 其他的采样方式也可以使用火焰图， on-cpu 火焰图横轴是指 cpu 占用时间，off-cpu 火焰图横轴则代表阻塞时间； 采样可以是单线程、多线程、多进程甚至是多 host，进阶用法可以参考附录 进阶阅读； 火焰图类型 常见的火焰图类型有 On-CPU，Off-CPU，还有 Memory，Hot/Cold，Differential 等等。他们分别适合处理什么样的问题呢？\n这里笔者主要使用到的是 On-CPU、Off-CPU 以及 Memory 火焰图，所以这里仅仅对这三种火焰图作比较，也欢迎大家补充和斧正。\n火焰图分析技巧 纵轴代表调用栈的深度（栈桢数），用于表示函数间调用关系：下面的函数是上面函数的父函数； 横轴代表调用频次，一个格子的宽度越大，越说明其可能是瓶颈原因； 不同类型火焰图适合优化的场景不同，比如 on-cpu 火焰图适合分析 cpu 占用高的问题函数，off-cpu 火焰图适合解决阻塞和锁抢占问题； 无意义的事情：横向先后顺序是为了聚合，跟函数间依赖或调用关系无关；火焰图各种颜色是为方便区分，本身不具有特殊含义； 多练习：进行性能优化有意识的使用火焰图的方式进行性能调优（如果时间充裕）； 如何绘制火焰图？ 要生成火焰图，必须要有一个顺手的动态追踪工具，如果操作系统是 Linux 的话，那么通常通常是 perf 或者 systemtap 中的一种。其中 perf 相对更常用，多数 Linux 都包含了 perf 这个工具，可以直接使用；SystemTap 则功能更为强大，监控也更为灵活。网上关于如何使用 perf 绘制火焰图的文章非常多而且丰富，所以本文将以 SystemTap 为例。\nSystemTap 是动态追踪工具，它通过探针机制，来采集内核或者应用程序的运行信息，从而可以不用修改内核和应用程序的代码，就获得丰富的信息，帮你分析、定位想要排查的问题。SystemTap 定义了一种类似的 DSL 脚本语言，方便用户根据需要自由扩展。不过，不同于动态追踪的鼻祖 DTrace ，SystemTap 并没有常驻内核的运行时，它需要先把脚本编译为内核模块，然后再插入到内核中执行。这也导致 SystemTap 启动比较缓慢，并且依赖于完整的调试符号表。\n使用 SystemTap 绘制火焰图的主要流程如下：\n安装 SystemTap 以及 操作系统符号调试表 根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本 生成内核模块 运行 SystemTap 或者运行生成的内核模块统计数据 将统计数据转换成火焰图 本文演示步骤将会基于操作系统 Tlinux 2.2 ( Linux 内核版本 3.10.107)\n安装 SystemTap 以及 操作系统符号调试表 使用 yum 工具安装 systemtap:\n1 yum install systemtap systemtap-runtime 由于 systemtap 工具依赖于完整的调试符号表，而且生产环境不同机器的内核版本不同（虽然都是 Tlinux 2.2 版本，但是内核版本后面的小版本不一样，可以通过 uname -a 命令查看）所以我们还需要安装 kernel-debuginfo 包、 kernel-devel 包 我这里是安装了这两个依赖包\n1 2 kernel-devel-3.10.107-1-tlinux2-0046.x86_64 kernel-debuginfo-3.10.107-1-tlinux2-0046.x86_64 根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本 使用 SystemTap 统计相关数据往往需要自己依照它的语法，编写脚本，具有一定门槛。幸运的是，github 上春哥（agentzh）开源了两组他常用的 SystemTap 脚本：openresty-systemtap-toolkit 和 stapxx，这两个工具集能够覆盖大部分 C 进程、nginx 进程以及 Openresty 进程的性能问题场景。\n我们这里需要绘制 off-cpu 火焰图，所以使用 sample-bt-off-cpu 脚本即可\n生成内核模块 现在我们有了统计脚本，也安装好了 systemtap，正常来说就可以使用了，但由于 systemtap 是通过生成内核模块的方式统计相关探针的统计数据，而 tlinux 要求所有运行的内核模块需要先到 tlinux 平台签名才可以运行，所以：\n故需要先修改 off-cpu 脚本，让其先生成内核模块；之后对该内核模块作签名；最后使用 systemtap 命令手工运行该脚本，统计监控数据。\nSystemtap 执行流程如下：\nparse：分析脚本语法 elaborate：展开脚本 中定义的探针和连接预定义脚本库，分析内核和内核模块的调试信息 translate：. 将脚本编译成 c 语言内核模块文件放 在$HOME/xxx.c 缓存起来，避免同一脚本多次编译 build：将 c 语言模块文件编译成。ko 的内核模块，也缓存起来。 把模块交给 staprun，staprun 加载内核模块到内核空间，stapio 连接内核模块和用户空间，提供交互 IO 通道，采集数据。 所以我们这里修改下 off-cpu 的 stap 脚本，让其只运行完第四阶段，只生成一个内核模块\n1 2 3 // 在 stap 命令后增加 -p4 参数，告诉 systemtap，当前只需要执行到第四阶段 open my $in, \u0026#34;|stap -p4 --skip-badvars --all-modules -x $pid -d \u0026#39;$exec_path\u0026#39; --ldd $d_so_args $stap_args -\u0026#34; or die \u0026#34;Cannot run stap: $!\\n\u0026#34;; 修改好之后运行脚本，会生成一个内核模块\n1 2 3 // -p 8682 是需要监控的进程的进程号 // -t 30 是指会采样 30 秒 ./sample-bt-off-cpu -p 8692 -t 30 生成的内核模块名称形如 stap_xxxxx.ko模块名称 由于读者并不需要关心内核模块签名，故章节略过\n运行内核模块统计数据 内核模块签名完成后，便可以使用 staprun 命令手工运行相关内核模块了\n命令：\n1 2 // 注意：签名脚本会将生产的内核模块重命名，需要将名字改回去……（脚本 bug） staprun -x {进程号} {内核模块名} \u0026gt; demo.bt 值得注意的是，监控的进程要有一定负载 systemtap 才可以采集到相关数据，即在采集时，同时需要要有一定请求量（通常是自己构造请求，压测进程）\n将统计数据转换成火焰图 获得了统计数据 demo.bt 后，便可以使用火焰图工具绘制火焰图了\n下载 FlameGraph，链接：https://github.com/brendangregg/FlameGraph\n命令：\n1 2 ./stackcollapse-stap.pl demo.bt \u0026gt; demo.folded ./flamegraph.pl demo.folded \u0026gt; demo.svg 这样便获得了 off-cpu 火焰图：\n看图说话 趁热打铁，通过几张火焰图熟悉下如何使用火焰图\n图片源于春哥微博或者本人近期绘制的性能火焰图\non-cpu 火焰图 Apache APISIX QPS 急剧下降问题 Apache APISIX 是一个开源国产的高性能 API 网关，之前在进行选型压测时，发现当 Route 匹配不中场景下， QPS 急剧下降，在其 CPU （四十八核）占用率几乎达到 100%的情况下只有几千 QPS，通过绘制火焰图发现，其主要耗时在一个 table 插入阶段 (lj_cf_table_insert)，分析代码发现是该 table 一直没有释放，每次匹配不中时，路由会向一张用于统计的表中插入一条数据，导致该表越来越大，后续插入耗时过长导致 QPS 下降。\noff-cpu 火焰图 nginx 互斥锁问题 这是一张 nginx 的 off-cpu 火焰图，我们可以很快锁定到 ngx_common_set_cache_fs_size -\u0026gt; ngx_shmtx_lock -\u0026gt; sem_wait 这段逻辑使用到了互斥锁，它让 nginx 进程绝大部分阻塞等待时间花费在获取该锁。\nagent 监控上报断点问题 这是一张 agent 的 off-cpu 火焰图，它是一个多线程异步事件模型，主线程处理各个消息，多个线程分别负责配置下发或者监控上报。当前问题出现在监控上报性能差，无法在周期（一分钟）内完成监控数据上报，导致监控断点，通过 off-cpu 火焰图我们可以分析出，该上报线程花费了大量的时间使用 curl_easy_perform 接口收发 http 监控数据消息。\n依据火焰图将发送 http 消息的逻辑改为异步非阻塞后，该问题解决。\n附录 进阶阅读 谷歌搜索演讲：Blazing Performance with Flame Graphs 演讲 ppt：https://www.slideshare.net/brendangregg/blazing-performance-with-flame-graphs 《SystemTap 新手指南》：https://spacewander.gitbooks.io/systemtapbeginnersguide_zh/content/index.html 极客时间《Linux 性能优化实战》\u0026ndash;倪朋飞 FAQ 使用 perf 或者 systemtap 的方式采集数据，会对后台服务有性能影响吗？\n有，但是很小，可以基本忽略不计。\n它们使用系统的探针或者使用一些自定义的动态探针进行数据采集，第一对代码无侵入性，它既不需要停止服务，也不需要修改应用程序的代码；第二，它们是以内核模块/内核原生的方式跟踪用户态和内核态的所有事件，并通过一系列优化措施，进行采样统计，对目标服务性能影响极小，大概在 5%左右或者更低的性能损耗。相较于将进程运行在沙箱的 valgrind 工具或静态调试工具 gdb 来说，动态追踪 perf 或者 systemtap 或者 ebpf 的性能损耗基本可以忽略不计。\n目标进程重启后，systemtap 是否需要重新生成内核模块？\n不需要。甚至同一个 linux 内核版本下的同一个二进制进程（md5 值一致），在安装 kernel 调试符号表后，便可以在生成采集指标的内核模块，并且可以多次使用。\n当 linux 内核版本不一致，符号表有变化，需要重新生成内核模块；当目标进程二进制文件重新编译后，也需要重新生成统计用的 systemtap 内核模块。\n如何在容器中绘制火焰图？\n如果是 on-cpu 火焰图可以直接使用perf record命令绘制即可\n如果是 off-cpu 之类的火焰图，则需要另外分析\n若系统/容器支持 ebpf 可以使用 bcc 工具集，使用如下命令绘制 off-cpu 火焰图\n1 /usr/share/bcc/tools/offcputime -df -p `pgrep -nx mysqld` 30 \u0026gt; out.stacks ","permalink":"https://miss-you.github.io/posts/flame/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文主要分享火焰图使用技巧，介绍 systemtap 的原理机制，如何使用火焰图快速定位性能问题原因，同时加深对 systemtap 的理解。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e让我们回想一下，曾经作为编程新手的我们是如何调优程序的？通常是在没有数据的情况下依靠主观臆断来瞎蒙，稍微有些经验的同学则会对差异代码进行二分或者逐段调试。这种定位问题的方式不仅耗时耗力，而且还不具有通用性，当遇到其他类似的性能问题时，需要重复踩坑、填坑，那么如何避免这种情况呢？\u003c/p\u003e\n\u003cp\u003e俗语有云：“工欲善其事，必先利其器。”个人认为，程序员定位性能问题也需要一件“利器”。 如同医生给病人看病，需要依靠专业的医学工具（比如 X 光片、听诊器等）进行诊断，最后依据医学工具的检验结果快速精准地定位出病因所在。性能调优工具（比如 perf / gprof 等）之于性能调优就像 X 光之于病人一样，它可以一针见血地指出程序的性能瓶颈。\u003c/p\u003e\n\u003cp\u003e但是常用的性能调优工具 perf 等，在呈现内容上只能单一地列出调用栈或者非层次化的时间分布，不够直观。这里我推荐大家配合使用火焰图，它将 perf 等工具采集的数据呈现得更为直观。\u003c/p\u003e\n\u003ch2 id=\"初识火焰图\"\u003e\u003cstrong\u003e初识火焰图\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e火焰图（Flame Graph）是由 Linux 性能优化大师 Brendan Gregg 发明的，和所有其他的 profiling 方法不同的是，火焰图以一个全局的视野来看待时间分布，它从底部往顶部，列出所有可能导致性能瓶颈的调用栈。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/20201125024338.png\"\u003e\u003c/p\u003e\n\u003cp\u003e火焰图整个图形看起来就像一个跳动的火焰，这就是它名字的由来。\u003c/p\u003e\n\u003cp\u003e火焰图有以下特征（这里以 on-cpu 火焰图为例）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e每一列代表一个调用栈，每一个格子代表一个函数；\u003c/li\u003e\n\u003cli\u003e纵轴展示了栈的深度，按照调用关系从下到上排列，最顶上格子代表采样时，正在占用 cpu 的函数；\u003c/li\u003e\n\u003cli\u003e横轴的意义是指：火焰图将采集的多个调用栈信息，通过按字母横向排序的方式将众多信息聚合在一起。需要注意的是它并不代表时间；\u003c/li\u003e\n\u003cli\u003e横轴格子的宽度代表其在采样中出现频率，所以一个格子的宽度越大，说明它是瓶颈原因的可能性就越大；\u003c/li\u003e\n\u003cli\u003e火焰图格子的颜色是随机的暖色调，方便区分各个调用信息；\u003c/li\u003e\n\u003cli\u003e其他的采样方式也可以使用火焰图， on-cpu 火焰图横轴是指 cpu 占用时间，off-cpu 火焰图横轴则代表阻塞时间；\u003c/li\u003e\n\u003cli\u003e采样可以是单线程、多线程、多进程甚至是多 host，进阶用法可以参考附录 \u003ca href=\"/posts/flame/#%e8%bf%9b%e9%98%b6%e9%98%85%e8%af%bb\"\u003e进阶阅读\u003c/a\u003e；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"火焰图类型\"\u003e\u003cstrong\u003e火焰图类型\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e常见的火焰图类型有 On-CPU，Off-CPU，还有 Memory，Hot/Cold，Differential 等等。他们分别适合处理什么样的问题呢？\u003c/p\u003e\n\u003cp\u003e这里笔者主要使用到的是 On-CPU、Off-CPU 以及 Memory 火焰图，所以这里仅仅对这三种火焰图作比较，也欢迎大家补充和斧正。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/picgo/flame2.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"火焰图分析技巧\"\u003e\u003cstrong\u003e火焰图分析技巧\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e纵轴代表调用栈的深度（栈桢数），用于表示函数间调用关系：下面的函数是上面函数的父函数；\u003c/li\u003e\n\u003cli\u003e横轴代表调用频次，一个格子的宽度越大，越说明其可能是瓶颈原因；\u003c/li\u003e\n\u003cli\u003e不同类型火焰图适合优化的场景不同，比如 on-cpu 火焰图适合分析 cpu 占用高的问题函数，off-cpu 火焰图适合解决阻塞和锁抢占问题；\u003c/li\u003e\n\u003cli\u003e无意义的事情：横向先后顺序是为了聚合，跟函数间依赖或调用关系无关；火焰图各种颜色是为方便区分，本身不具有特殊含义；\u003c/li\u003e\n\u003cli\u003e多练习：进行性能优化有意识的使用火焰图的方式进行性能调优（如果时间充裕）；\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"如何绘制火焰图\"\u003e\u003cstrong\u003e如何绘制火焰图？\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e要生成火焰图，必须要有一个顺手的动态追踪工具，如果操作系统是 Linux 的话，那么通常通常是 perf 或者 systemtap 中的一种。其中 perf 相对更常用，多数 Linux 都包含了 perf 这个工具，可以直接使用；SystemTap 则功能更为强大，监控也更为灵活。网上关于如何使用 perf 绘制火焰图的文章非常多而且丰富，所以本文将以 SystemTap 为例。\u003c/p\u003e","title":"性能调优利器--火焰图"},{"content":"十一假期宅家无事，发现自己过去写了很多文章，却没有一个自己的博客，系统得管理自己的文章，所以准备将自己过去以及未来的文章都放到博客，以饷读者。另一方面，经过对 Serverless 博客、TCB 建站、虚拟机建站等一系列建站方式对比后，个人认为基于 Github Pages 最适合搭建个人技术博客，最重要的当然是免费，其次网上教程众多，可以快速建站，第三则是所有的博客直接托管在 github，也更符合个人习惯，最后则是自建个人博客可玩性和可扩展性好。\n当然，这个方案并不是完美无缺，缺点也比较明显，比如需要考虑到安全信息泄漏问题（比如可能会泄露公司内的机密信息或者秘钥到 Github，所以需要准备安全扫描方案，这个我们会在另一篇文章谈）；另一方面，读者需要能够翻墙才可以访问 Github Pages；最后，则是没有 CDN 加速，如果访问者众多或者网站图片众多，加载速度很慢。\n为什么要写技术文章？ 其实，个人写文章最初是兴趣使然以及工作需要。众所周知，IT 是一个技术革新很快的行业，新的概念、新的语言、新的框架层出不穷，程序员需要持续学习，我有对每一个新的知识有做笔记的习惯，笔记攒多了便需要回顾总结整理，便形成了一篇篇的文章。\n以前笔记的图找不到了，差不多在习惯使用电子笔记之前有十几本笔记，后来我习惯性使用思维导图 processon 等一系列工具记录笔记，比如这张图便是我做的思维导图笔记的冰山一角：\n那么，写技术文章有何价值？个人认为写技术文章的价值主要有三方面：个人价值、企业价值和社会价值、企业价值。从个人角度来说，技术写作是树立个人技术影响力，提升自我价值的最快路径，没有之一；从公司角度，坚持长线的写作，对于公司的技术品牌，技术文化，有着巨大的推动作用；从更高的维度来说，技术写作也是提升整个社会技术水平，推动技术不断进步的源动力。\nhugo 初探 hugo 是什么？ Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\nhugo 中文官方文档\nhugo 英文官方文档\n安装 hugo 在 windows 下，你可以在此处下载\nwindows 版本下载链接\n如果你是 mac 系统，则可以通过如下命令安装（需要先安装 homebrew）\n1 brew install hugo 确认 hugo 安装是否成功 通过检查版本号的方式，确认 hugo 安装是否成功\n1 2 hugo version Hugo Static Site Generator v0.73.0/extended darwin/amd64 BuildDate: unknown # 输出结果 初始化网站目录 安装好之后，便可以初始化一个 hugo 项目，\n1 hugo new site demosite # 命令格式，hugo new site \u0026lt;项目名称\u0026gt; 下载一个 hugo 主题 hugo 主题可以理解为是一种网站样式，你可以在该页面选择自己心仪的 hugo 主题。我当前使用的是 LoveIt 这个主题，集成了很多插件，很好用很方便的一个中文博客模板。\n进入该目录，初始化 git 项目，并下载 hugo 主题\n1 2 3 cd demosite git init #初始化 git 项目 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt #下载主题 博客会采用 git 项目方式管理，所以需要初始化 git 项目 采用 submodule 的方式管理主题库 theme，方便及时更新和管理 配置主题 使用 LoveIt 的标准配置文件模板\n1 cp themes/LoveIt/exampleSite/config.toml . 需要修改一下主题路径 themesDir 配置，将其注释掉\n创建文章 创建一篇空文章\n1 hugo new posts/demo.md 另外，需要将生成文章头部的draft=true修改为draft=false，否则并不会生成草稿页面 启动 hugo 服务器 启动 hugo 服务器，进入 http://localhost:1313/ 预览页面\n1 hugo server -D 页面预览如下 构建静态页面 若要将博客托管在 github 上，需要上传静态页面。所以，需要使用 hugo 构建静态页面，构建命令如下：\n1 hugo -D 使用 Github Pages 搭建个人博客 个人博客整体架构 一个静态博客数据有两部分，一部分是静态页面（体积小），另一部分是图片或者大文件（文件体积大），通常来讲一个网站整体结构是静态页面放在服务器上（比如可以使用虚拟机、自己的服务器、github pages 项目），而对于大文件或者图片则通常会使用对象存储服务（比如对象存储或者 github 项目），它们前端使用一个 CDN 进行加速（比如云厂商的 CDN 服务或者 cloudinary），当然，在 HTTPS 已经普及的时代，一个 HTTPS 服务也是必不可少的。\n整体架构图如下：\n经过综合考量，个人建站选用组件如下：\n静态网站服务器：Github Pages 图片上传工具：picgo 图片存储服务：Github 项目 + jsdelivr 加速 域名服务商/域名购买：NameCheap HTTPS/CDN 服务提供商：Cloudfare 腾讯云服务中的 TCB 一键建站也挺好用的。但是因为个人图省钱和喜欢折腾，还是选择自己建站自己选择组件，一方面免费，另一方面可以对网络有更加深刻的理解。\nGithub Pages 是什么？ GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 index.html、HTML、CSS 和 JavaScript 文件，也可以通过构建过程运行文件，然后发布网站。\nGitHub Pages 可以识别指定分支根目录或者/docs 目录下的静态站点，具体可以在个人站点的 setting 中配置。\nGithub Pages 建站有两种类型：\n个人/组织站点，其域名格式形如https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/ 项目站点，其域名格式形如https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/\u0026lt;PROJECT\u0026gt;/ 你需要看清楚你的 Github Pages 建站类型，不同的建站类型的建站方法也不同，具体可以参考 官方手册\n这里我们以个人站点（User Pages）为例\n创建 Github Pages 项目 创建一个新的 github 项目，项目名称需要是\u0026lt;username.github.io\u0026gt;格式，如下图样例\n配置 pages 项目 点击进入 setting，搜索 github pages 关键字，找到相关配置：当前 github 默认分支已经是 main 分支，需要调整下；配置好之后即可通过用户名。github.io最初的 github 页面。\nhugo 生成静态页面 生成静态页面之前需要修改 config.toml 文件中的 baseURL 配置，将其修改为个人站点，比如我的就是 miss-you.github.io\n前面我们知道hugo -D可以生成静态页面，但该命令会默认将静态页面生成到 public 目录下，而 Github Pages 仅支持根目录/或者/docs 目录，所以我们需要将静态页面生成到 docs 目录下\n1 hugo -d docs 上传 github pages 项目 静态页面生成完成后，便可以将整个静态页面以及本项目其他文件上传到 github 项目中。先使用git remote命令添加远端仓库，将文件提交（git add+git commit），最后推送到 Github Pages 项目中\n1 2 3 4 5 6 git remote add origin git@github.com:Miss-you/miss-you.github.io.git # 将本地 git 项目与 github 项目相关联 git fetch origin # 拉取 github 项目 git checkout main #切换到主分支 main git add . git commit -m \u0026#34;init github pages\u0026#34; git push origin 当然，这里也可以采用git clone \u0026lt;YOUR-PROJECT-URL\u0026gt; \u0026amp;\u0026amp; cd \u0026lt;YOUR-PROJECT\u0026gt;拉取项目、上传文件（git add/commit/push) 的方式，上传 github 项目，这里不作过多演示\n发布脚本 虽然我们已经打通了基于 Github Pages 搭建个人博客的流程，但每次博客有修改都需要执行多条命令才能将博客发布，重复劳动且浪费时间，而程序员的天性是追求效率，应当用自动化（脚本）解决重复的工作。\n如下是一个常用脚本，会自动构建静态页面，然后提交构建出来的 docs 静态页面目录，将其推送到对应 Github Pages 项目中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/bin/sh # If a command fails then the deploy stops set -e printf \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026#34; # Build the project. hugo -d docs # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;` # Add changes to git. git add docs # Commit changes. msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin main FAQ 常见操作 TODO\n文章插入图片 图片上传问题\n图片存储问题\nTODO\n修改模板 TODO\n创建友链 TODO\n创建联系方式 TODO\n常见问题 Github Pages 项目报错：The submodule registered for ./themes/xxx could not be cloned. 原因是 Github Pages 项目，若要使用 submodule 应用第三方主题，需要使用 https 的地址而不是 git 地址\n[TOC] 符号不生效 toc 是 markdown 的一种进阶语法，用于自动生成目录，但是 hugo 并没有支持该语法。目录建议采用主题自带的目录功能，比如本文示例中的 LoveIt 主题。\n使用 loveit 或者切换到 loveit 主题入门教程：\nLoveIt 入门教程\n找不到主题，Error: module \u0026ldquo;LoveIt\u0026rdquo; not found 原因是由于 LoveIt 示例主题中的 config.toml 文件，其主题路径为\u0026quot;../..\u0026quot;，该目录下并不会有 LoveIt 主题，将其注释掉即可，或者修改 LoveIt 主题所在的相对路径\ngithub 搜索不到 LoveIt 主题 LoveIt 英文小写是 loveit，不是 lovelt，因为不注意的话 I 和 l 难以区分，容易混淆\njsdelivr latest图片找不到问题 https://cdn.jsdelivr.net/gh/Miss-you/img/how-to-create-blog/20201020132241.png\nhttps://cdn.jsdelivr.net/gh/Miss-you/img@1.0/how-to-create-blog/20201020132241.png\n必须要带版本号才可以找得到\n为什么latest用不了？ github的bug，他们的latest默认会去找master分支的，而不是main分支的图片……\n参考链接 hugo 中文官方文档 hugo 英文官方文档 hugo 主题站 github pages 官方手册 hugo loveit 主题使用教程 cloudfare 配置教程 picgo 官方教程 ","permalink":"https://miss-you.github.io/posts/how-to-create-blog/","summary":"\u003cp\u003e十一假期宅家无事，发现自己过去写了很多文章，却没有一个自己的博客，系统得管理自己的文章，所以准备将自己过去以及未来的文章都放到博客，以饷读者。另一方面，经过对 Serverless 博客、TCB 建站、虚拟机建站等一系列建站方式对比后，个人认为基于 Github Pages 最适合搭建个人技术博客，最重要的当然是免费，其次网上教程众多，可以快速建站，第三则是所有的博客直接托管在 github，也更符合个人习惯，最后则是自建个人博客可玩性和可扩展性好。\u003c/p\u003e\n\u003cp\u003e当然，这个方案并不是完美无缺，缺点也比较明显，比如需要考虑到安全信息泄漏问题（比如可能会泄露公司内的机密信息或者秘钥到 Github，所以需要准备安全扫描方案，这个我们会在另一篇文章谈）；另一方面，读者需要能够翻墙才可以访问 Github Pages；最后，则是没有 CDN 加速，如果访问者众多或者网站图片众多，加载速度很慢。\u003c/p\u003e\n\u003ch2 id=\"为什么要写技术文章\"\u003e为什么要写技术文章？\u003c/h2\u003e\n\u003cp\u003e其实，个人写文章最初是兴趣使然以及工作需要。众所周知，IT 是一个技术革新很快的行业，新的概念、新的语言、新的框架层出不穷，程序员需要持续学习，我有对每一个新的知识有做笔记的习惯，笔记攒多了便需要回顾总结整理，便形成了一篇篇的文章。\u003c/p\u003e\n\u003cp\u003e以前笔记的图找不到了，差不多在习惯使用电子笔记之前有十几本笔记，后来我习惯性使用思维导图 processon 等一系列工具记录笔记，比如这张图便是我做的思维导图笔记的冰山一角：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"图片\" loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Miss-you/img/how-to-create-blog/20201020131829.png\"\u003e\u003c/p\u003e\n\u003cp\u003e那么，写技术文章有何价值？个人认为写技术文章的价值主要有三方面：个人价值、企业价值和社会价值、企业价值。从个人角度来说，技术写作是树立个人技术影响力，提升自我价值的最快路径，没有之一；从公司角度，坚持长线的写作，对于公司的技术品牌，技术文化，有着巨大的推动作用；从更高的维度来说，技术写作也是提升整个社会技术水平，推动技术不断进步的源动力。\u003c/p\u003e\n\u003ch2 id=\"hugo-初探\"\u003ehugo 初探\u003c/h2\u003e\n\u003ch3 id=\"hugo-是什么\"\u003ehugo 是什么？\u003c/h3\u003e\n\u003cp\u003eHugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.gohugo.org/\"\u003ehugo 中文官方文档\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gohugo.io/documentation/\"\u003ehugo 英文官方文档\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"安装-hugo\"\u003e安装 hugo\u003c/h3\u003e\n\u003cp\u003e在 windows 下，你可以在此处下载\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/gohugoio/hugo/releases/download/v0.63.2/hugo_0.63.2_Windows-64bit.zip\"\u003ewindows 版本下载链接\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e如果你是 mac 系统，则可以通过如下命令安装（需要先安装 homebrew）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"确认-hugo-安装是否成功\"\u003e确认 hugo 安装是否成功\u003c/h3\u003e\n\u003cp\u003e通过检查版本号的方式，确认 hugo 安装是否成功\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-1-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eHugo Static Site Generator v0.73.0/extended darwin/amd64 BuildDate: unknown # 输出结果\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"初始化网站目录\"\u003e初始化网站目录\u003c/h3\u003e\n\u003cp\u003e安装好之后，便可以初始化一个 hugo 项目，\u003c/p\u003e","title":"使用 Github Pages 和 Hugo 搭建个人博客教程"},{"content":" 本文主要介绍如何使用 go 语言 database/sql 库从数据库中读取 null 值的问题，以及如何向数据库中插入 null 值。本文在这里使用的是 sql.NullString, sql.NullInt64, sql.NullFloat64 等结构体，为了方便书写，它们的泛指我会使用 sql.Null 来表示\n要点 从数据库读取可能为 null 值得值时，可以选择使用 sql.NULL 来读取；或者使用 IFNULL、COALESCE 等命令让数据库查询值返回不为\u0026quot;\u0026ldquo;或者 NULL 若需要往数据库中插入 null 值，则依然可以使用 sql.NULL 存储所需的值，然后进行插入 NULL 值 直接使用 sql.NULL 类型容易出现 valid 遗漏设置等问题，普通 int、string 与其转换时，请写几个简单的 get、set 函数 本 demo 使用的数据库表以及数据如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 mysql\u0026gt; desc person; +------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +------------+--------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | | first_name | varchar(100) | NO | | NULL | | | last_name | varchar(40) | YES | | NULL | | | age | int(11) | YES | | NULL | | +------------+--------------+------+-----+---------+----------------+ mysql\u0026gt; select * from person; +----+------------+-----------+------+ | id | first_name | last_name | age | +----+------------+-----------+------+ | 1 | yousa | NULL | NULL | +----+------------+-----------+------+ mysql\u0026gt; show create table person; +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | person | CREATE TABLE `person` ( `id` int(11) NOT NULL AUTO_INCREMENT, `first_name` varchar(100) NOT NULL, `last_name` varchar(40) DEFAULT NULL, `age` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 | +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.00 sec) 从数据库中读取 NULL 值 如果不作处理直接从数据库中读取 NULL 值到 string/int，会发生如下错误错误\n1 2 3 4 5 Scan NULL 值到 string 的报错 sql: Scan error on column index 1: unsupported Scan, storing driver.Value type \u0026lt;nil\u0026gt; into type *string Scan NULL 值到 int 的报错 sql: Scan error on column index 1: converting driver.Value type \u0026lt;nil\u0026gt; (\u0026#34;\u0026lt;nil\u0026gt;\u0026#34;) to a int: invalid syntax 使用如下的 struct 来读取数据库内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 type Person struct { firstName string lastName string age\tint } //由于只有一行，直接使用 QueryRow row := db.QueryRow(\u0026#34;SELECT first_name, last_name FROM person WHERE first_name=\u0026#39;yousa\u0026#39;\u0026#34;) err = row.Scan(\u0026amp;hello.firstName, \u0026amp;hello.lastName) if err != nil { fmt.Println(err) } fmt.Println(hello) row1 := db.QueryRow(\u0026#34;SELECT first_name, age FROM person WHERE first_name=\u0026#39;yousa\u0026#39;\u0026#34;) err = row1.Scan(\u0026amp;hello.firstName, \u0026amp;hello.age) if err != nil { fmt.Println(err) } fmt.Println(hello) 运行代码，可以通过日志看出来，错误来自 Scan 将 NULL 值赋值给 int 或者 string 时，报错；解决这个问题可以使用 sql 原生结构体 sql.Null 来解决\n使用 sqlNull sql.Null 在 sql 库中声明如下，在读取时，（比如读取的值存储到 NullInt64），假如发现存储的值是 NULL，则会将 NullInt64 的 valid 设置为 false，然后不会将值存储到 Int64 中，Int64 值默认为 0，如果是 NullString 则 String 值时 nil；如果是正常值，则会将 Valid 赋值为 true，将值存储到 Int64 中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 type NullInt64 struct { Int64 int64 Valid bool // Valid is true if Int64 is not NULL } func (n *NullInt64) Scan(value interface{}) error func (n NullInt64) Value() (driver.Value, error) type NullString struct { String string Valid bool // Valid is true if String is not NULL } func (ns *NullString) Scan(value interface{}) error func (ns NullString) Value() (driver.Value, error) 代码修改为如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 type Person struct { firstName string lastNullName sql.NullString nullAge sql.NullInt64 } rowNull := db.QueryRow(\u0026#34;SELECT first_name, last_name FROM person WHERE first_name=\u0026#39;yousa\u0026#39;\u0026#34;) err = rowNull.Scan(\u0026amp;hello.firstName, \u0026amp;hello.lastNullName) if err != nil { fmt.Println(err) } fmt.Println(hello) rowNull1 := db.QueryRow(\u0026#34;SELECT first_name, age FROM person WHERE first_name=\u0026#39;yousa\u0026#39;\u0026#34;) err = rowNull1.Scan(\u0026amp;hello.firstName, \u0026amp;hello.nullAge) if err != nil { fmt.Println(err) } fmt.Println(hello) 输出结果\n1 {yousa 0 { false} {0 false}} 使用 IFNULL 或者 COALESCE coalesce() 解释：返回参数中的第一个非空表达式（从左向右依次类推）\nIFNULL(expr1,expr2): 如果 expr1 不是 NULL，IFNULL() 返回 expr1，否则它返回 expr2。IFNULL() 返回一个数字或字符串值，取决于它被使用的上下文环境。\n查询语句使用一个默认值来替换 NULL 即可\n1 2 SELECT first_name, COALESCE(age, 0) FROM person;// SELECT first_name, IFNULL(age, 0) FROM person;// 往数据库中插入 NULL 值 前面我们对 SELECT 语句使用了 sql.Null 类型，同理，INSERT、UPDATE 语句也可以通过使用这种类型来插入 nil 值\n代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 hello := Person { firstName: \u0026#34;\u0026#34;, lastName: \u0026#34;\u0026#34;, age: 0, lastNullName: sql.NullString{String:\u0026#34;\u0026#34;, Valid:false}, nullAge: sql.NullInt64{Int64:0, Valid:false}} _, err = db.Exec( \u0026#34;INSERT INTO person (first_name, last_name) VALUES (?, ?)\u0026#34;, \u0026#34;yousa1\u0026#34;, hello.lastName) if err != nil { fmt.Println(err) } _, err = db.Exec( \u0026#34;INSERT INTO person (first_name, last_name) VALUES (?, ?)\u0026#34;, \u0026#34;yousa2\u0026#34;, hello.lastNullName) if err != nil { fmt.Println(err) } //数据库插入结果 mysql\u0026gt; select * from person; +----+------------+-----------+------+ | id | first_name | last_name | age | +----+------------+-----------+------+ | 1 | yousa | NULL | NULL | | 2 | yousa1 | | NULL | | 3 | yousa2 | NULL | NULL | +----+------------+-----------+------+ 解释下 db.Exec 操作 hello.lastNullName 的过程：\n首先它会调用 hello.lastNullName 的 Value 方法，获取到 driver.Value，然后检验 Valid 值是 true 还是 false，如果是 false 则会返回一个 nil 值（nil 值传给 sql driver 会被认为是 NULL 值），如果是 true 则会将 hello.lastNullName.String 的值传过去。\nPS: 为了保证你所插入的值能如你所期望是 NULL 值，一定记得要将 sql.Null 中 Valid 值置为 false\n使用 NULL 还是有很多危害的，再回顾下数据库中使用 NULL 值的危害\n为什么不建议使用 NULL 所有使用 NULL 值的情况，都可以通过一个有意义的值的表示，这样有利于代码的可读性和可维护性，并能从约束上增强业务数据的规范性。 NULL 值在 timestamp 类型下容易出问题，特别是没有启用参数 explicit_defaults_for_timestamp NOT IN、!= 等负向条件查询在有 NULL 值的情况下返回永远为空结果，查询容易出错 Null 列需要更多的存储空间：需要一个额外字节作为判断是否为 NULL 的标志位 NULL 值到非 NULL 的更新无法做到原地更新，更容易发生索引分裂，从而影响性能。 PS：但把 NULL 列改为 NOT NULL 带来的性能提示很小，除非确定它带来了问题，否则不要把它当成优先的优化措施，最重要的是使用的列的类型的适当性。\n当然有些情况是不得不使用 NULL 值进行存储，或者在查询时由于 left/right join 等导致 NULL 值，但总体来说，能少用就少用。\nhelper func（提升效率/减少错误） 如果使用 sql.NULL 的话，由于其有两个字段，如果直接手动赋值的话还是很容易遗漏，所以还是需要简单的转换函数，这里给了两个简单的 helper fuc，分别是将 int64 转换成 NullInt64 和将 string 转换成 NullString\n1 2 3 4 5 6 7 8 9 10 //ToNullString invalidates a sql.NullString if empty, validates if not empty func ToNullString(s string) sql.NullString { return sql.NullString{String : s, Valid : s != \u0026#34;\u0026#34;} } //ToNullInt64 validates a sql.NullInt64 if incoming string evaluates to an integer, invalidates if it does not func ToNullInt64(s string) sql.NullInt64 { i, err := strconv.Atoi(s) return sql.NullInt64{Int64 : int64(i), Valid : err == nil} } 参考博客 https://github.com/go-sql-driver/mysql/issues/34 https://github.com/guregu/null https://gocn.io/question/243 https://godoc.org/database/sql http://url.cn/5cFTz4W 一千个不用 Null 的理由 ","permalink":"https://miss-you.github.io/posts/go-mysql-null/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文主要介绍如何使用 go 语言 database/sql 库从数据库中读取 null 值的问题，以及如何向数据库中插入 null 值。本文在这里使用的是 sql.NullString, sql.NullInt64, sql.NullFloat64 等结构体，为了方便书写，它们的泛指我会使用 sql.Null 来表示\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"要点\"\u003e要点\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e从数据库读取可能为 null 值得值时，可以选择使用 sql.NULL 来读取；或者使用 IFNULL、COALESCE 等命令让数据库查询值返回不为\u0026quot;\u0026ldquo;或者 NULL\u003c/li\u003e\n\u003cli\u003e若需要往数据库中插入 null 值，则依然可以使用 sql.NULL 存储所需的值，然后进行插入 NULL 值\u003c/li\u003e\n\u003cli\u003e直接使用 sql.NULL 类型容易出现 valid 遗漏设置等问题，普通 int、string 与其转换时，请写几个简单的 get、set 函数\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e本 demo 使用的数据库表以及数据如下\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-30\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-30\"\u003e30\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-mysql\" data-lang=\"mysql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003edesc\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+------------+--------------+------+-----+---------+----------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eField\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eType\u003c/span\u003e\u003cspan class=\"w\"\u003e         \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eKey\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eExtra\u003c/span\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+------------+--------------+------+-----+---------+----------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e         \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePRI\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eauto_increment\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast_name\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eYES\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eYES\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+------------+--------------+------+-----+---------+----------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+----+------------+-----------+------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+----+------------+-----------+------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eyousa\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+----+------------+-----------+------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eshow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ecreate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003etable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTable\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCreate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTable\u003c/span\u003e\u003cspan class=\"w\"\u003e                                                                                                                                                                                                                                           \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNOT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eAUTO_INCREMENT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003efirst_name\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNOT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003elast_name\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eKEY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eENGINE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eInnoDB\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eAUTO_INCREMENT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kp\"\u003eCHARSET\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"从数据库中读取-null-值\"\u003e从数据库中读取 NULL 值\u003c/h2\u003e\n\u003cp\u003e如果不作处理直接从数据库中读取 NULL 值到 string/int，会发生如下错误错误\u003c/p\u003e","title":"Go 语言：解决数据库中 null 值的问题"},{"content":"其实是这样的，当前大概有一个思路\n过去传统的深度工作，专注于个人深度工作方法论，比如「GTD，get things down」「单核工作法」「番茄钟工作法」\n又或者，经典管理学方法论，其核心是通过目标对齐、任务分解、流程可视化和持续改进，让一群人能够高效地朝着共同目标前进。\nAI正在将管理学思维下沉到每个知识工作者，迫使我们从“执行者”转变为“迷你管理者”\n但实际上，不仅仅如此。因为一些客观存在的局限性，有两个明显的痛点，即「看似省力，结果返工」和「审查成瓶颈」，人往往会变成那个瓶颈\n那么应该如何利用好ai呢？又或者说，作为一个人，我如何管理好一个ai，管理好10个，甚至上百个ai为我工作呢？\n个人现在还在学习和思考，仅仅只能做到简单的异步，基本上只能算是管理2-3个ai。\n如果真要做什么的话，我会想写一本书，因为我最初也是通过这样的方式学到了很多好的深度工作的技巧\n但苦于自己只是单纯的比较简单实践以及思考，而且这些东西真的迭代非常快。\n不过如果可以的话，还是会想写，大概就是反哺吧。\n不过从出版社角度，因为自己没有那种特别适合畅销的title，所以之前的想法就是单纯写作输出，不追求什么结果。或者如果有什么好的合作机会，自己也真的很乐意去合作\n","permalink":"https://miss-you.github.io/posts/20250725-claude-code-faq/%E6%80%9D%E8%80%83/","summary":"\u003cp\u003e其实是这样的，当前大概有一个思路\u003c/p\u003e\n\u003cp\u003e过去传统的深度工作，专注于个人深度工作方法论，比如「GTD，get things down」「单核工作法」「番茄钟工作法」\u003c/p\u003e\n\u003cp\u003e又或者，经典管理学方法论，其核心是通过目标对齐、任务分解、流程可视化和持续改进，让一群人能够高效地朝着共同目标前进。\u003c/p\u003e\n\u003cp\u003eAI正在将管理学思维下沉到每个知识工作者，迫使我们从“执行者”转变为“迷你管理者”\u003c/p\u003e\n\u003cp\u003e但实际上，不仅仅如此。因为一些客观存在的局限性，有两个明显的痛点，即「看似省力，结果返工」和「审查成瓶颈」，人往往会变成那个瓶颈\u003c/p\u003e\n\u003cp\u003e那么应该如何利用好ai呢？又或者说，作为一个人，我如何管理好一个ai，管理好10个，甚至上百个ai为我工作呢？\u003c/p\u003e\n\u003cp\u003e个人现在还在学习和思考，仅仅只能做到简单的异步，基本上只能算是管理2-3个ai。\u003c/p\u003e\n\u003cp\u003e如果真要做什么的话，我会想写一本书，因为我最初也是通过这样的方式学到了很多好的深度工作的技巧\u003c/p\u003e\n\u003cp\u003e但苦于自己只是单纯的比较简单实践以及思考，而且这些东西真的迭代非常快。\u003c/p\u003e\n\u003cp\u003e不过如果可以的话，还是会想写，大概就是反哺吧。\u003c/p\u003e\n\u003cp\u003e不过从出版社角度，因为自己没有那种特别适合畅销的title，所以之前的想法就是单纯写作输出，不追求什么结果。或者如果有什么好的合作机会，自己也真的很乐意去合作\u003c/p\u003e","title":""},{"content":"1️⃣ 设定写作目标与受众 要素 提问 Claude Code 的示例 目标 “我想写一篇面向中级后端开发者的文章，帮助他们理解 Event Sourcing 的核心概念并快速上手。” 受众痛点 “这些读者通常困惑于日志增长、回放性能和一致性验证，请给我一份简要需求清单。” 技巧：把“读者画像 + 阅读后应会什么”一次性告诉模型，可显著提升后续输出的精准度。\n2️⃣ 生成并迭代大纲 让 Claude Code 先给出 3～5 种不同结构的大纲。\n选一个你喜欢的版本，再让它展开到二级、三级标题。\n1 请保留标题层级，列出每节要点（每点 1 行），并提示需要的示例代码或图示。 亲手微调顺序、合并重复部分，再贴回去让 Claude Code “对比前后差异，输出精炼后的最终大纲”。\n3️⃣ 草拟正文 \u0026amp; 示例代码 分段推进：一次只投喂 1 节标题，让模型输出 ≤300 字文字 + 对应代码片段。\n“按照最终大纲的 第 2.1 节，写一段 250 字的介绍，并生成一个最小可运行的 Python 示例（含注释）。”\n自动验码：在 Code 模式里直接执行示例，若报错，把 traceback 和你的预期反馈给模型，让它修正。\n交叉追问：\n“这段话里面有哪些概念需要链接到官方文档？请给出 URL 列表。” “帮我把示例改成 JavaScript 版本，并标注与 Python 版的区别。” 4️⃣ 质量把关循环 维度 提示词 技术准确性 “请充当审核员，指出上文可能误导读者的地方并给出改进方案。” 读者体验 “从阅读流畅度和信息量平衡角度，给本节打分并解释原因。” SEO / 可搜索性 “基于关键字 event sourcing implementation，检查标题与小节是否覆盖这些搜索词。” 1 → 接受／拒绝修改 → 重新生成 → 再审 5️⃣ 统一风格与排版 段落长度：\n1 把全篇控制在每段 3–5 句，避免超过 120 字。 术语一致：\n1 把 “事件回放” 一律改成 “Event Replay”，并保持英文斜体。 代码高亮：让模型直接输出带语言标识的 Markdown 块：\n1 2 ```python # code here 可视化（选）：\n1 用 Mermaid 画出 Event Store 与 Read Model 的交互时序图。 6️⃣ 最终审校 \u0026amp; 发布前清单 通读全文，确保逻辑流畅、示例能跑、链接有效。 跑一次拼写/语法检查（可让 Claude Code 批量校对）。 版权合规：确认引用、图片、代码 license。 版式预览：在目标发布平台（博客、公众号、Dev.to 等）粘贴草稿，看渲染是否正常。 快速提示卡（可收藏） 1 2 3 4 5 🔹 大纲起草：「请给出三种不同角度的大纲，并说明各适用读者」 🔹 深挖小节：「用类比解释 XXX，控制在 150 字以内」 🔹 代码校正：「下面的报错说明了什么？请修复并解释修改点」 🔹 可视化：「用 Mermaid 绘制流程，显示 X→Y→Z 三步」 🔹 审稿人模式：「作为技术编辑，点评上一段的准确性和可读性」 ","permalink":"https://miss-you.github.io/posts/how-to-control-claude-to-write/","summary":"\u003ch3 id=\"1-设定写作目标与受众\"\u003e1️⃣ 设定写作目标与受众\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e要素\u003c/th\u003e\n          \u003cth\u003e提问 Claude Code 的示例\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e目标\u003c/td\u003e\n          \u003ctd\u003e“我想写一篇面向中级后端开发者的文章，帮助他们理解 \u003cstrong\u003eEvent Sourcing\u003c/strong\u003e 的核心概念并快速上手。”\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e受众痛点\u003c/td\u003e\n          \u003ctd\u003e“这些读者通常困惑于日志增长、回放性能和一致性验证，请给我一份简要需求清单。”\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e技巧\u003c/strong\u003e：把“读者画像 + 阅读后应会什么”一次性告诉模型，可显著提升后续输出的精准度。\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch3 id=\"2-生成并迭代大纲\"\u003e2️⃣ 生成并迭代\u003cstrong\u003e大纲\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e让 Claude Code 先给出 3～5 种不同结构的大纲。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e选一个你喜欢的版本，再让它展开到二级、三级标题。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e请保留标题层级，列出每节要点（每点 1 行），并提示需要的示例代码或图示。\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e亲手微调顺序、合并重复部分，再贴回去让 Claude Code “对比前后差异，输出精炼后的最终大纲”。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"3-草拟正文--示例代码\"\u003e3️⃣ 草拟正文 \u0026amp; 示例代码\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e分段推进\u003c/strong\u003e：一次只投喂 1 节标题，让模型输出 ≤300 字文字 + 对应代码片段。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“按照最终大纲的 \u003cem\u003e第 2.1 节\u003c/em\u003e，写一段 250 字的介绍，并生成一个最小可运行的 Python 示例（含注释）。”\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e自动验码\u003c/strong\u003e：在 Code 模式里直接执行示例，若报错，把 traceback 和你的预期反馈给模型，让它修正。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e交叉追问\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“这段话里面有哪些概念需要链接到官方文档？请给出 URL 列表。”\u003c/li\u003e\n\u003cli\u003e“帮我把示例改成 JavaScript 版本，并标注与 Python 版的区别。”\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"4-质量把关循环\"\u003e4️⃣ 质量把关循环\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e维度\u003c/th\u003e\n          \u003cth\u003e提示词\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e技术准确性\u003c/td\u003e\n          \u003ctd\u003e“请充当审核员，指出上文可能误导读者的地方并给出改进方案。”\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e读者体验\u003c/td\u003e\n          \u003ctd\u003e“从阅读流畅度和信息量平衡角度，给本节打分并解释原因。”\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSEO / 可搜索性\u003c/td\u003e\n          \u003ctd\u003e“基于关键字 \u003cem\u003eevent sourcing implementation\u003c/em\u003e，检查标题与小节是否覆盖这些搜索词。”\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e→ 接受／拒绝修改 → 重新生成 → 再审\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"5-统一风格与排版\"\u003e5️⃣ 统一风格与排版\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e段落长度\u003c/strong\u003e：\u003c/p\u003e","title":""}]