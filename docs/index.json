[{"categories":["Env"],"content":"Github Pages 建站教程 ","date":"2020-10-10","objectID":"/how-to-create-blog/","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"十一假期宅家无事，发现自己过去写了很多文章，却没有一个自己的博客，系统得管理自己的文章，所以准备将自己过去以及未来的文章都放到博客，以饷读者。另一方面，经过对 Serverless 博客、TCB 建站、虚拟机建站等一系列建站方式对比后，个人认为基于 Github Pages 最适合搭建个人技术博客，最重要的当然是免费，其次网上教程众多，可以快速建站，第三则是所有的博客直接托管在 github，也更符合个人习惯，最后则是自建个人博客可玩性和可扩展性好。 当然，这个方案并不是完美无缺，缺点也比较明显，比如需要考虑到安全信息泄漏问题（比如可能会泄露公司内的机密信息或者秘钥到 Github，所以需要准备安全扫描方案，这个我们会在另一篇文章谈）；另一方面，读者需要能够翻墙才可以访问 Github Pages；最后，则是没有 CDN 加速，如果访问者众多或者网站图片众多，加载速度很慢。 ","date":"2020-10-10","objectID":"/how-to-create-blog/:0:0","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"为什么要写技术文章？ 其实，个人写文章最初是兴趣使然以及工作需要。众所周知，IT 是一个技术革新很快的行业，新的概念、新的语言、新的框架层出不穷，程序员需要持续学习，我有对每一个新的知识有做笔记的习惯，笔记攒多了便需要回顾总结整理，便形成了一篇篇的文章。 以前笔记的图找不到了，差不多在习惯使用电子笔记之前有十几本笔记，后来我习惯性使用思维导图 processon 等一系列工具记录笔记，比如这张图便是我做的思维导图笔记的冰山一角： 那么，写技术文章有何价值？个人认为写技术文章的价值主要有三方面：个人价值、企业价值和社会价值、企业价值。从个人角度来说，技术写作是树立个人技术影响力，提升自我价值的最快路径，没有之一；从公司角度，坚持长线的写作，对于公司的技术品牌，技术文化，有着巨大的推动作用；从更高的维度来说，技术写作也是提升整个社会技术水平，推动技术不断进步的源动力。 ","date":"2020-10-10","objectID":"/how-to-create-blog/:1:0","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"hugo 初探 ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:0","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"hugo 是什么？ Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。 hugo 中文官方文档 hugo 英文官方文档 ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:1","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"安装 hugo 在 windows 下，你可以在此处下载 https://github.com/gohugoio/hugo/releases/download/v0.63.2/hugo_0.63.2_Windows-64bit.zip 如果你是 mac 系统，则可以通过如下命令安装（需要先安装 homebrew） brew install hugo ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:2","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"确认 hugo 安装是否成功 通过检查版本号的方式，确认 hugo 安装是否成功 hugo version Hugo Static Site Generator v0.73.0/extended darwin/amd64 BuildDate: unknown # 输出结果 ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:3","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"初始化网站目录 安装好之后，便可以初始化一个 hugo 项目， hugo new site demosite # 命令格式，hugo new site \u003c项目名称\u003e ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:4","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"下载一个 hugo 主题 hugo 主题可以理解为是一种网站样式，你可以在该页面选择自己心仪的 hugo 主题。我当前使用的是 LoveIt 这个主题，集成了很多插件，很好用很方便的一个中文博客模板。 进入该目录，初始化 git 项目，并下载 hugo 主题 cd demosite git init #初始化 git 项目 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt #下载主题 博客会采用 git 项目方式管理，所以需要初始化 git 项目 采用 submodule 的方式管理主题库 theme，方便及时更新和管理 ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:5","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"配置主题 使用 LoveIt 的标准配置文件模板 cp themes/LoveIt/exampleSite/config.toml . 需要修改一下主题路径 themesDir 配置，将其注释掉 ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:6","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"创建文章 创建一篇空文章 hugo new posts/demo.md 另外，需要将生成文章头部的draft=true修改为draft=false，否则并不会生成草稿页面 ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:7","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"启动 hugo 服务器 启动 hugo 服务器，进入 http://localhost:1313/ 预览页面 hugo server -D 页面预览如下 ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:8","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"构建静态页面 若要将博客托管在 github 上，需要上传静态页面。所以，需要使用 hugo 构建静态页面，构建命令如下： hugo -D ","date":"2020-10-10","objectID":"/how-to-create-blog/:2:9","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"使用 Github Pages 搭建个人博客 ","date":"2020-10-10","objectID":"/how-to-create-blog/:3:0","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"Github Pages 是什么？ GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 index.html、HTML、CSS 和 JavaScript 文件，也可以通过构建过程运行文件，然后发布网站。 GitHub Pages 可以识别指定分支根目录或者/docs 目录下的静态站点，具体可以在个人站点的 setting 中配置。 Github Pages 建站有两种类型： 个人/组织站点，其域名格式形如https://\u003cUSERNAME|ORGANIZATION\u003e.github.io/ 项目站点，其域名格式形如https://\u003cUSERNAME|ORGANIZATION\u003e.github.io/\u003cPROJECT\u003e/ 你需要看清楚你的 Github Pages 建站类型，不同的建站类型的建站方法也不同，具体可以参考 官方手册 这里我们以个人站点（User Pages）为例 ","date":"2020-10-10","objectID":"/how-to-create-blog/:3:1","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"创建 Github Pages 项目 创建一个新的 github 项目，项目名称需要是\u003c用户名。github.io\u003e格式，如下图样例 ","date":"2020-10-10","objectID":"/how-to-create-blog/:3:2","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"配置 pages 项目 点击进入 setting，搜索 github pages 关键字，找到相关配置：当前 github 默认分支已经是 main 分支，需要调整下；配置好之后即可通过用户名。github.io最初的 github 页面。 ","date":"2020-10-10","objectID":"/how-to-create-blog/:3:3","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"hugo 生成静态页面 生成静态页面之前需要修改 config.toml 文件中的 baseURL 配置，将其修改为个人站点，比如我的就是 miss-you.github.io 前面我们知道hugo -D可以生成静态页面，但该命令会默认将静态页面生成到 public 目录下，而 Github Pages 仅支持根目录/或者/docs 目录，所以我们需要将静态页面生成到 docs 目录下 hugo -d docs ","date":"2020-10-10","objectID":"/how-to-create-blog/:3:4","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"上传 github pages 项目 静态页面生成完成后，便可以将整个静态页面以及本项目其他文件上传到 github 项目中。先使用git remote命令添加远端仓库，将文件提交（git add+git commit），最后推送到 Github Pages 项目中 git remote add origin git@github.com:Miss-you/miss-you.github.io.git # 将本地 git 项目与 github 项目相关联 git fetch origin # 拉取 github 项目 git checkout main #切换到主分支 main git add . git commit -m \"init github pages\" git push origin 当然，这里也可以采用git clone \u003cYOUR-PROJECT-URL\u003e \u0026\u0026 cd \u003cYOUR-PROJECT\u003e拉取项目、上传文件（git add/commit/push) 的方式，上传 github 项目，这里不作过多演示 ","date":"2020-10-10","objectID":"/how-to-create-blog/:3:5","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"发布脚本 虽然我们已经打通了基于 Github Pages 搭建个人博客的流程，但每次博客有修改都需要执行多条命令才能将博客发布，重复劳动且浪费时间，而程序员的天性是追求效率，应当用自动化（脚本）解决重复的工作。 如下是一个常用脚本，会自动构建静态页面，然后提交构建出来的 docs 静态页面目录，将其推送到对应 Github Pages 项目中 #!/bin/sh # If a command fails then the deploy stops set -e printf \"\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\" # Build the project. hugo -d docs # if using a theme, replace with `hugo -t \u003cYOURTHEME\u003e` # Add changes to git. git add docs # Commit changes. msg=\"rebuilding site $(date)\" if [ -n \"$*\" ]; then msg=\"$*\" fi git commit -m \"$msg\" # Push source and build repos. git push origin main ","date":"2020-10-10","objectID":"/how-to-create-blog/:3:6","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"FAQ ","date":"2020-10-10","objectID":"/how-to-create-blog/:4:0","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"常见操作 TODO 修改模板 TODO 创建友链 TODO 创建联系方式 TODO 文章插入图片 TODO ","date":"2020-10-10","objectID":"/how-to-create-blog/:4:1","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"常见问题 Github Pages 项目报错：The submodule registered for ./themes/xxx could not be cloned. 原因是 Github Pages 项目，若要使用 submodule 应用第三方主题，需要使用 https 的地址而不是 git 地址 [TOC] 符号不生效 toc 是 markdown 的一种进阶语法，用于自动生成目录，但是 hugo 并没有支持该语法。目录建议采用主题自带的目录功能，比如本文示例中的 LoveIt 主题。 使用 loveit 或者切换到 loveit 主题入门教程： https://hugoloveit.com/zh-cn/theme-documentation-basics/#basic-configuration 找不到主题，Error: module “LoveIt” not found 原因是由于 LoveIt 示例主题中的 config.toml 文件，其主题路径为”../..\"，该目录下并不会有 LoveIt 主题，将其注释掉即可，或者修改 LoveIt 主题所在的相对路径 github 搜索不到 LoveIt 主题 LoveIt 英文小写是 loveit，不是 lovelt，因为不注意的话 I 和 l 难以区分，容易混淆 ","date":"2020-10-10","objectID":"/how-to-create-blog/:4:2","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["Env"],"content":"参考链接 hugo 中文官方文档 https://www.gohugo.org/ hugo 英文官方文档 https://gohugo.io/documentation/ hugo 主题站 https://www.gohugo.org/theme/ github pages 官方手册 https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages hugo loveit 主题使用教程 https://hugoloveit.com/zh-cn/theme-documentation-basics/#basic-configuration ","date":"2020-10-10","objectID":"/how-to-create-blog/:5:0","tags":["blog","github pages"],"title":"使用 Github Pages 和 Hugo 搭建个人博客教程","uri":"/how-to-create-blog/"},{"categories":["GoLang"],"content":"本文主要介绍如何使用 go 语言 database/sql 库从数据库中读取 null 值的问题，以及如何向数据库中插入 null 值。本文在这里使用的是 sql.NullString, sql.NullInt64, sql.NullFloat64 等结构体，为了方便书写，它们的泛指我会使用 sql.Null 来表示. ","date":"2020-10-08","objectID":"/go-mysql-null/","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":" 本文主要介绍如何使用 go 语言 database/sql 库从数据库中读取 null 值的问题，以及如何向数据库中插入 null 值。本文在这里使用的是 sql.NullString, sql.NullInt64, sql.NullFloat64 等结构体，为了方便书写，它们的泛指我会使用 sql.Null 来表示 ","date":"2020-10-08","objectID":"/go-mysql-null/:0:0","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":"要点 从数据库读取可能为 null 值得值时，可以选择使用 sql.NULL 来读取；或者使用 IFNULL、COALESCE 等命令让数据库查询值返回不为\"“或者 NULL 若需要往数据库中插入 null 值，则依然可以使用 sql.NULL 存储所需的值，然后进行插入 NULL 值 直接使用 sql.NULL 类型容易出现 valid 遗漏设置等问题，普通 int、string 与其转换时，请写几个简单的 get、set 函数 本 demo 使用的数据库表以及数据如下 mysql\u003e desc person; +------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +------------+--------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | | first_name | varchar(100) | NO | | NULL | | | last_name | varchar(40) | YES | | NULL | | | age | int(11) | YES | | NULL | | +------------+--------------+------+-----+---------+----------------+ mysql\u003e select * from person; +----+------------+-----------+------+ | id | first_name | last_name | age | +----+------------+-----------+------+ | 1 | yousa | NULL | NULL | +----+------------+-----------+------+ mysql\u003e show create table person; +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | person | CREATE TABLE `person` ( `id` int(11) NOT NULL AUTO_INCREMENT, `first_name` varchar(100) NOT NULL, `last_name` varchar(40) DEFAULT NULL, `age` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 | +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.00 sec) ","date":"2020-10-08","objectID":"/go-mysql-null/:1:0","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":"从数据库中读取 NULL 值 如果不作处理直接从数据库中读取 NULL 值到 string/int，会发生如下错误错误 Scan NULL 值到 string 的报错 sql: Scan error on column index 1: unsupported Scan, storing driver.Value type \u003cnil\u003e into type *string Scan NULL 值到 int 的报错 sql: Scan error on column index 1: converting driver.Value type \u003cnil\u003e (\"\u003cnil\u003e\") to a int: invalid syntax 使用如下的 struct 来读取数据库内容 type Person struct { firstName string lastName string age int } //由于只有一行，直接使用 QueryRow row := db.QueryRow(\"SELECT first_name, last_name FROM person WHERE first_name='yousa'\") err = row.Scan(\u0026hello.firstName, \u0026hello.lastName) if err != nil { fmt.Println(err) } fmt.Println(hello) row1 := db.QueryRow(\"SELECT first_name, age FROM person WHERE first_name='yousa'\") err = row1.Scan(\u0026hello.firstName, \u0026hello.age) if err != nil { fmt.Println(err) } fmt.Println(hello) 运行代码，可以通过日志看出来，错误来自 Scan 将 NULL 值赋值给 int 或者 string 时，报错；解决这个问题可以使用 sql 原生结构体 sql.Null 来解决 ","date":"2020-10-08","objectID":"/go-mysql-null/:2:0","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":"使用 sqlNull sql.Null 在 sql 库中声明如下，在读取时，（比如读取的值存储到 NullInt64），假如发现存储的值是 NULL，则会将 NullInt64 的 valid 设置为 false，然后不会将值存储到 Int64 中，Int64 值默认为 0，如果是 NullString 则 String 值时 nil；如果是正常值，则会将 Valid 赋值为 true，将值存储到 Int64 中。 type NullInt64 struct { Int64 int64 Valid bool // Valid is true if Int64 is not NULL } func (n *NullInt64) Scan(value interface{}) error func (n NullInt64) Value() (driver.Value, error) type NullString struct { String string Valid bool // Valid is true if String is not NULL } func (ns *NullString) Scan(value interface{}) error func (ns NullString) Value() (driver.Value, error) 代码修改为如下： type Person struct { firstName string lastNullName sql.NullString nullAge sql.NullInt64 } rowNull := db.QueryRow(\"SELECT first_name, last_name FROM person WHERE first_name='yousa'\") err = rowNull.Scan(\u0026hello.firstName, \u0026hello.lastNullName) if err != nil { fmt.Println(err) } fmt.Println(hello) rowNull1 := db.QueryRow(\"SELECT first_name, age FROM person WHERE first_name='yousa'\") err = rowNull1.Scan(\u0026hello.firstName, \u0026hello.nullAge) if err != nil { fmt.Println(err) } fmt.Println(hello) 输出结果 {yousa 0 { false} {0 false}} ","date":"2020-10-08","objectID":"/go-mysql-null/:2:1","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":"使用 IFNULL 或者 COALESCE coalesce() 解释：返回参数中的第一个非空表达式（从左向右依次类推） IFNULL(expr1,expr2): 如果 expr1 不是 NULL，IFNULL() 返回 expr1，否则它返回 expr2。IFNULL() 返回一个数字或字符串值，取决于它被使用的上下文环境。 查询语句使用一个默认值来替换 NULL 即可 SELECT first_name, COALESCE(age, 0) FROM person;// SELECT first_name, IFNULL(age, 0) FROM person;// ","date":"2020-10-08","objectID":"/go-mysql-null/:2:2","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":"往数据库中插入 NULL 值 前面我们对 SELECT 语句使用了 sql.Null 类型，同理，INSERT、UPDATE 语句也可以通过使用这种类型来插入 nil 值 代码如下： hello := Person { firstName: \"\", lastName: \"\", age: 0, lastNullName: sql.NullString{String:\"\", Valid:false}, nullAge: sql.NullInt64{Int64:0, Valid:false}} _, err = db.Exec( \"INSERT INTO person (first_name, last_name) VALUES (?, ?)\", \"yousa1\", hello.lastName) if err != nil { fmt.Println(err) } _, err = db.Exec( \"INSERT INTO person (first_name, last_name) VALUES (?, ?)\", \"yousa2\", hello.lastNullName) if err != nil { fmt.Println(err) } //数据库插入结果 mysql\u003e select * from person; +----+------------+-----------+------+ | id | first_name | last_name | age | +----+------------+-----------+------+ | 1 | yousa | NULL | NULL | | 2 | yousa1 | | NULL | | 3 | yousa2 | NULL | NULL | +----+------------+-----------+------+ 解释下 db.Exec 操作 hello.lastNullName 的过程： 首先它会调用 hello.lastNullName 的 Value 方法，获取到 driver.Value，然后检验 Valid 值是 true 还是 false，如果是 false 则会返回一个 nil 值（nil 值传给 sql driver 会被认为是 NULL 值），如果是 true 则会将 hello.lastNullName.String 的值传过去。 PS: 为了保证你所插入的值能如你所期望是 NULL 值，一定记得要将 sql.Null 中 Valid 值置为 false 使用 NULL 还是有很多危害的，再回顾下数据库中使用 NULL 值的危害 ","date":"2020-10-08","objectID":"/go-mysql-null/:3:0","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":"为什么不建议使用 NULL 所有使用 NULL 值的情况，都可以通过一个有意义的值的表示，这样有利于代码的可读性和可维护性，并能从约束上增强业务数据的规范性。 NULL 值在 timestamp 类型下容易出问题，特别是没有启用参数 explicit_defaults_for_timestamp NOT IN、!= 等负向条件查询在有 NULL 值的情况下返回永远为空结果，查询容易出错 Null 列需要更多的存储空间：需要一个额外字节作为判断是否为 NULL 的标志位 NULL 值到非 NULL 的更新无法做到原地更新，更容易发生索引分裂，从而影响性能。 PS：但把 NULL 列改为 NOT NULL 带来的性能提示很小，除非确定它带来了问题，否则不要把它当成优先的优化措施，最重要的是使用的列的类型的适当性。 当然有些情况是不得不使用 NULL 值进行存储，或者在查询时由于 left/right join 等导致 NULL 值，但总体来说，能少用就少用。 ","date":"2020-10-08","objectID":"/go-mysql-null/:3:1","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":"helper func（提升效率/减少错误） 如果使用 sql.NULL 的话，由于其有两个字段，如果直接手动赋值的话还是很容易遗漏，所以还是需要简单的转换函数，这里给了两个简单的 helper fuc，分别是将 int64 转换成 NullInt64 和将 string 转换成 NullString //ToNullString invalidates a sql.NullString if empty, validates if not empty func ToNullString(s string) sql.NullString { return sql.NullString{String : s, Valid : s != \"\"} } //ToNullInt64 validates a sql.NullInt64 if incoming string evaluates to an integer, invalidates if it does not func ToNullInt64(s string) sql.NullInt64 { i, err := strconv.Atoi(s) return sql.NullInt64{Int64 : int64(i), Valid : err == nil} } ","date":"2020-10-08","objectID":"/go-mysql-null/:4:0","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"},{"categories":["GoLang"],"content":"参考博客 https://github.com/go-sql-driver/mysql/issues/34 https://github.com/guregu/null https://gocn.io/question/243 https://godoc.org/database/sql http://url.cn/5cFTz4W 一千个不用 Null 的理由 ","date":"2020-10-08","objectID":"/go-mysql-null/:5:0","tags":["mysql","golang"],"title":"Go 语言：解决数据库中 null 值的问题","uri":"/go-mysql-null/"}]